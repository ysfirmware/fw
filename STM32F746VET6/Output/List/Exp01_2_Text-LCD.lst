###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        19/Dec/2015  11:35:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\fw\STM32F746VET6\Exp01_2_Text-LCD.c
#    Command line =  
#        E:\fw\STM32F746VET6\Exp01_2_Text-LCD.c -lC
#        E:\fw\STM32F746VET6\Output\List\ -o E:\fw\STM32F746VET6\Output\Obj\
#        --debug --endian=little --cpu=Cortex-M7 -e --fpu=VFPv5_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Full.h" -I E:\fw\STM32F746VET6\ -I
#        E:\fw\STM32F746VET6\include\ -I E:\fw\STM32F746VET6\include\CMSIS\ -I
#        E:\fw\STM32F746VET6\include\STM32F7xx_HAL_Driver\Inc\ -I
#        E:\fw\STM32F746VET6\include\STM32F7xx_HAL_Driver\Src\ -Ohz
#        --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\" -D ARM_MATH_CM7
#    List file    =  E:\fw\STM32F746VET6\Output\List\Exp01_2_Text-LCD.lst
#    Object file  =  E:\fw\STM32F746VET6\Output\Obj\Exp01_2_Text-LCD.o
#
###############################################################################

E:\fw\STM32F746VET6\Exp01_2_Text-LCD.c
      1          /* ============================================================================ */
      2          /*	Exp01_2_Text-LCD.c : 기본 텍스트 LCD 출력 프로그램(16MHz HSI 사용)      */
      3          /* ============================================================================ */
      4          /*					Programmed by Duck-Yong Yoon in 2015.   */
      5          
      6          #include "stm32f746xx.h"
      7          
      8          void Delay_us(unsigned int time_us);		/* time delay for us in 16MHz */
      9          void Delay_ms(unsigned int time_ms);		/* time delay for ms in 16MHz */
     10          void Beep(void);				/* beep for 50 ms */
     11          void Initialize_LCD(void);			/* initialize text LCD module */
     12          void LCD_command(unsigned char command);	/* write a command(instruction) to text LCD */
     13          void LCD_data(unsigned char data);		/* display a character on text LCD */
     14          void LCD_string(unsigned char command, unsigned char *string);	/* display a string on LCD */
     15          
     16          /* ----- 메인 프로그램 -------------------------------------------------------- */
     17          

   \                                 In section .text, align 2, keep-with-next
     18          int main(void)
     19          {
   \                     main: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
     20            unsigned int i;
     21          
     22            RCC->AHB1ENR = 0x0000001C;			// port C, D, E clock enable
   \   00000004   0x201C             MOVS     R0,#+28
   \   00000006   0x....             LDR.N    R1,??DataTable7  ;; 0x40023830
   \   00000008   0x6008             STR      R0,[R1, #+0]
     23          
     24            GPIOC->MODER &= 0x3FFFFFFF;			// set PC15(buzzer) to output
   \   0000000A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40020800
     25            GPIOC->MODER |= 0x40000000;
     26          
     27            GPIOD->MODER = 0x55555555;			// set port D to output
     28          
     29            GPIOE->MODER &= 0x3FFFF3F3;			// set PE15(LED), PE5(LCD_E), PE1(TFT_RS) to output
   \   0000000C   0x....             LDR.N    R4,??DataTable7_2  ;; 0x40021000
     30            GPIOE->MODER |= 0x40000404;
     31          
     32            GPIOE->ODR = 0x0000004F;			// TFT_RS = 1, LCD_E = 0
     33          
     34            Delay_ms(50);                                 // wait for system stabilization
   \   0000000E   0x.... 0x....      ADR.W    R8,?_3
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0x.... 0x....      ADR.W    R10,?_2
   \   00000018   0xF04F 0x4700      MOV      R7,#-2147483648
   \   0000001C   0xF44F 0x4500      MOV      R5,#+32768
   \   00000020   0x0089             LSLS     R1,R1,#+2
   \   00000022   0x0889             LSRS     R1,R1,#+2
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0x.... 0x....      ADR.W    R9,?_1
   \   0000002C   0xF041 0x4180      ORR      R1,R1,#0x40000000
   \   00000030   0x6001             STR      R1,[R0, #+0]
   \   00000032   0xF04F 0x3055      MOV      R0,#+1431655765
   \   00000036   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40020c00
   \   00000038   0x6008             STR      R0,[R1, #+0]
   \   0000003A   0x6820             LDR      R0,[R4, #+0]
   \   0000003C   0x....             LDR.N    R1,??DataTable7_4  ;; 0x3ffff3f3
   \   0000003E   0x4008             ANDS     R0,R1,R0
   \   00000040   0x....             LDR.N    R1,??DataTable7_5  ;; 0x40000404
   \   00000042   0x6020             STR      R0,[R4, #+0]
   \   00000044   0x6820             LDR      R0,[R4, #+0]
   \   00000046   0x4308             ORRS     R0,R1,R0
   \   00000048   0x6020             STR      R0,[R4, #+0]
   \   0000004A   0x204F             MOVS     R0,#+79
   \   0000004C   0x6160             STR      R0,[R4, #+20]
   \   0000004E   0x2032             MOVS     R0,#+50
   \   00000050   0x.... 0x....      BL       Delay_ms
     35            Initialize_LCD();				// initialize text LCD module
   \   00000054   0x.... 0x....      BL       Initialize_LCD
     36          
     37            LCD_string(0x80," OK-STM746 V1.0 ");		// display title
   \   00000058   0x.... 0x....      ADR.W    R1,?_0
   \   0000005C   0x2080             MOVS     R0,#+128
   \   0000005E   0x.... 0x....      BL       LCD_string
     38          
     39            while(1)
     40              { LCD_string(0xC0," 200ms interval ");
   \                     ??main_0: (+1)
   \   00000062   0x4649             MOV      R1,R9
   \   00000064   0x20C0             MOVS     R0,#+192
   \   00000066   0x.... 0x....      BL       LCD_string
     41                Beep();
   \   0000006A   0x.... 0x....      BL       Beep
     42                for(i = 0; i < 12; i++)
   \   0000006E   0x260C             MOVS     R6,#+12
     43                  { GPIOE->BSRR = 0x00008000;		// LED on
   \                     ??main_1: (+1)
   \   00000070   0x61A5             STR      R5,[R4, #+24]
     44                    Delay_ms(200);
   \   00000072   0x20C8             MOVS     R0,#+200
   \   00000074   0x.... 0x....      BL       Delay_ms
     45          	  GPIOE->BSRR = 0x80000000;		// LED off
   \   00000078   0x61A7             STR      R7,[R4, #+24]
     46          	  Delay_ms(200);
   \   0000007A   0x20C8             MOVS     R0,#+200
   \   0000007C   0x.... 0x....      BL       Delay_ms
     47                  }
   \   00000080   0x1E76             SUBS     R6,R6,#+1
   \   00000082   0xD1F5             BNE.N    ??main_1
     48          
     49                LCD_string(0xC0," 400ms interval ");
   \   00000084   0x4651             MOV      R1,R10
   \   00000086   0x20C0             MOVS     R0,#+192
   \   00000088   0x.... 0x....      BL       LCD_string
     50                Beep();
   \   0000008C   0x.... 0x....      BL       Beep
     51                for(i = 0; i < 6; i++)
   \   00000090   0x2606             MOVS     R6,#+6
     52                  { GPIOE->BSRR = 0x00008000;		// LED on
   \                     ??main_2: (+1)
   \   00000092   0x61A5             STR      R5,[R4, #+24]
     53                    Delay_ms(400);
   \   00000094   0xF44F 0x70C8      MOV      R0,#+400
   \   00000098   0x.... 0x....      BL       Delay_ms
     54          	  GPIOE->BSRR = 0x80000000;		// LED off
   \   0000009C   0x61A7             STR      R7,[R4, #+24]
     55          	  Delay_ms(400);
   \   0000009E   0xF44F 0x70C8      MOV      R0,#+400
   \   000000A2   0x.... 0x....      BL       Delay_ms
     56                  }
   \   000000A6   0x1E76             SUBS     R6,R6,#+1
   \   000000A8   0xD1F3             BNE.N    ??main_2
     57          
     58                LCD_string(0xC0," 600ms interval ");
   \   000000AA   0x4641             MOV      R1,R8
   \   000000AC   0x20C0             MOVS     R0,#+192
   \   000000AE   0x.... 0x....      BL       LCD_string
     59                Beep();
   \   000000B2   0x.... 0x....      BL       Beep
     60                for(i = 0; i < 4; i++)
   \   000000B6   0x2604             MOVS     R6,#+4
     61                  { GPIOE->BSRR = 0x00008000;		// LED on
   \                     ??main_3: (+1)
   \   000000B8   0x61A5             STR      R5,[R4, #+24]
     62                    Delay_ms(600);
   \   000000BA   0xF44F 0x7016      MOV      R0,#+600
   \   000000BE   0x.... 0x....      BL       Delay_ms
     63          	  GPIOE->BSRR = 0x80000000;		// LED off
   \   000000C2   0x61A7             STR      R7,[R4, #+24]
     64          	  Delay_ms(600);
   \   000000C4   0xF44F 0x7016      MOV      R0,#+600
   \   000000C8   0x.... 0x....      BL       Delay_ms
     65                  }
   \   000000CC   0x1E76             SUBS     R6,R6,#+1
   \   000000CE   0xD1F3             BNE.N    ??main_3
   \   000000D0   0xE7C7             B.N      ??main_0
     66              }
     67          }
     68          
     69          /* ----- 사용자 함수 ---------------------------------------------------------- */
     70          

   \                                 In section .text, align 4, keep-with-next
     71          void SystemInit(void)				/* dummy system function */
     72          {
     73            asm volatile("NOP");
   \                     SystemInit: (+1)
   \   00000000   0xBF00             NOP
     74          }
   \   00000002   0x4770             BX       LR               ;; return
     75          

   \                                 In section .text, align 4, keep-with-next
     76          void Delay_us(unsigned int time_us)		/* time delay for us in 16MHz */
     77          {
     78            register unsigned int i;
     79          
     80            for(i = 0; i < time_us; i++)			// 3 cycle
   \                     Delay_us: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE00D             B.N      ??Delay_us_0
     81              { asm volatile("NOP");
   \                     ??Delay_us_1: (+1)
   \   00000004   0xBF00             NOP
     82                asm volatile("NOP");
   \   00000006   0xBF00             NOP
     83                asm volatile("NOP");
   \   00000008   0xBF00             NOP
     84                asm volatile("NOP");
   \   0000000A   0xBF00             NOP
     85                asm volatile("NOP");
   \   0000000C   0xBF00             NOP
     86                asm volatile("NOP");
   \   0000000E   0xBF00             NOP
     87                asm volatile("NOP");
   \   00000010   0xBF00             NOP
     88                asm volatile("NOP");
   \   00000012   0xBF00             NOP
     89                asm volatile("NOP");
   \   00000014   0xBF00             NOP
     90                asm volatile("NOP");
   \   00000016   0xBF00             NOP
     91                asm volatile("NOP");
   \   00000018   0xBF00             NOP
     92                asm volatile("NOP");
   \   0000001A   0xBF00             NOP
     93                asm volatile("NOP");			// 13 cycle
   \   0000001C   0xBF00             NOP
     94              }
   \   0000001E   0x1C49             ADDS     R1,R1,#+1
   \                     ??Delay_us_0: (+1)
   \   00000020   0x4281             CMP      R1,R0
   \   00000022   0xD3EF             BCC.N    ??Delay_us_1
     95          }
   \   00000024   0x4770             BX       LR               ;; return
     96          

   \                                 In section .text, align 2, keep-with-next
     97          void Delay_ms(unsigned int time_ms)		/* time delay for ms in 16MHz */
     98          {
   \                     Delay_ms: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     99            register unsigned int i;
    100          
    101            for(i = 0; i < time_ms; i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE004             B.N      ??Delay_ms_0
    102              Delay_us(1000);
   \                     ??Delay_ms_1: (+1)
   \   00000008   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000C   0x1C6D             ADDS     R5,R5,#+1
   \   0000000E   0x.... 0x....      BL       Delay_us
   \                     ??Delay_ms_0: (+1)
   \   00000012   0x42A5             CMP      R5,R4
   \   00000014   0xD3F8             BCC.N    ??Delay_ms_1
    103          }
   \   00000016   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    104          

   \                                 In section .text, align 2, keep-with-next
    105          void Beep(void)					/* beep for 50 ms */
    106          { 
   \                     Beep: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    107            GPIOC->BSRR = 0x00008000;   			// buzzer on
   \   00000002   0x....             LDR.N    R4,??DataTable7_6  ;; 0x40020818
   \   00000004   0xF44F 0x4000      MOV      R0,#+32768
   \   00000008   0x6020             STR      R0,[R4, #+0]
    108            Delay_ms(50);					// delay 50 ms
   \   0000000A   0x2032             MOVS     R0,#+50
   \   0000000C   0x.... 0x....      BL       Delay_ms
    109            GPIOC->BSRR = 0x80000000;			// buzzer off
   \   00000010   0xF04F 0x4000      MOV      R0,#-2147483648
   \   00000014   0x6020             STR      R0,[R4, #+0]
    110          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    111          

   \                                 In section .text, align 2, keep-with-next
    112          void Initialize_LCD(void)			/* initialize text LCD module */
    113          {
   \                     Initialize_LCD: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    114            LCD_command(0x38);				// function set(8 bit, 2 line, 5x7 dot)
   \   00000002   0x2038             MOVS     R0,#+56
   \   00000004   0x.... 0x....      BL       LCD_command
    115            LCD_command(0x0C);				// display control(display ON, cursor OFF)
   \   00000008   0x200C             MOVS     R0,#+12
   \   0000000A   0x.... 0x....      BL       LCD_command
    116            LCD_command(0x06);				// entry mode set(increment, not shift)
   \   0000000E   0x2006             MOVS     R0,#+6
   \   00000010   0x.... 0x....      BL       LCD_command
    117            LCD_command(0x01);				// clear display
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       LCD_command
    118            Delay_ms(2);
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0xE8BD 0x4002      POP      {R1,LR}
   \   00000020   0x....             B.N      Delay_ms
    119          }
    120          

   \                                 In section .text, align 2, keep-with-next
    121          void LCD_command(unsigned char command)		/* write a command(instruction) to text LCD */
    122          {
   \                     LCD_command: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    123            GPIOE->BSRR = 0x00220000;			// E = 0, Rs = 0
   \   00000002   0x....             LDR.N    R4,??DataTable7_7  ;; 0x40021018
   \   00000004   0xF44F 0x1108      MOV      R1,#+2228224
   \   00000008   0x....             B.N      ?Subroutine0
    124            GPIOD->ODR = command;				// output command
    125            Delay_us(1);
    126            GPIOE->BSRR = 0x00000020;			// E = 1
    127            Delay_us(1);
    128            GPIOE->BSRR = 0x00200000;			// E = 0
    129            Delay_us(50);
    130          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x6021             STR      R1,[R4, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable7_9  ;; 0x40020c14
   \   00000004   0x6008             STR      R0,[R1, #+0]
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       Delay_us
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x6020             STR      R0,[R4, #+0]
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       Delay_us
   \   00000016   0xF44F 0x1000      MOV      R0,#+2097152
   \   0000001A   0x6020             STR      R0,[R4, #+0]
   \   0000001C   0x2032             MOVS     R0,#+50
   \   0000001E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000022   0x....             B.N      Delay_us
    131          

   \                                 In section .text, align 2, keep-with-next
    132          void LCD_data(unsigned char data)		/* display a character on text LCD */
    133          {
   \                     LCD_data: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    134            GPIOE->BSRR = 0x00200002;			// E = 0, Rs = 1
   \   00000002   0x....             LDR.N    R4,??DataTable7_7  ;; 0x40021018
   \   00000004   0x....             LDR.N    R1,??DataTable7_8  ;; 0x200002
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
    135            GPIOD->ODR = data;				// output data
    136            Delay_us(1);
    137            GPIOE->BSRR = 0x00000020;			// E = 1
    138            Delay_us(1);
    139            GPIOE->BSRR = 0x00200000;			// E = 0
    140            Delay_us(50);
    141          }
    142          

   \                                 In section .text, align 2, keep-with-next
    143          void LCD_string(unsigned char command, unsigned char *string)	/* display a string on LCD */
    144          {
   \                     LCD_string: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    145            LCD_command(command);				// start position of string
   \   00000004   0x.... 0x....      BL       LCD_command
   \   00000008   0xE003             B.N      ??LCD_string_0
    146            while(*string != '\0')			// display string
    147              { LCD_data(*string);
   \                     ??LCD_string_1: (+1)
   \   0000000A   0xF814 0x0B01      LDRB     R0,[R4], #+1
   \   0000000E   0x.... 0x....      BL       LCD_data
    148                 string++;
    149              }
   \                     ??LCD_string_0: (+1)
   \   00000012   0x7820             LDRB     R0,[R4, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD1F8             BNE.N    ??LCD_string_1
    150          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40023830         DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40020C00         DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x3FFFF3F3         DC32     0x3ffff3f3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x40000404         DC32     0x40000404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x40020818         DC32     0x40020818

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x00200002         DC32     0x200002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x40020C14         DC32     0x40020c14

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x20 0x4F          DC8 " OK-STM746 V1.0 "
   \              0x4B 0x2D    
   \              0x53 0x54    
   \              0x4D 0x37    
   \              0x34 0x36    
   \              0x20 0x56    
   \              0x31 0x2E    
   \              0x30 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x20 0x32          DC8 " 200ms interval "
   \              0x30 0x30    
   \              0x6D 0x73    
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x76 0x61    
   \              0x6C 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x20 0x34          DC8 " 400ms interval "
   \              0x30 0x30    
   \              0x6D 0x73    
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x76 0x61    
   \              0x6C 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x20 0x36          DC8 " 600ms interval "
   \              0x30 0x30    
   \              0x6D 0x73    
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x76 0x61    
   \              0x6C 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Beep
         8   -> Delay_ms
      16   Delay_ms
        16   -> Delay_us
       0   Delay_us
       8   Initialize_LCD
         0   -> Delay_ms
         8   -> LCD_command
       8   LCD_command
         0   -> Delay_us
         8   -> Delay_us
       8   LCD_data
         0   -> Delay_us
         8   -> Delay_us
       8   LCD_string
         8   -> LCD_command
         8   -> LCD_data
       0   SystemInit
      32   main
        32   -> Beep
        32   -> Delay_ms
        32   -> Initialize_LCD
        32   -> LCD_string


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      36  ?Subroutine0
      20  ?_0
      20  ?_1
      20  ?_2
      20  ?_3
      24  Beep
      24  Delay_ms
      38  Delay_us
      34  Initialize_LCD
      10  LCD_command
       6  LCD_data
      26  LCD_string
       4  SystemInit
     210  main

 
 532 bytes in section .text
 
 532 bytes of CODE memory

Errors: none
Warnings: none
