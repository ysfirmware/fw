/* ============================================================================ */
/*		OK-STM32F0 V1.0 키트용(STM32F051R8T6) 기본 헤더 파일		*/
/* ============================================================================ */
/*					 programmed by Duck-Yong Yoon in 2013.  */
/*                          Modified for Ohm's TFT-LCD and zero in 2014/07/06.  */

// -------------------------------------------------------------------------------
//   이 헤더파일은 OK-STM32F0 키트 V1.0을 위한 것입니다. 이것은 아래의 조건에서만
//  올바른 동작을 보장합니다.
// -------------------------------------------------------------------------------
//	(1) 시스템 클록  : 48MHz
//	(2) C 컴파일러   : IAR EWARM V6.40.5
//	(3) 최적화 옵션  : High/Speed
//	(4) CSTACK 크기  : 0x1000
//      (5) TFT-LCD 모듈 : Ohm's TFT-LCD(China)
// -------------------------------------------------------------------------------

#include <math.h>

/* ---------------------------------------------------------------------------- */

typedef unsigned char	U08;			// data type definition
typedef   signed char	S08;
typedef unsigned short 	U16;
typedef   signed short	S16;
typedef unsigned int 	U32;
typedef   signed int	S32;

/* ---------------------------------------------------------------------------- */
/*		사용자 정의 함수 선언						*/
/* ---------------------------------------------------------------------------- */

void Initialize_MCU(void);			// initialize STM32F051R8T6 MCU
void Delay_us(U32 time_us);			// time delay for us in 48MHz
void Delay_ms(U32 time_ms);			// time delay for ms in 48MHz
void Beep(void);				// beep for 50 ms
void Beep_3times(void);				// beep 3 times
unsigned char Key_input(void);			// input key KEY1~KEY4
unsigned char Key_input_silent(void);		// input key KEY1~KEY4 without beep sound

void Initialize_LCD(void);			// initialize text LCD module
void LCD_command(U08 command);			// write a command(instruction) to text LCD
void LCD_data(U08 data);			// display a character on text LCD
void LCD_string(U08 command, U08 *string);	// display a string on LCD

void LCD_binary(U16 number, U08 digit);		/* display 8 or 16 bit binary number */
void LCD_unsigned_decimal(U32 number, U08 zerofill, U08 digit); /* display unsigned decimal number */
void LCD_signed_decimal(S32 number, U08 zerofill, U08 digit);	/* display signed decimal number */
void LCD_hexadecimal(U32 number, U08 digit);	/* display hexadecimal number */
void LCD_0x_hexadecimal(U32 number, U08 digit);	/* display hexadecimal number with 0x */
void LCD_unsigned_float(float number, U08 integral, U08 fractional); /* display unsigned floating-point number */
void LCD_signed_float(float number, U08 integral, U08 fractional);   /* display signed floating-point number */

/* ---------------------------------------------------------------------------- */
/*		OK-STM32F0 키트 기본 함수					*/
/* ---------------------------------------------------------------------------- */

void SystemInit(void)				/* dummy system function */
{
  asm volatile("NOP");
}

void Initialize_MCU(void)			/* initialize STM32F051R8T6 MCU */
{
  FLASH->ACR = 0x00000011;			// enable Prefetch Buffer and set Flash Latency for 48MHz

  RCC->CR |= 0x00010001;			// HSE on, HSI on
  while((RCC->CR & 0x00000002) == 0);		// wait untill HSIRDY = 1
  RCC->CFGR = 0x00000000;			// SYSCLK = HSI
  while((RCC->CFGR & 0x0000000C) != 0);		// wait untill HSI = SYSCLK

  RCC->CR &= 0xFEFFFFFF;			// PLL off, HSE on, HSI on
  RCC->CFGR = 0x00050000;			// PLLMUL = 3, SYSCLK = HSE*PLLMUL = 16MHz*3 = 48MHz
  RCC->CFGR2 = 0x00000000;			// PLL input = HSE/1 = 16MHz/1 = 16MHz

  RCC->CR |= 0x01000000;			// PLL on, HSE on, HSI on
  while((RCC->CR & 0x02000000) == 0);		// wait untill PLLRDY = 1

  RCC->CFGR |= 0x00000002;			// PLL = SYSCLK
  while((RCC->CFGR & 0x0000000C) != 0x00000008);// wait untill PLL = SYSCLK
  RCC->CR |= 0x00080000;			// CSS on

  RCC->AHBENR = 0x005E0001;			// 포트 A,B,C,D,F 및 DMA 제어기에 클럭 공급
  RCC->APB1ENR = 0x30404913;			// 주변장치 클럭(D/A, PWR, I2C2, SPI2, WWDG, TIM14,6,3,2)
  RCC->APB2ENR = 0x00475A01;			// 주변장치 클럭(DBGMCU, TIM17,16,15, USART1, SPI1, A/D, SYSCFG/COMP)

  GPIOA->MODER = 0x296A13FF;			// set PA15-PA0
  GPIOA->OSPEEDR = 0x0F030000;			// SWDIO = BUZZER = MCO = 50MHz speed
  GPIOA->ODR = 0x00000040;			// BUZZER = LED = 0, -MP3_RESET = 1

  GPIOB->MODER = 0xA8005A95;			// set PB15-PB0
  GPIOB->OSPEEDR = 0x54000540;			// SPI2 = SPI1 = 10MHz speed
  GPIOB->ODR = 0x000000C7;			// -MP3_DCS = -MP3_CS = -SD_CS = -RTC_CS = -TS_CS = 1

  GPIOC->MODER = 0x55555555;			// set PC15-PC0 to output
  GPIOC->OSPEEDR = 0x55555555;			// 10MHz speed

  GPIOD->MODER = 0x00000010;			// set PD2(LCD_E) to output
  GPIOD->OSPEEDR = 0x00000010;			// 10MHz speed
  GPIOD->ODR = 0x00000000;			// LCD_E = 0

  GPIOF->MODER = 0x00005500;			// set PF7-PF4 to output
  GPIOF->OSPEEDR = 0x00005500;			// 10MHz speed
  GPIOF->ODR = 0x000000D0;			// -TFT_RESET = -TFT_CS = -TFT_WR = 1
}

void Delay_us(U32 time_us)			/* time delay for us in 48MHz */
{
  register unsigned int i;

  for(i = 0; i < time_us; i++)
    { asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 5
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 10
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 15
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 20
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 25
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 30
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 35
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 40
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");
      asm volatile("NOP");			// 44
    }
}

void Delay_ms(U32 time_ms)			/* time delay for ms in 48MHz */
{
  register unsigned int i;

  for(i = 0; i < time_ms; i++)
    Delay_us(1000);
}

void Beep(void)					/* beep for 50 ms */
{ 
  GPIOA->BSRR = 0x00001000;			// buzzer on
  Delay_ms(50);					// delay 50 ms
  GPIOA->BRR = 0x00001000;			// buzzer off
}

void Beep_3times(void)				/* beep 3 times */
{ 
  Beep();		   			// beep for 50 ms
  Delay_ms(100);
  Beep();		   			// beep for 50 ms
  Delay_ms(100);
  Beep();		   			// beep for 50 ms
}

#define KEY1		0x0E			// KEY1 value
#define KEY2		0x0D			// KEY2 value
#define KEY3		0x0B			// KEY3 value
#define KEY4		0x07			// KEY4 value
#define no_key		0x0F			// no key input
#define MENU_key	0x0A			// MENU key

unsigned char key_flag = 0;

unsigned char Key_input(void)			/* input key KEY1~KEY4 */
{
  unsigned char key;

  key = (GPIOB->IDR & 0x00000F00) >> 8;		// any key pressed ?
  if(key == 0x0F)				// if no key, check key off
    { if(key_flag == 0)
        return key;
      else
        { Delay_ms(20);
          key_flag = 0;
          return key;
        }
    }
  else						// if key input, check continuous key
    { if(key_flag != 0)				// if continuous key, treat as no key input
        return 0x0F;
      else					// if new key, beep and delay for debounce
        { Beep();
          key_flag = 1;
          return key;
        }
    }
}

unsigned char Key_input_silent(void)		/* input key KEY1~KEY4 without beep sound */
{
  unsigned char key;

  key = (GPIOB->IDR & 0x00000F00) >> 8;		// any key pressed ?
  if(key == 0x0F)				// if no key, check key off
    { if(key_flag == 0)
        return key;
      else
        { Delay_ms(20);
          key_flag = 0;
          return key;
        }
    }
  else						// if key input, check continuous key
    { if(key_flag != 0)				// if continuous key, treat as no key input
        return 0x0F;
      else					// if new key, delay for debounce
        { Delay_ms(20);
          key_flag = 1;
          return key;
        }
    }
}

/* ---------------------------------------------------------------------------- */
/*		텍스트 LCD 기본 함수						*/
/* ---------------------------------------------------------------------------- */

void Initialize_LCD(void)			/* initialize text LCD module */
{
  RCC->AHBENR |= 0x00580000;			// enable clock of port C,D,F

  GPIOC->MODER = 0x55555555;			// set PC15-PC0 to output
  GPIOC->OSPEEDR = 0x55555555;			// 10MHz speed

  GPIOD->MODER = 0x00000010;			// set PD2(LCD_E) to output
  GPIOD->OSPEEDR = 0x00000010;			// 10MHz speed
  GPIOD->ODR = 0x00000000;			// LCD_E = 0

  GPIOF->MODER = 0x00005500;			// set PF7-PF4 to output
  GPIOF->OSPEEDR = 0x00005500;			// 10MHz speed
  GPIOF->ODR = 0x000000D0;			// -TFT_RESET = -TFT_CS = -TFT_WR = 1

  LCD_command(0x38);				// function set(8 bit, 2 line, 5x7 dot)
  LCD_command(0x0C);				// display control(display ON, cursor OFF)
  LCD_command(0x06);				// entry mode set(increment, not shift)
  LCD_command(0x01);				// clear display
  Delay_ms(2);
}

void LCD_command(U08 command)			/* write a command(instruction) to text LCD */
{
  GPIOD->BRR = 0x00000004;			// E = 0
  GPIOF->BRR = 0x00000020;			// Rs = 0
  GPIOC->ODR = command;				// output command
  asm volatile("NOP");
  GPIOD->BSRR = 0x00000004;			// E = 1
  Delay_us(1);
  GPIOD->BRR = 0x00000004;			// E = 0
  Delay_us(50);
}

void LCD_data(U08 data)				/* display a character on text LCD */
{
  GPIOD->BRR = 0x00000004;			// E = 0
  GPIOF->BSRR = 0x00000020;			// Rs = 1
  GPIOC->ODR = data;				// output data
  asm volatile("NOP");
  GPIOD->BSRR = 0x00000004;			// E = 1
  Delay_us(1);
  GPIOD->BRR = 0x00000004;			// E = 0
  Delay_us(50);
}

void LCD_string(U08 command, U08 *string)	/* display a string on LCD */
{
  LCD_command(command);				// start position of string
  while(*string != '\0')			// display string
    { LCD_data(*string);
       string++;
    }
}

/* ---------------------------------------------------------------------------- */
/*		텍스트 LCD 모듈의 수치 데이터 출력 함수				*/
/* ---------------------------------------------------------------------------- */

void LCD_binary(U16 number, U08 digit)		/* display 8 or 16 bit binary number */
{
  unsigned char i, shift;

  if((digit == 0) || (digit > 16)) return;

  shift = digit - 1;
  for(i = 0; i < digit; i++ )
    { LCD_data(((number >> shift) & 0x01) + '0');
      shift--;
    }
}

void LCD_unsigned_decimal(U32 number, U08 zerofill, U08 digit) /* display unsigned decimal number */
{
  unsigned char zero_flag, character;
  unsigned long div;

  if((digit == 0) || (digit > 9)) return;

  div = 1;
  while(--digit) div *= 10;

  zero_flag = zerofill;
  while(div > 0)				// display number
    { character = number / div;
      if((character == 0) && (zero_flag == 0) && (div != 1))
        LCD_data(character + ' ');
      else
        { zero_flag = 1;
          LCD_data(character + '0');
        }
      number %= div;
      div /= 10;
    }
}

void LCD_signed_decimal(S32 number, U08 zerofill, U08 digit)	/* display signed decimal number */
{
  unsigned char zero_flag, character;
  unsigned long div;

  if((digit == 0) || (digit > 9)) return;

  if(number >= 0)				// display sign
    LCD_data('+');
  else
    { LCD_data('-');
      number = -number;
    }

  div = 1;
  while(--digit) div *= 10;

  zero_flag = zerofill;
  while(div > 0)				// display number
    { character = number / div;
      if((character == 0) && (zero_flag == 0) && (div != 1))
        LCD_data(character + ' ');
      else
        { zero_flag = 1;
          LCD_data(character + '0');
        }
      number %= div;
      div /= 10;
    }
}

void LCD_hexadecimal(U32 number, U08 digit)	/* display hexadecimal number */
{
  unsigned char i, character;

  if((digit == 0) || (digit > 8)) return;

  for(i = digit; i > 0; i--)
    { character = (number >> 4*(i-1)) & 0x0F;
      if(character < 10) LCD_data(character + '0');
      else               LCD_data(character - 10 + 'A');
    }
}

void LCD_0x_hexadecimal(U32 number, U08 digit)	/* display hexadecimal number with 0x */
{
  unsigned char i, character;

  if((digit == 0) || (digit > 8)) return;

  LCD_data('0');
  LCD_data('x');

  for(i = digit; i > 0; i--)
    { character = (number >> 4*(i-1)) & 0x0F;
      if(character < 10) LCD_data(character + '0');
      else               LCD_data(character - 10 + 'A');
    }
}

void LCD_unsigned_float(float number, U08 integral, U08 fractional) /* display unsigned floating-point number */
{
  unsigned char zero_flag, digit, character;	// integral = digits of integral part
  unsigned long div, integer;			// fractional = digits of fractional part

  digit = integral + fractional;
  if((integral == 0) || (fractional == 0) || (digit > 9)) return;

  div = 1;
  while(--digit) div *= 10;

  while(fractional--) number *= 10.;
  integer = (U32)(number + 0.5);

  zero_flag = 0;
  digit = 1;
  while(div > 0)				// display number
    { character = integer / div;
      if((character == 0) && (zero_flag == 0) && (digit != integral))
        LCD_data(character + ' ');
      else
        { zero_flag = 1;
          LCD_data(character + '0');
        }
      integer %= div;
      div /= 10;

      if(digit == integral)
        LCD_data('.');
      digit++;
    }
}

void LCD_signed_float(float number, U08 integral, U08 fractional) /* display signed floating-point number */
{
  unsigned char zero_flag, digit, character;
  unsigned long div, integer;

  digit = integral + fractional;
  if((integral == 0) || (fractional == 0) || (digit > 9)) return;

  if(number >= 0)				// display sign
    LCD_data('+');
  else
    { LCD_data('-');
      number = -number;
    }

  div = 1;
  while(--digit) div *= 10;

  while(fractional--) number *= 10.;
  integer = (U32)(number + 0.5);

  zero_flag = 0;
  digit = 1;
  while(div > 0)				// display number
    { character = integer / div;
      if((character == 0) && (zero_flag == 0) && (digit != integral))
        LCD_data(character + ' ');
      else
        { zero_flag = 1;
          LCD_data(character + '0');
        }
      integer %= div;
      div /= 10;

      if(digit == integral)
        LCD_data('.');
      digit++;
    }
}

/* ---------------------------------------------------------------------------- */
/*		한글 폰트 처리 테이블						*/
/* ---------------------------------------------------------------------------- */
const unsigned char table_cho[21] =		// 초성 : 자음(14) + 쌍자음(5) = 19 개
	{0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};
const unsigned char table_joong[30] =		// 중성 : 자음(10) + 쌍자음(11) = 21 개
	{0,0,0,1,2,3,4,5,0,0,6,7,8,9,10,11,0,0,12,13,14,15,16,17,0,0,18,19,20,21};
const unsigned char table_jong[30] =		// 종성 : 자음(14) + 쌍자음(11) + 쌍자음(2) = 27 개
	{0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,17,18,19,20,21,22,23,24,25,26,27};

const unsigned char bul_cho1[22] = {0,0,0,0,0,0,0,0,0,1,3,3,3,1,2,4,4,4,2,1,3,0}; // 벌수
const unsigned char bul_cho2[22] = {0,5,5,5,5,5,5,5,5,6,7,7,7,6,6,7,7,7,6,6,7,5};
const unsigned char bul_jong[22] = {0,0,2,0,2,1,2,1,2,3,0,2,1,3,3,1,2,1,3,3,1,1};

/* ---------------------------------------------------------------------------- */
/*			16x16 한글 명조체 폰트					*/
/* ---------------------------------------------------------------------------- */
const unsigned char K_font[360][32] = {		/* 16x16 Korean character font */
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x08,0x08,0x08,0x88,0xC8,0x78,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x02,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0x08,0xC8,0xF8,0x38,0xC8,0xF8,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x02,0x01,0x01,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0xF8,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x03,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0xF8,0xF8,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x03,0x02,0x02,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0xF8,0xF8,0x08,0xF8,0xF8,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x03,0x02,0x01,0x03,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0xC8,0xC8,0x48,0x48,0x48,0x78,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x03,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0xF8,0xF8,0x08,0x08,0x08,0xF8,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x03,0x03,0x02,0x02,0x02,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x10,0xF0,0xF0,0x40,0x40,0x48,0xF8,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x03,0x03,0x02,0x02,0x02,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x10,0xF0,0xF0,0x40,0xF0,0xF0,0x48,0xF8,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x03,0x03,0x02,0x03,0x03,0x02,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0xC4,0x7C,0xFC,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x02,0x02,0x01,0x01,0x00,0x00,0x01,0x03,0x02,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0xF8,0x78,0x80,0x80,0x78,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x02,0x03,0x01,0x00,0x03,0x03,0x00,0x01,0x03,0x02,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0xE0,0xF0,0x18,0x08,0x08,0x18,0xF0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x03,0x02,0x02,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0x08,0x08,0x88,0xC8,0x78,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x02,0x02,0x01,0x01,0x00,0x01,0x03,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0x88,0xC8,0xF8,0xB8,0xC8,0xF8,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x02,0x03,0x01,0x02,0x03,0x01,0x00,0x01,0x03,0x02,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x10,0x10,0x14,0x94,0xD4,0xF4,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x02,0x02,0x01,0x01,0x00,0x01,0x03,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x28,0x28,0x28,0x28,0xA8,0xE8,0x78,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x02,0x02,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0xF8,0xF8,0x48,0x48,0x48,0x48,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x03,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x08,0x08,0xF8,0xF8,0x08,0x08,0xF8,0xF8,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
   0x02,0x02,0x03,0x03,0x02,0x02,0x03,0x03,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0xC8,0xE8,0x2C,0x2C,0x2C,0xE8,0xC8,0x08,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x03,0x02,0x02,0x02,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0xFC,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x04,0x04,0xFC,0x7C,0x04,0x04,0x04,0xFC,0x7C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x3C,0x7C,0x44,0x44,0x44,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x44,0x44,0x7C,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x7C,0x7C,0x50,0x50,0x7C,0x7C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x80,0x80,0x40,0x60,0x34,0x1C,0x1C,0x10,0x20,0x60,0xC0,0x80,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x80,0xC0,0x60,0x3C,0x1C,0xB0,0xC0,0x60,0x3C,0x3C,0x60,0xC0,0x80,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x44,0x44,0x7C,0x38,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x80,0x84,0x44,0x44,0x24,0x24,0x14,0x3C,0x2C,0x44,0xC0,0x80,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x44,0x64,0x34,0x1C,0x1C,0x64,0x64,0x1C,0x1C,0x34,0x64,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x80,0x88,0x48,0x48,0x6A,0x3A,0x1A,0x3A,0x28,0x48,0xC8,0x80,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0xFC,0xFC,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x44,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x44,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x34,0x7C,0x4E,0x4E,0x4E,0x4E,0x7C,0x34,0x04,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0xFC,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x04,0x04,0x7C,0x3C,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x3C,0x7C,0x44,0x44,0x44,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x44,0x44,0x7C,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x7C,0x7C,0x50,0x50,0x7C,0x7C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x40,0x40,0x20,0x30,0x1A,0x0E,0x0E,0x08,0x10,0x30,0x60,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x60,0x30,0x1E,0x0E,0x18,0x60,0x18,0x0E,0x1E,0x30,0x60,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x1C,0x3E,0x22,0x22,0x22,0x22,0x3E,0x1C,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x40,0x42,0x22,0x22,0x12,0x12,0x0A,0x1E,0x16,0x22,0x60,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x44,0x64,0x34,0x1C,0x1C,0x64,0x64,0x1C,0x1C,0x34,0x64,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x40,0x44,0x24,0x24,0x36,0x1E,0x0E,0x1E,0x14,0x24,0x64,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0xFC,0x7C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x44,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x44,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x34,0x7C,0x4E,0x4E,0x4E,0x4E,0x7C,0x34,0x04,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x04,0x04,0x04,0x04,0xFC,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x04,0xFC,0x7C,0x04,0x04,0xFC,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x44,0x44,0x3C,0x7C,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x50,0x7C,0x7C,0x50,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x80,0x40,0x60,0x34,0x1C,0x1C,0x20,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x80,0xC0,0x7C,0x3C,0xE0,0xE0,0x3C,0x7C,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x7C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x44,0x44,0x24,0x34,0x1C,0x2C,0x64,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x64,0x34,0x3C,0x6C,0x34,0x3C,0x6C,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x88,0x88,0x4C,0x6C,0x3C,0x58,0xC8,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x14,0xFC,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x34,0x7C,0x4E,0x4E,0x4E,0x7C,0x34,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x04,0x04,0x04,0x04,0xFC,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x04,0x7C,0x3C,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x44,0x44,0x3C,0x7C,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x50,0x7C,0x7C,0x50,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x20,0x30,0x1A,0x0E,0x0E,0x10,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x60,0x3C,0x1C,0x70,0x70,0x1C,0x3C,0x60,0x40,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x7C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x44,0x24,0x24,0x14,0x1C,0x2C,0x64,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x44,0x64,0x34,0x3C,0x6C,0x74,0x3C,0x6C,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x44,0x44,0x24,0x26,0x16,0x1E,0x2C,0x64,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x14,0x14,0x14,0x14,0x14,0xFC,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x34,0x7C,0x4E,0x4E,0x4E,0x7C,0x34,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x04,0x84,0xC4,0x64,0x3C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x84,0xE4,0x7C,0x9C,0xE4,0x7C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0xFC,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0xFC,0x84,0x84,0x84,0x84,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0xFC,0x84,0x7C,0xFC,0x84,0x84,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0xE4,0xE4,0x24,0x24,0x24,0x3C,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0xFC,0xFC,0x84,0x84,0x84,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0xFC,0xFC,0x90,0x90,0x94,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x04,0xFC,0xFC,0x90,0xFC,0xFC,0x90,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x80,0xE4,0x3C,0x7C,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x80,0xC0,0x7C,0x1C,0xE0,0x1C,0x7C,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x78,0xFC,0x84,0x84,0x84,0xFC,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x84,0x84,0x44,0x64,0x34,0x5C,0xCC,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x84,0xC4,0x64,0xFC,0xDC,0x64,0xFC,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x08,0x08,0x8C,0xCC,0x6C,0xF8,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x14,0x14,0x94,0xD4,0x74,0x3C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0xFC,0xFC,0x24,0x24,0x24,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x84,0xFC,0xFC,0x84,0x84,0xFC,0xFC,0x84,0x84,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x74,0xFC,0x8E,0x8E,0xFC,0x74,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x04,0x04,0x7C,0x3C,0x04,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x1C,0x3C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x1C,0x3C,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x1C,0x3C,0x24,0x24,0x24,0x1C,0x3C,0x24,0x24,0x24,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x3C,0x3C,0x24,0x24,0x24,0x24,0x24,0x3C,0x3C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x50,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x7C,0x7C,0x50,0x50,0x7C,0x7C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x40,0x40,0x20,0x30,0x1A,0x0E,0x0E,0x08,0x10,0x30,0x60,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x60,0x30,0x1E,0x0E,0x58,0x70,0x30,0x1E,0x1E,0x30,0x60,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x44,0x7C,0x38,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x44,0x44,0x44,0x24,0x24,0x14,0x3C,0x2C,0x44,0x40,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x44,0x64,0x34,0x1C,0x1C,0x64,0x64,0x1C,0x1C,0x34,0x64,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x44,0x44,0x24,0x34,0x1E,0x0E,0x1E,0x34,0x24,0x44,0x40,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x7C,0x3C,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x44,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x44,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x04,0x34,0x7C,0x4E,0x4E,0x4E,0x4E,0x7C,0x34,0x04,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x04,0x7C,0x3C,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x44,0x44,0x3C,0x7C,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x7C,0x7C,0x50,0x7C,0x7C,0x50,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x20,0x30,0x1A,0x0E,0x0E,0x10,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x60,0x3C,0x1C,0x70,0x70,0x1C,0x3C,0x60,0x40,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x7C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x44,0x24,0x24,0x14,0x1C,0x2C,0x64,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x44,0x64,0x34,0x3C,0x6C,0x34,0x3C,0x6C,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x44,0x44,0x24,0x26,0x16,0x1E,0x2C,0x64,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x14,0x14,0x14,0x14,0x14,0xFC,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x04,0x34,0x7C,0x4E,0x4E,0x4E,0x7C,0x34,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x40,0x40,0x40,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x42,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x20,0x20,0x20,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x01,0x01,0x01},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x22,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x1F,0x01,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x42,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x44,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0xA0,0xA2,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0xA0,0xA4,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x80,0x80,0x80,
   0x00,0x04,0x04,0x04,0x07,0x07,0x04,0x04,0x04,0x04,0x00,0x7F,0x3F,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x42,0xFE,0xFE,0x00,
   0x00,0x04,0x04,0x07,0x07,0x04,0x04,0x04,0x04,0x00,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x04,0x04,0x04,0x07,0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x08,0x08,0x08,0x0F,0x0F,0x08,0x08,0x09,0x0F,0x0F,0x08,0x08,0x08,0x08,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x7F,0x3F,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x3F,0x1F,0x01,0x01,0x05,0x05,0x04,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x01,0x01,0x01,0x3F,0x1F,0x01,0x05,0x05,0x04,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x3F,0x1F,0x01,0x01,0x01,0x01,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x7F,0x3F,0x01,0x01,0x7F,0x3F,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x02,0x02,0x02,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x40,0x40,0x40,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x42,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x20,0x20,0x20,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x01,0x01,0x01},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x22,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x1F,0x01,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x42,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0xA0,0xA2,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA4,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x08,0x08,0x08,0x08,0x08,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x80,0x80,0x80,
   0x00,0x04,0x04,0x04,0x07,0x07,0x04,0x04,0x04,0x04,0x00,0x7F,0x3F,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x42,0xFE,0xFE,0x00,
   0x00,0x04,0x04,0x04,0x07,0x07,0x04,0x04,0x04,0x00,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x04,0x04,0x04,0x07,0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x08,0x08,0x08,0x08,0x0F,0x0F,0x08,0x08,0x0F,0x0F,0x08,0x08,0x08,0x08,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x7F,0x3F,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x3F,0x1F,0x01,0x01,0x05,0x05,0x04,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x01,0x01,0x01,0x1F,0x0F,0x01,0x05,0x05,0x04,0x3F,0x1F,0x00,0x7F,0x3F,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x3F,0x1F,0x01,0x01,0x01,0x01,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x7F,0x3F,0x01,0x01,0x7F,0x3F,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x02,0x02,0x02,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x3F,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x20,0x20,0x20,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x22,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x50,0x50,0x50,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x52,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x22,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x24,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x52,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x54,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x20,0x20,0x20,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x03,0x01,0x00,0x00,0x00},
  {0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x22,0xFE,0xFE,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x00,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x40,0x40,0x40,0x40,0xC0,0xC0,0x40,0x40,0x40,0x40,0x04,0xFC,0xFC,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x07,0x03,0x00,0x00,0x01,0x01,0x01,0x07,0x03,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x44,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x01,0x01,0x01,0x07,0x03,0x01,0x01,0x01,0x00,0x07,0x03,0x00,0x07,0x03,0x00},
  {0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x07,0x07,0x01,0x01,0x07,0x07,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x20,0x20,0x20,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x22,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x50,0x50,0x50,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFC,0xFC,0x52,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x22,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x50,0x52,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x20,0x20,0x20,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x03,0x01,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x04,0xFC,0xFC,0x22,0xFE,0xFE,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x01,0x00,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x07,0x07,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x00,0x00,0x01,0x01,0x03,0x03,0x00},
  {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xA0,0x24,0xFC,0xFC,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x02,0xFE,0xFE,0x00,
   0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x07,0x07,0x01,0x01,0x07,0x07,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFE,0xFE,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x04,0x04,0x7C,0x3C,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x04,0x04,0x7C,0x3C,0x40,0x60,0x3C,0x1C,0x70,0x60,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x44,0x64,0x3C,0x3C,0x64,0x44,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x28,0x78,0x5C,0x5C,0x78,0x28,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x44,0x7C,0x7C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x50,0x7C,0x7C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x60,0x3C,0x3C,0x60,0x40,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x54,0x54,0x54,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x18,0x44,0x7C,0x7C,0x44,0x7C,0x7C,0x44,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x28,0x78,0x5C,0x5C,0x78,0x28,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x44,0x7C,0x7C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x7C,0x7C,0x50,0x7C,0x7C,0x40,0x60,0x3C,0x3C,0x60,0x60,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x40,0x40,0x20,0x30,0x1C,0x0C,0x10,0x30,0x60,0x40,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x40,0x60,0x30,0x1C,0x5C,0x70,0x30,0x1C,0x1C,0x30,0x60,0x40,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x44,0x7C,0x38,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x44,0x44,0x24,0x34,0x1C,0x1C,0x34,0x24,0x44,0x44,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x48,0x48,0x28,0x38,0x1C,0x1C,0x38,0x28,0x48,0x48,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x7C,0x3C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x54,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x44,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x44,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x08,0x28,0x78,0x5C,0x5C,0x5C,0x5C,0x78,0x28,0x08,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x7C,0x3C,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x7C,0x3C,0x40,0x60,0x3C,0x1C,0x70,0x60,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x44,0x64,0x3C,0x3C,0x64,0x44,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x28,0x78,0x5C,0x5C,0x78,0x28,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x44,0x44,0x44,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x04,0x04,0x7C,0x3C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x44,0x7C,0x7C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x50,0x7C,0x7C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x60,0x3C,0x3C,0x60,0x40,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x54,0x54,0x54,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x18,0x44,0x7C,0x7C,0x44,0x7C,0x7C,0x44,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x28,0x78,0x5C,0x5C,0x78,0x28,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x44,0x7C,0x7C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x7C,0x7C,0x50,0x7C,0x7C,0x40,0x60,0x3C,0x3C,0x60,0x60,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x40,0x40,0x20,0x30,0x1C,0x0C,0x10,0x30,0x60,0x40,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x40,0x60,0x30,0x1C,0x5C,0x70,0x30,0x1C,0x1C,0x30,0x60,0x40},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x44,0x7C,0x38,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x44,0x44,0x24,0x34,0x1C,0x1C,0x34,0x24,0x44,0x44,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x48,0x48,0x28,0x38,0x1C,0x1C,0x38,0x28,0x48,0x48,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x7C,0x3C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x54,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x44,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x44,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x08,0x28,0x78,0x5C,0x5C,0x5C,0x5C,0x78,0x28,0x08,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x7C,0x3C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x7C,0x3C,0x04,0x04,0x04,0x7C,0x3C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x7C,0x3C,0x40,0x60,0x3C,0x1C,0x70,0x60},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x00,0x44,0x64,0x3C,0x3C,0x64,0x44,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x28,0x78,0x5C,0x5C,0x78,0x28,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x44,0x44,0x44,0x44,0x44,0x44,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x54,0x54,0x5C,0x5C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x04,0x04,0x7C,0x3C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x44,0x7C,0x7C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x50,0x7C,0x7C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x60,0x3C,0x3C,0x60,0x40},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x54,0x54,0x54,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x18,0x44,0x7C,0x7C,0x44,0x7C,0x7C,0x44,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x28,0x78,0x5C,0x5C,0x78,0x28,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x44,0x44,0x7C,0x7C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x50,0x50,0x54,0x7C,0x7C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x7C,0x7C,0x50,0x7C,0x7C,0x40,0x60,0x3C,0x3C,0x60,0x60,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x20,0x30,0x1C,0x0C,0x10,0x30,0x60,0x40,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x40,0x60,0x30,0x1C,0x5C,0x70,0x30,0x1C,0x1C,0x30,0x60,0x40},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x44,0x7C,0x38,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x24,0x34,0x1C,0x1C,0x34,0x24,0x44,0x44,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x48,0x48,0x28,0x38,0x1C,0x1C,0x38,0x28,0x48,0x48,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x7C,0x3C,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x54,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x44,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x08,0x28,0x78,0x5C,0x5C,0x5C,0x5C,0x78,0x28,0x08,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x04,0x04,0x04,0x7C,0x3C,0x00,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x04,0x04,0x7C,0x3C,0x40,0x60,0x3C,0x1C,0x70,0x60,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x00,0x44,0x64,0x3C,0x3C,0x64,0x44,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x04,0x3C,0x7C,0x40,0x40,0x40,0x28,0x78,0x5C,0x5C,0x78,0x28,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x08,0x38,0x78,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x54,0x54,0x54,0x54,0x54,0x5C,0x5C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x04,0x04,0x04,0x7C,0x3C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x50,0x7C,0x7C,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x40,0x60,0x3C,0x3C,0x60,0x40,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x7C,0x7C,0x54,0x54,0x54,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x34,0x74,0x54,0x5C,0x18,0x44,0x7C,0x7C,0x44,0x7C,0x7C,0x44,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x34,0x74,0x54,0x5C,0x5C,0x00,0x28,0x78,0x5C,0x5C,0x78,0x28,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x7C,0x7C,0x44,0x44,0x44,0x44,0x44,0x7C,0x7C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x04,0x7C,0x7C,0x50,0x50,0x50,0x50,0x50,0x54,0x7C,0x7C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x7C,0x7C,0x50,0x7C,0x7C,0x40,0x60,0x3C,0x3C,0x60,0x60,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x40,0x40,0x20,0x30,0x1C,0x0C,0x10,0x30,0x60,0x40,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x40,0x60,0x30,0x1C,0x1C,0x30,0x60,0x60,0x30,0x1C,0x1C,0x30,0x60,0x40,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x38,0x7C,0x44,0x44,0x44,0x44,0x7C,0x38,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x44,0x44,0x24,0x34,0x1C,0x1C,0x34,0x24,0x44,0x44,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x48,0x48,0x28,0x38,0x1C,0x1C,0x38,0x28,0x48,0x48,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x14,0x7C,0x3C,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x04,0x3C,0x7C,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x44,0x44,0x7C,0x7C,0x44,0x44,0x7C,0x7C,0x44,0x44,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x08,0x28,0x78,0x5C,0x5C,0x5C,0x5C,0x78,0x28,0x08,0x00,0x00,0x00}};

/* ---------------------------------------------------------------------------- */
/*		한글 완성형 -> 조합형 변환 테이블				*/
/* ---------------------------------------------------------------------------- */
const unsigned char KS_Table[2350][2] = {
{0x88,0x61},{0x88,0x62},{0x88,0x65},{0x88,0x68},{0x88,0x69},    // 가
{0x88,0x6A},{0x88,0x6B},{0x88,0x71},{0x88,0x73},{0x88,0x74},
{0x88,0x75},{0x88,0x76},{0x88,0x77},{0x88,0x78},{0x88,0x79},
{0x88,0x7B},{0x88,0x7C},{0x88,0x7D},{0x88,0x81},{0x88,0x82},
{0x88,0x85},{0x88,0x89},{0x88,0x91},{0x88,0x93},{0x88,0x95},
{0x88,0x96},{0x88,0x97},{0x88,0xA1},{0x88,0xA2},{0x88,0xA5},
{0x88,0xA9},{0x88,0xB5},{0x88,0xB7},{0x88,0xC1},{0x88,0xC5},
{0x88,0xC9},{0x88,0xE1},{0x88,0xE2},{0x88,0xE5},{0x88,0xE8},
{0x88,0xE9},{0x88,0xEB},{0x88,0xF1},{0x88,0xF3},{0x88,0xF5},
{0x88,0xF6},{0x88,0xF7},{0x88,0xF8},{0x88,0xFB},{0x88,0xFC},
{0x88,0xFD},{0x89,0x41},{0x89,0x45},{0x89,0x49},{0x89,0x51},
{0x89,0x53},{0x89,0x55},{0x89,0x56},{0x89,0x57},{0x89,0x61},
{0x89,0x62},{0x89,0x63},{0x89,0x65},{0x89,0x68},{0x89,0x69},
{0x89,0x71},{0x89,0x73},{0x89,0x75},{0x89,0x76},{0x89,0x77},
{0x89,0x7B},{0x89,0x81},{0x89,0x85},{0x89,0x89},{0x89,0x93},
{0x89,0x95},{0x89,0xA1},{0x89,0xA2},{0x89,0xA5},{0x89,0xA8},
{0x89,0xA9},{0x89,0xAB},{0x89,0xAD},{0x89,0xB0},{0x89,0xB1},
{0x89,0xB3},{0x89,0xB5},{0x89,0xB7},{0x89,0xB8},{0x89,0xC1},
{0x89,0xC2},{0x89,0xC5},{0x89,0xC9},{0x89,0xCB},{0x89,0xD1},
{0x89,0xD3},{0x89,0xD5},{0x89,0xD7},{0x89,0xE1},{0x89,0xE5},
{0x89,0xE9},{0x89,0xF3},{0x89,0xF6},{0x89,0xF7},{0x8A,0x41},
{0x8A,0x42},{0x8A,0x45},{0x8A,0x49},{0x8A,0x51},{0x8A,0x53},
{0x8A,0x55},{0x8A,0x57},{0x8A,0x61},{0x8A,0x65},{0x8A,0x69},
{0x8A,0x73},{0x8A,0x75},{0x8A,0x81},{0x8A,0x82},{0x8A,0x85},
{0x8A,0x88},{0x8A,0x89},{0x8A,0x8A},{0x8A,0x8B},{0x8A,0x90},
{0x8A,0x91},{0x8A,0x93},{0x8A,0x95},{0x8A,0x97},{0x8A,0x98},
{0x8A,0xA1},{0x8A,0xA2},{0x8A,0xA5},{0x8A,0xA9},{0x8A,0xB6},
{0x8A,0xB7},{0x8A,0xC1},{0x8A,0xD5},{0x8A,0xE1},{0x8A,0xE2},
{0x8A,0xE5},{0x8A,0xE9},{0x8A,0xF1},{0x8A,0xF3},{0x8A,0xF5},
{0x8B,0x41},{0x8B,0x45},{0x8B,0x49},{0x8B,0x61},{0x8B,0x62},
{0x8B,0x65},{0x8B,0x68},{0x8B,0x69},{0x8B,0x6A},{0x8B,0x71},
{0x8B,0x73},{0x8B,0x75},{0x8B,0x77},{0x8B,0x81},{0x8B,0xA1},
{0x8B,0xA2},{0x8B,0xA5},{0x8B,0xA8},{0x8B,0xA9},{0x8B,0xAB},
{0x8B,0xB1},{0x8B,0xB3},{0x8B,0xB5},{0x8B,0xB7},{0x8B,0xB8},
{0x8B,0xBC},{0x8C,0x61},{0x8C,0x62},{0x8C,0x63},{0x8C,0x65},
{0x8C,0x69},{0x8C,0x6B},{0x8C,0x71},{0x8C,0x73},{0x8C,0x75},
{0x8C,0x76},{0x8C,0x77},{0x8C,0x7B},{0x8C,0x81},{0x8C,0x82},
{0x8C,0x85},{0x8C,0x89},{0x8C,0x91},{0x8C,0x93},{0x8C,0x95},
{0x8C,0x96},{0x8C,0x97},{0x8C,0xA1},{0x8C,0xA2},{0x8C,0xA9},
{0x8C,0xE1},{0x8C,0xE2},{0x8C,0xE3},{0x8C,0xE5},{0x8C,0xE9},
{0x8C,0xF1},{0x8C,0xF3},{0x8C,0xF5},{0x8C,0xF6},{0x8C,0xF7},
{0x8D,0x41},{0x8D,0x42},{0x8D,0x45},{0x8D,0x51},{0x8D,0x55},
{0x8D,0x57},{0x8D,0x61},{0x8D,0x65},{0x8D,0x69},{0x8D,0x75},
{0x8D,0x76},{0x8D,0x7B},{0x8D,0x81},{0x8D,0xA1},{0x8D,0xA2},
{0x8D,0xA5},{0x8D,0xA7},{0x8D,0xA9},{0x8D,0xB1},{0x8D,0xB3},
{0x8D,0xB5},{0x8D,0xB7},{0x8D,0xB8},{0x8D,0xB9},{0x8D,0xC1},
{0x8D,0xC2},{0x8D,0xC9},{0x8D,0xD6},{0x8D,0xD7},{0x8D,0xE1},
{0x8D,0xE2},{0x8D,0xF7},{0x8E,0x41},{0x8E,0x45},{0x8E,0x49},
{0x8E,0x51},{0x8E,0x53},{0x8E,0x57},{0x8E,0x61},{0x8E,0x81},
{0x8E,0x82},{0x8E,0x85},{0x8E,0x89},{0x8E,0x90},{0x8E,0x91},
{0x8E,0x93},{0x8E,0x95},{0x8E,0x97},{0x8E,0x98},{0x8E,0xA1},
{0x8E,0xA9},{0x8E,0xB6},{0x8E,0xB7},{0x8E,0xC1},{0x8E,0xC2},
{0x8E,0xC5},{0x8E,0xC9},{0x8E,0xD1},{0x8E,0xD3},{0x8E,0xD6},
{0x8E,0xE1},{0x8E,0xE5},{0x8E,0xE9},{0x8E,0xF1},{0x8E,0xF3},
{0x8F,0x41},{0x8F,0x61},{0x8F,0x62},{0x8F,0x65},{0x8F,0x67},
{0x8F,0x69},{0x8F,0x6B},{0x8F,0x70},{0x8F,0x71},{0x8F,0x73},
{0x8F,0x75},{0x8F,0x77},{0x8F,0x7B},{0x8F,0xA1},{0x8F,0xA2},
{0x8F,0xA5},{0x8F,0xA9},{0x8F,0xB1},{0x8F,0xB3},{0x8F,0xB5},
{0x8F,0xB7},{0x90,0x61},{0x90,0x62},{0x90,0x63},{0x90,0x65},    // 나
{0x90,0x68},{0x90,0x69},{0x90,0x6A},{0x90,0x6B},{0x90,0x71},
{0x90,0x73},{0x90,0x75},{0x90,0x76},{0x90,0x77},{0x90,0x78},
{0x90,0x79},{0x90,0x7B},{0x90,0x7D},{0x90,0x81},{0x90,0x82},
{0x90,0x85},{0x90,0x89},{0x90,0x91},{0x90,0x93},{0x90,0x95},
{0x90,0x96},{0x90,0x97},{0x90,0xA1},{0x90,0xA2},{0x90,0xA5},
{0x90,0xA9},{0x90,0xB1},{0x90,0xB7},{0x90,0xE1},{0x90,0xE2},
{0x90,0xE4},{0x90,0xE5},{0x90,0xE9},{0x90,0xEB},{0x90,0xEC},
{0x90,0xF1},{0x90,0xF3},{0x90,0xF5},{0x90,0xF6},{0x90,0xF7},
{0x90,0xFD},{0x91,0x41},{0x91,0x42},{0x91,0x45},{0x91,0x49},
{0x91,0x51},{0x91,0x53},{0x91,0x55},{0x91,0x56},{0x91,0x57},
{0x91,0x61},{0x91,0x62},{0x91,0x65},{0x91,0x69},{0x91,0x71},
{0x91,0x73},{0x91,0x76},{0x91,0x77},{0x91,0x7A},{0x91,0x81},
{0x91,0x85},{0x91,0xA1},{0x91,0xA2},{0x91,0xA5},{0x91,0xA9},
{0x91,0xAB},{0x91,0xB1},{0x91,0xB3},{0x91,0xB5},{0x91,0xB7},
{0x91,0xBC},{0x91,0xBD},{0x91,0xC1},{0x91,0xC5},{0x91,0xC9},
{0x91,0xD6},{0x92,0x41},{0x92,0x45},{0x92,0x49},{0x92,0x51},
{0x92,0x53},{0x92,0x55},{0x92,0x61},{0x92,0x62},{0x92,0x65},
{0x92,0x69},{0x92,0x73},{0x92,0x75},{0x92,0x77},{0x92,0x81},
{0x92,0x82},{0x92,0x85},{0x92,0x88},{0x92,0x89},{0x92,0x91},
{0x92,0x93},{0x92,0x95},{0x92,0x97},{0x92,0xA1},{0x92,0xB6},
{0x92,0xC1},{0x92,0xE1},{0x92,0xE5},{0x92,0xE9},{0x92,0xF1},
{0x92,0xF3},{0x93,0x41},{0x93,0x42},{0x93,0x49},{0x93,0x51},
{0x93,0x53},{0x93,0x57},{0x93,0x61},{0x93,0x62},{0x93,0x65},
{0x93,0x69},{0x93,0x6A},{0x93,0x6B},{0x93,0x71},{0x93,0x73},
{0x93,0x75},{0x93,0x77},{0x93,0x78},{0x93,0x7C},{0x93,0x81},
{0x93,0x85},{0x93,0x89},{0x93,0xA1},{0x93,0xA2},{0x93,0xA5},
{0x93,0xA9},{0x93,0xAB},{0x93,0xB1},{0x93,0xB3},{0x93,0xB5},
{0x93,0xB7},{0x93,0xBC},{0x94,0x61},{0x94,0x62},{0x94,0x63},    // 다
{0x94,0x65},{0x94,0x68},{0x94,0x69},{0x94,0x6A},{0x94,0x6B},
{0x94,0x6C},{0x94,0x70},{0x94,0x71},{0x94,0x73},{0x94,0x75},
{0x94,0x76},{0x94,0x77},{0x94,0x78},{0x94,0x79},{0x94,0x7D},
{0x94,0x81},{0x94,0x82},{0x94,0x85},{0x94,0x89},{0x94,0x91},
{0x94,0x93},{0x94,0x95},{0x94,0x96},{0x94,0x97},{0x94,0xA1},
{0x94,0xE1},{0x94,0xE2},{0x94,0xE3},{0x94,0xE5},{0x94,0xE8},
{0x94,0xE9},{0x94,0xEB},{0x94,0xEC},{0x94,0xF1},{0x94,0xF3},
{0x94,0xF5},{0x94,0xF7},{0x94,0xF9},{0x94,0xFC},{0x95,0x41},
{0x95,0x42},{0x95,0x45},{0x95,0x49},{0x95,0x51},{0x95,0x53},
{0x95,0x55},{0x95,0x56},{0x95,0x57},{0x95,0x61},{0x95,0x65},
{0x95,0x69},{0x95,0x76},{0x95,0x77},{0x95,0x81},{0x95,0x85},
{0x95,0xA1},{0x95,0xA2},{0x95,0xA5},{0x95,0xA8},{0x95,0xA9},
{0x95,0xAB},{0x95,0xAD},{0x95,0xB1},{0x95,0xB3},{0x95,0xB5},
{0x95,0xB7},{0x95,0xB9},{0x95,0xBB},{0x95,0xC1},{0x95,0xC5},
{0x95,0xC9},{0x95,0xE1},{0x95,0xF6},{0x96,0x41},{0x96,0x45},
{0x96,0x49},{0x96,0x51},{0x96,0x53},{0x96,0x55},{0x96,0x61},
{0x96,0x81},{0x96,0x82},{0x96,0x85},{0x96,0x89},{0x96,0x91},
{0x96,0x93},{0x96,0x95},{0x96,0x97},{0x96,0xA1},{0x96,0xB6},
{0x96,0xC1},{0x96,0xD7},{0x96,0xE1},{0x96,0xE5},{0x96,0xE9},
{0x96,0xF3},{0x96,0xF5},{0x96,0xF7},{0x97,0x41},{0x97,0x45},
{0x97,0x49},{0x97,0x51},{0x97,0x57},{0x97,0x61},{0x97,0x62},
{0x97,0x65},{0x97,0x68},{0x97,0x69},{0x97,0x6B},{0x97,0x71},
{0x97,0x73},{0x97,0x75},{0x97,0x77},{0x97,0x81},{0x97,0xA1},
{0x97,0xA2},{0x97,0xA5},{0x97,0xA8},{0x97,0xA9},{0x97,0xB1},
{0x97,0xB3},{0x97,0xB5},{0x97,0xB6},{0x97,0xB7},{0x97,0xB8},
{0x98,0x61},{0x98,0x62},{0x98,0x65},{0x98,0x69},{0x98,0x71},
{0x98,0x73},{0x98,0x75},{0x98,0x76},{0x98,0x77},{0x98,0x7D},
{0x98,0x81},{0x98,0x82},{0x98,0x85},{0x98,0x89},{0x98,0x91},
{0x98,0x93},{0x98,0x95},{0x98,0x96},{0x98,0x97},{0x98,0xE1},
{0x98,0xE2},{0x98,0xE5},{0x98,0xE9},{0x98,0xEB},{0x98,0xEC},
{0x98,0xF1},{0x98,0xF3},{0x98,0xF5},{0x98,0xF6},{0x98,0xF7},
{0x98,0xFD},{0x99,0x41},{0x99,0x42},{0x99,0x45},{0x99,0x49},
{0x99,0x51},{0x99,0x53},{0x99,0x55},{0x99,0x56},{0x99,0x57},
{0x99,0x61},{0x99,0x76},{0x99,0xA1},{0x99,0xA2},{0x99,0xA5},
{0x99,0xA9},{0x99,0xB7},{0x99,0xC1},{0x99,0xC9},{0x99,0xE1},
{0x9A,0x41},{0x9A,0x45},{0x9A,0x81},{0x9A,0x82},{0x9A,0x85},
{0x9A,0x89},{0x9A,0x90},{0x9A,0x91},{0x9A,0x97},{0x9A,0xC1},
{0x9A,0xE1},{0x9A,0xE5},{0x9A,0xE9},{0x9A,0xF1},{0x9A,0xF3},
{0x9A,0xF7},{0x9B,0x61},{0x9B,0x62},{0x9B,0x65},{0x9B,0x68},
{0x9B,0x69},{0x9B,0x71},{0x9B,0x73},{0x9B,0x75},{0x9B,0x81},
{0x9B,0x85},{0x9B,0x89},{0x9B,0x91},{0x9B,0x93},{0x9B,0xA1},
{0x9B,0xA5},{0x9B,0xA9},{0x9B,0xB1},{0x9B,0xB3},{0x9B,0xB5},
{0x9B,0xB7},{0x9C,0x61},{0x9C,0x62},{0x9C,0x65},{0x9C,0x69},    // 라
{0x9C,0x71},{0x9C,0x73},{0x9C,0x75},{0x9C,0x76},{0x9C,0x77},
{0x9C,0x78},{0x9C,0x7C},{0x9C,0x7D},{0x9C,0x81},{0x9C,0x82},
{0x9C,0x85},{0x9C,0x89},{0x9C,0x91},{0x9C,0x93},{0x9C,0x95},
{0x9C,0x96},{0x9C,0x97},{0x9C,0xA1},{0x9C,0xA2},{0x9C,0xA5},
{0x9C,0xB5},{0x9C,0xB7},{0x9C,0xE1},{0x9C,0xE2},{0x9C,0xE5},
{0x9C,0xE9},{0x9C,0xF1},{0x9C,0xF3},{0x9C,0xF5},{0x9C,0xF6},
{0x9C,0xF7},{0x9C,0xFD},{0x9D,0x41},{0x9D,0x42},{0x9D,0x45},
{0x9D,0x49},{0x9D,0x51},{0x9D,0x53},{0x9D,0x55},{0x9D,0x57},
{0x9D,0x61},{0x9D,0x62},{0x9D,0x65},{0x9D,0x69},{0x9D,0x71},
{0x9D,0x73},{0x9D,0x75},{0x9D,0x76},{0x9D,0x77},{0x9D,0x81},
{0x9D,0x85},{0x9D,0x93},{0x9D,0x95},{0x9D,0xA1},{0x9D,0xA2},
{0x9D,0xA5},{0x9D,0xA9},{0x9D,0xB1},{0x9D,0xB3},{0x9D,0xB5},
{0x9D,0xB7},{0x9D,0xC1},{0x9D,0xC5},{0x9D,0xD7},{0x9D,0xF6},
{0x9E,0x41},{0x9E,0x45},{0x9E,0x49},{0x9E,0x51},{0x9E,0x53},
{0x9E,0x55},{0x9E,0x57},{0x9E,0x61},{0x9E,0x65},{0x9E,0x69},
{0x9E,0x73},{0x9E,0x75},{0x9E,0x77},{0x9E,0x81},{0x9E,0x82},
{0x9E,0x85},{0x9E,0x89},{0x9E,0x91},{0x9E,0x93},{0x9E,0x95},
{0x9E,0x97},{0x9E,0xA1},{0x9E,0xB6},{0x9E,0xC1},{0x9E,0xE1},
{0x9E,0xE2},{0x9E,0xE5},{0x9E,0xE9},{0x9E,0xF1},{0x9E,0xF5},
{0x9E,0xF7},{0x9F,0x41},{0x9F,0x42},{0x9F,0x45},{0x9F,0x49},
{0x9F,0x51},{0x9F,0x53},{0x9F,0x55},{0x9F,0x57},{0x9F,0x61},
{0x9F,0x62},{0x9F,0x65},{0x9F,0x69},{0x9F,0x71},{0x9F,0x73},
{0x9F,0x75},{0x9F,0x77},{0x9F,0x78},{0x9F,0x7B},{0x9F,0x7C},
{0x9F,0xA1},{0x9F,0xA2},{0x9F,0xA5},{0x9F,0xA9},{0x9F,0xB1},
{0x9F,0xB3},{0x9F,0xB5},{0x9F,0xB7},{0xA0,0x61},{0xA0,0x62},    // 마
{0xA0,0x65},{0xA0,0x67},{0xA0,0x68},{0xA0,0x69},{0xA0,0x6A},
{0xA0,0x6B},{0xA0,0x71},{0xA0,0x73},{0xA0,0x75},{0xA0,0x77},
{0xA0,0x78},{0xA0,0x7B},{0xA0,0x7D},{0xA0,0x81},{0xA0,0x82},
{0xA0,0x85},{0xA0,0x89},{0xA0,0x91},{0xA0,0x93},{0xA0,0x95},
{0xA0,0x96},{0xA0,0x97},{0xA0,0x98},{0xA0,0xA1},{0xA0,0xA2},
{0xA0,0xA9},{0xA0,0xB7},{0xA0,0xE1},{0xA0,0xE2},{0xA0,0xE5},
{0xA0,0xE9},{0xA0,0xEB},{0xA0,0xF1},{0xA0,0xF3},{0xA0,0xF5},
{0xA0,0xF7},{0xA0,0xF8},{0xA0,0xFD},{0xA1,0x41},{0xA1,0x42},
{0xA1,0x45},{0xA1,0x49},{0xA1,0x51},{0xA1,0x53},{0xA1,0x55},
{0xA1,0x56},{0xA1,0x57},{0xA1,0x61},{0xA1,0x62},{0xA1,0x65},
{0xA1,0x69},{0xA1,0x75},{0xA1,0x76},{0xA1,0x77},{0xA1,0x79},
{0xA1,0x81},{0xA1,0xA1},{0xA1,0xA2},{0xA1,0xA4},{0xA1,0xA5},
{0xA1,0xA9},{0xA1,0xAB},{0xA1,0xB1},{0xA1,0xB3},{0xA1,0xB5},
{0xA1,0xB7},{0xA1,0xC1},{0xA1,0xC5},{0xA1,0xD6},{0xA1,0xD7},
{0xA2,0x41},{0xA2,0x45},{0xA2,0x49},{0xA2,0x53},{0xA2,0x55},
{0xA2,0x57},{0xA2,0x61},{0xA2,0x65},{0xA2,0x69},{0xA2,0x73},
{0xA2,0x75},{0xA2,0x81},{0xA2,0x82},{0xA2,0x83},{0xA2,0x85},
{0xA2,0x88},{0xA2,0x89},{0xA2,0x8A},{0xA2,0x8B},{0xA2,0x91},
{0xA2,0x93},{0xA2,0x95},{0xA2,0x97},{0xA2,0x9B},{0xA2,0x9D},
{0xA2,0xA1},{0xA2,0xA5},{0xA2,0xA9},{0xA2,0xB3},{0xA2,0xB5},
{0xA2,0xC1},{0xA2,0xE1},{0xA2,0xE5},{0xA2,0xE9},{0xA3,0x41},
{0xA3,0x45},{0xA3,0x49},{0xA3,0x51},{0xA3,0x55},{0xA3,0x61},
{0xA3,0x65},{0xA3,0x69},{0xA3,0x71},{0xA3,0x75},{0xA3,0xA1},
{0xA3,0xA2},{0xA3,0xA5},{0xA3,0xA8},{0xA3,0xA9},{0xA3,0xAB},
{0xA3,0xB1},{0xA3,0xB3},{0xA3,0xB5},{0xA3,0xB6},{0xA3,0xB7},
{0xA3,0xB9},{0xA3,0xBB},{0xA4,0x61},{0xA4,0x62},{0xA4,0x63},    // 바
{0xA4,0x64},{0xA4,0x65},{0xA4,0x68},{0xA4,0x69},{0xA4,0x6A},
{0xA4,0x6B},{0xA4,0x6C},{0xA4,0x71},{0xA4,0x73},{0xA4,0x75},
{0xA4,0x77},{0xA4,0x7B},{0xA4,0x81},{0xA4,0x82},{0xA4,0x85},
{0xA4,0x89},{0xA4,0x91},{0xA4,0x93},{0xA4,0x95},{0xA4,0x96},
{0xA4,0x97},{0xA4,0x9B},{0xA4,0xA1},{0xA4,0xA2},{0xA4,0xA5},
{0xA4,0xB3},{0xA4,0xE1},{0xA4,0xE2},{0xA4,0xE5},{0xA4,0xE8},
{0xA4,0xE9},{0xA4,0xEB},{0xA4,0xF1},{0xA4,0xF3},{0xA4,0xF5},
{0xA4,0xF7},{0xA4,0xF8},{0xA5,0x41},{0xA5,0x42},{0xA5,0x45},
{0xA5,0x48},{0xA5,0x49},{0xA5,0x51},{0xA5,0x53},{0xA5,0x55},
{0xA5,0x56},{0xA5,0x57},{0xA5,0x61},{0xA5,0x62},{0xA5,0x65},
{0xA5,0x69},{0xA5,0x73},{0xA5,0x75},{0xA5,0x76},{0xA5,0x77},
{0xA5,0x7B},{0xA5,0x81},{0xA5,0x85},{0xA5,0xA1},{0xA5,0xA2},
{0xA5,0xA3},{0xA5,0xA5},{0xA5,0xA9},{0xA5,0xB1},{0xA5,0xB3},
{0xA5,0xB5},{0xA5,0xB7},{0xA5,0xC1},{0xA5,0xC5},{0xA5,0xD6},
{0xA5,0xE1},{0xA5,0xF6},{0xA6,0x41},{0xA6,0x42},{0xA6,0x45},
{0xA6,0x49},{0xA6,0x51},{0xA6,0x53},{0xA6,0x61},{0xA6,0x65},
{0xA6,0x81},{0xA6,0x82},{0xA6,0x85},{0xA6,0x88},{0xA6,0x89},
{0xA6,0x8A},{0xA6,0x8B},{0xA6,0x91},{0xA6,0x93},{0xA6,0x95},
{0xA6,0x97},{0xA6,0x9B},{0xA6,0x9C},{0xA6,0xA1},{0xA6,0xA9},
{0xA6,0xB6},{0xA6,0xC1},{0xA6,0xE1},{0xA6,0xE2},{0xA6,0xE5},
{0xA6,0xE9},{0xA6,0xF7},{0xA7,0x41},{0xA7,0x45},{0xA7,0x49},
{0xA7,0x51},{0xA7,0x55},{0xA7,0x57},{0xA7,0x61},{0xA7,0x62},
{0xA7,0x65},{0xA7,0x69},{0xA7,0x71},{0xA7,0x73},{0xA7,0x75},
{0xA7,0xA1},{0xA7,0xA2},{0xA7,0xA5},{0xA7,0xA9},{0xA7,0xAB},
{0xA7,0xB1},{0xA7,0xB3},{0xA7,0xB5},{0xA7,0xB7},{0xA7,0xB8},
{0xA7,0xB9},{0xA8,0x61},{0xA8,0x62},{0xA8,0x65},{0xA8,0x69},
{0xA8,0x6B},{0xA8,0x71},{0xA8,0x73},{0xA8,0x75},{0xA8,0x76},
{0xA8,0x77},{0xA8,0x7D},{0xA8,0x81},{0xA8,0x82},{0xA8,0x85},
{0xA8,0x89},{0xA8,0x91},{0xA8,0x93},{0xA8,0x95},{0xA8,0x96},
{0xA8,0x97},{0xA8,0xA1},{0xA8,0xA2},{0xA8,0xB1},{0xA8,0xE1},
{0xA8,0xE2},{0xA8,0xE5},{0xA8,0xE8},{0xA8,0xE9},{0xA8,0xF1},
{0xA8,0xF5},{0xA8,0xF6},{0xA8,0xF7},{0xA9,0x41},{0xA9,0x57},
{0xA9,0x61},{0xA9,0x62},{0xA9,0x71},{0xA9,0x73},{0xA9,0x75},
{0xA9,0x76},{0xA9,0x77},{0xA9,0xA1},{0xA9,0xA2},{0xA9,0xA5},
{0xA9,0xA9},{0xA9,0xB1},{0xA9,0xB3},{0xA9,0xB7},{0xAA,0x41},
{0xAA,0x61},{0xAA,0x77},{0xAA,0x81},{0xAA,0x82},{0xAA,0x85},
{0xAA,0x89},{0xAA,0x91},{0xAA,0x95},{0xAA,0x97},{0xAB,0x41},
{0xAB,0x57},{0xAB,0x61},{0xAB,0x65},{0xAB,0x69},{0xAB,0x71},
{0xAB,0x73},{0xAB,0xA1},{0xAB,0xA2},{0xAB,0xA5},{0xAB,0xA9},
{0xAB,0xB1},{0xAB,0xB3},{0xAB,0xB5},{0xAB,0xB7},{0xAC,0x61},    // 사
{0xAC,0x62},{0xAC,0x64},{0xAC,0x65},{0xAC,0x68},{0xAC,0x69},
{0xAC,0x6A},{0xAC,0x6B},{0xAC,0x71},{0xAC,0x73},{0xAC,0x75},
{0xAC,0x76},{0xAC,0x77},{0xAC,0x7B},{0xAC,0x81},{0xAC,0x82},
{0xAC,0x85},{0xAC,0x89},{0xAC,0x91},{0xAC,0x93},{0xAC,0x95},
{0xAC,0x96},{0xAC,0x97},{0xAC,0xA1},{0xAC,0xA2},{0xAC,0xA5},
{0xAC,0xA9},{0xAC,0xB1},{0xAC,0xB3},{0xAC,0xB5},{0xAC,0xB7},
{0xAC,0xC1},{0xAC,0xC5},{0xAC,0xC9},{0xAC,0xD1},{0xAC,0xD7},
{0xAC,0xE1},{0xAC,0xE2},{0xAC,0xE3},{0xAC,0xE4},{0xAC,0xE5},
{0xAC,0xE8},{0xAC,0xE9},{0xAC,0xEB},{0xAC,0xEC},{0xAC,0xF1},
{0xAC,0xF3},{0xAC,0xF5},{0xAC,0xF6},{0xAC,0xF7},{0xAC,0xFC},
{0xAD,0x41},{0xAD,0x42},{0xAD,0x45},{0xAD,0x49},{0xAD,0x51},
{0xAD,0x53},{0xAD,0x55},{0xAD,0x56},{0xAD,0x57},{0xAD,0x61},
{0xAD,0x62},{0xAD,0x65},{0xAD,0x69},{0xAD,0x71},{0xAD,0x73},
{0xAD,0x75},{0xAD,0x76},{0xAD,0x77},{0xAD,0x81},{0xAD,0x85},
{0xAD,0x89},{0xAD,0x97},{0xAD,0xA1},{0xAD,0xA2},{0xAD,0xA3},
{0xAD,0xA5},{0xAD,0xA9},{0xAD,0xAB},{0xAD,0xB1},{0xAD,0xB3},
{0xAD,0xB5},{0xAD,0xB7},{0xAD,0xBB},{0xAD,0xC1},{0xAD,0xC2},
{0xAD,0xC5},{0xAD,0xC9},{0xAD,0xD7},{0xAD,0xE1},{0xAD,0xE5},
{0xAD,0xE9},{0xAD,0xF1},{0xAD,0xF5},{0xAD,0xF6},{0xAE,0x41},
{0xAE,0x45},{0xAE,0x49},{0xAE,0x51},{0xAE,0x53},{0xAE,0x55},
{0xAE,0x61},{0xAE,0x62},{0xAE,0x65},{0xAE,0x69},{0xAE,0x71},
{0xAE,0x73},{0xAE,0x75},{0xAE,0x77},{0xAE,0x81},{0xAE,0x82},
{0xAE,0x85},{0xAE,0x88},{0xAE,0x89},{0xAE,0x91},{0xAE,0x93},
{0xAE,0x95},{0xAE,0x97},{0xAE,0x99},{0xAE,0x9B},{0xAE,0x9C},
{0xAE,0xA1},{0xAE,0xB6},{0xAE,0xC1},{0xAE,0xC2},{0xAE,0xC5},
{0xAE,0xC9},{0xAE,0xD1},{0xAE,0xD7},{0xAE,0xE1},{0xAE,0xE2},
{0xAE,0xE5},{0xAE,0xE9},{0xAE,0xF1},{0xAE,0xF3},{0xAE,0xF5},
{0xAE,0xF7},{0xAF,0x41},{0xAF,0x42},{0xAF,0x49},{0xAF,0x51},
{0xAF,0x55},{0xAF,0x57},{0xAF,0x61},{0xAF,0x62},{0xAF,0x65},
{0xAF,0x69},{0xAF,0x6A},{0xAF,0x71},{0xAF,0x73},{0xAF,0x75},
{0xAF,0x77},{0xAF,0xA1},{0xAF,0xA2},{0xAF,0xA5},{0xAF,0xA8},
{0xAF,0xA9},{0xAF,0xB0},{0xAF,0xB1},{0xAF,0xB3},{0xAF,0xB5},
{0xAF,0xB7},{0xAF,0xBC},{0xB0,0x61},{0xB0,0x62},{0xB0,0x64},
{0xB0,0x65},{0xB0,0x69},{0xB0,0x71},{0xB0,0x73},{0xB0,0x76},
{0xB0,0x77},{0xB0,0x7D},{0xB0,0x81},{0xB0,0x82},{0xB0,0x85},
{0xB0,0x89},{0xB0,0x91},{0xB0,0x93},{0xB0,0x96},{0xB0,0x97},
{0xB0,0xB7},{0xB0,0xE1},{0xB0,0xE2},{0xB0,0xE5},{0xB0,0xE9},
{0xB0,0xEB},{0xB0,0xF1},{0xB0,0xF3},{0xB0,0xF6},{0xB0,0xF7},
{0xB1,0x41},{0xB1,0x45},{0xB1,0x49},{0xB1,0x57},{0xB1,0xA1},
{0xB1,0xA2},{0xB1,0xA5},{0xB1,0xA8},{0xB1,0xA9},{0xB1,0xAB},
{0xB1,0xB1},{0xB1,0xB3},{0xB1,0xB7},{0xB1,0xC1},{0xB1,0xC2},
{0xB1,0xC5},{0xB1,0xD6},{0xB1,0xE1},{0xB1,0xF6},{0xB2,0x41},
{0xB2,0x45},{0xB2,0x49},{0xB2,0x51},{0xB2,0x53},{0xB2,0x61},
{0xB2,0x81},{0xB2,0x82},{0xB2,0x85},{0xB2,0x89},{0xB2,0x91},
{0xB2,0x93},{0xB2,0x97},{0xB2,0xA1},{0xB2,0xB6},{0xB2,0xC1},
{0xB2,0xE1},{0xB2,0xE5},{0xB3,0x57},{0xB3,0x61},{0xB3,0x62},
{0xB3,0x65},{0xB3,0x69},{0xB3,0x6B},{0xB3,0x70},{0xB3,0x71},
{0xB3,0x73},{0xB3,0x81},{0xB3,0x85},{0xB3,0x89},{0xB3,0x91},
{0xB3,0xA1},{0xB3,0xA2},{0xB3,0xA5},{0xB3,0xA9},{0xB3,0xB1},
{0xB3,0xB3},{0xB3,0xB5},{0xB3,0xB7},{0xB4,0x61},{0xB4,0x62},    // 아
{0xB4,0x65},{0xB4,0x66},{0xB4,0x67},{0xB4,0x69},{0xB4,0x6A},
{0xB4,0x6B},{0xB4,0x70},{0xB4,0x71},{0xB4,0x73},{0xB4,0x75},
{0xB4,0x76},{0xB4,0x77},{0xB4,0x7B},{0xB4,0x7C},{0xB4,0x81},
{0xB4,0x82},{0xB4,0x85},{0xB4,0x89},{0xB4,0x91},{0xB4,0x93},
{0xB4,0x95},{0xB4,0x96},{0xB4,0x97},{0xB4,0xA1},{0xB4,0xA2},
{0xB4,0xA5},{0xB4,0xA9},{0xB4,0xAC},{0xB4,0xB1},{0xB4,0xB3},
{0xB4,0xB5},{0xB4,0xB7},{0xB4,0xBB},{0xB4,0xBD},{0xB4,0xC1},
{0xB4,0xC5},{0xB4,0xC9},{0xB4,0xD3},{0xB4,0xE1},{0xB4,0xE2},
{0xB4,0xE5},{0xB4,0xE6},{0xB4,0xE8},{0xB4,0xE9},{0xB4,0xEA},
{0xB4,0xEB},{0xB4,0xF1},{0xB4,0xF3},{0xB4,0xF4},{0xB4,0xF5},
{0xB4,0xF6},{0xB4,0xF7},{0xB4,0xF8},{0xB4,0xFA},{0xB4,0xFC},
{0xB5,0x41},{0xB5,0x42},{0xB5,0x45},{0xB5,0x49},{0xB5,0x51},
{0xB5,0x53},{0xB5,0x55},{0xB5,0x57},{0xB5,0x61},{0xB5,0x62},
{0xB5,0x63},{0xB5,0x65},{0xB5,0x69},{0xB5,0x6B},{0xB5,0x6C},
{0xB5,0x71},{0xB5,0x73},{0xB5,0x74},{0xB5,0x75},{0xB5,0x76},
{0xB5,0x77},{0xB5,0x7B},{0xB5,0x7C},{0xB5,0x7D},{0xB5,0x81},
{0xB5,0x85},{0xB5,0x89},{0xB5,0x91},{0xB5,0x93},{0xB5,0x95},
{0xB5,0x96},{0xB5,0xA1},{0xB5,0xA2},{0xB5,0xA5},{0xB5,0xA9},
{0xB5,0xAA},{0xB5,0xAB},{0xB5,0xAD},{0xB5,0xB0},{0xB5,0xB1},
{0xB5,0xB3},{0xB5,0xB5},{0xB5,0xB7},{0xB5,0xB9},{0xB5,0xC1},
{0xB5,0xC2},{0xB5,0xC5},{0xB5,0xC9},{0xB5,0xD1},{0xB5,0xD3},
{0xB5,0xD5},{0xB5,0xD6},{0xB5,0xD7},{0xB5,0xE1},{0xB5,0xE2},
{0xB5,0xE5},{0xB5,0xF1},{0xB5,0xF5},{0xB5,0xF7},{0xB6,0x41},
{0xB6,0x42},{0xB6,0x45},{0xB6,0x49},{0xB6,0x51},{0xB6,0x53},
{0xB6,0x55},{0xB6,0x57},{0xB6,0x61},{0xB6,0x62},{0xB6,0x65},
{0xB6,0x69},{0xB6,0x71},{0xB6,0x73},{0xB6,0x75},{0xB6,0x77},
{0xB6,0x81},{0xB6,0x82},{0xB6,0x85},{0xB6,0x89},{0xB6,0x8A},
{0xB6,0x8B},{0xB6,0x91},{0xB6,0x93},{0xB6,0x95},{0xB6,0x97},
{0xB6,0xA1},{0xB6,0xA2},{0xB6,0xA5},{0xB6,0xA9},{0xB6,0xB1},
{0xB6,0xB3},{0xB6,0xB6},{0xB6,0xB7},{0xB6,0xC1},{0xB6,0xC2},
{0xB6,0xC5},{0xB6,0xC9},{0xB6,0xD1},{0xB6,0xD3},{0xB6,0xD7},
{0xB6,0xE1},{0xB6,0xE2},{0xB6,0xE5},{0xB6,0xE9},{0xB6,0xF1},
{0xB6,0xF3},{0xB6,0xF5},{0xB6,0xF7},{0xB7,0x41},{0xB7,0x42},
{0xB7,0x45},{0xB7,0x49},{0xB7,0x51},{0xB7,0x53},{0xB7,0x55},
{0xB7,0x57},{0xB7,0x59},{0xB7,0x61},{0xB7,0x62},{0xB7,0x65},
{0xB7,0x69},{0xB7,0x6F},{0xB7,0x71},{0xB7,0x73},{0xB7,0x75},
{0xB7,0x77},{0xB7,0x78},{0xB7,0x79},{0xB7,0x7A},{0xB7,0x7B},
{0xB7,0x7C},{0xB7,0x7D},{0xB7,0x81},{0xB7,0x85},{0xB7,0x89},
{0xB7,0x91},{0xB7,0x95},{0xB7,0xA1},{0xB7,0xA2},{0xB7,0xA5},
{0xB7,0xA9},{0xB7,0xAA},{0xB7,0xAB},{0xB7,0xB0},{0xB7,0xB1},
{0xB7,0xB3},{0xB7,0xB5},{0xB7,0xB6},{0xB7,0xB7},{0xB7,0xB8},
{0xB7,0xBC},{0xB8,0x61},{0xB8,0x62},{0xB8,0x65},{0xB8,0x67},    // 자
{0xB8,0x68},{0xB8,0x69},{0xB8,0x6B},{0xB8,0x71},{0xB8,0x73},
{0xB8,0x75},{0xB8,0x76},{0xB8,0x77},{0xB8,0x78},{0xB8,0x81},
{0xB8,0x82},{0xB8,0x85},{0xB8,0x89},{0xB8,0x91},{0xB8,0x93},
{0xB8,0x95},{0xB8,0x96},{0xB8,0x97},{0xB8,0xA1},{0xB8,0xA2},
{0xB8,0xA5},{0xB8,0xA7},{0xB8,0xA9},{0xB8,0xB1},{0xB8,0xB7},
{0xB8,0xC1},{0xB8,0xC5},{0xB8,0xC9},{0xB8,0xE1},{0xB8,0xE2},
{0xB8,0xE5},{0xB8,0xE9},{0xB8,0xEB},{0xB8,0xF1},{0xB8,0xF3},
{0xB8,0xF5},{0xB8,0xF7},{0xB8,0xF8},{0xB9,0x41},{0xB9,0x42},
{0xB9,0x45},{0xB9,0x49},{0xB9,0x51},{0xB9,0x53},{0xB9,0x55},
{0xB9,0x57},{0xB9,0x61},{0xB9,0x65},{0xB9,0x69},{0xB9,0x71},
{0xB9,0x73},{0xB9,0x76},{0xB9,0x77},{0xB9,0x81},{0xB9,0xA1},
{0xB9,0xA2},{0xB9,0xA5},{0xB9,0xA9},{0xB9,0xAB},{0xB9,0xB1},
{0xB9,0xB3},{0xB9,0xB5},{0xB9,0xB7},{0xB9,0xB8},{0xB9,0xB9},
{0xB9,0xBD},{0xB9,0xC1},{0xB9,0xC2},{0xB9,0xC9},{0xB9,0xD3},
{0xB9,0xD5},{0xB9,0xD7},{0xB9,0xE1},{0xB9,0xF6},{0xB9,0xF7},
{0xBA,0x41},{0xBA,0x45},{0xBA,0x49},{0xBA,0x51},{0xBA,0x53},
{0xBA,0x55},{0xBA,0x57},{0xBA,0x61},{0xBA,0x62},{0xBA,0x65},
{0xBA,0x77},{0xBA,0x81},{0xBA,0x82},{0xBA,0x85},{0xBA,0x89},
{0xBA,0x8A},{0xBA,0x8B},{0xBA,0x91},{0xBA,0x93},{0xBA,0x95},
{0xBA,0x97},{0xBA,0xA1},{0xBA,0xB6},{0xBA,0xC1},{0xBA,0xE1},
{0xBA,0xE2},{0xBA,0xE5},{0xBA,0xE9},{0xBA,0xF1},{0xBA,0xF3},
{0xBA,0xF5},{0xBB,0x41},{0xBB,0x45},{0xBB,0x49},{0xBB,0x51},
{0xBB,0x61},{0xBB,0x62},{0xBB,0x65},{0xBB,0x69},{0xBB,0x71},
{0xBB,0x73},{0xBB,0x75},{0xBB,0x77},{0xBB,0xA1},{0xBB,0xA2},
{0xBB,0xA5},{0xBB,0xA8},{0xBB,0xA9},{0xBB,0xAB},{0xBB,0xB1},
{0xBB,0xB3},{0xBB,0xB5},{0xBB,0xB7},{0xBB,0xB8},{0xBB,0xBB},
{0xBB,0xBC},{0xBC,0x61},{0xBC,0x62},{0xBC,0x65},{0xBC,0x67},
{0xBC,0x69},{0xBC,0x6C},{0xBC,0x71},{0xBC,0x73},{0xBC,0x75},
{0xBC,0x76},{0xBC,0x77},{0xBC,0x81},{0xBC,0x82},{0xBC,0x85},
{0xBC,0x89},{0xBC,0x91},{0xBC,0x93},{0xBC,0x95},{0xBC,0x96},
{0xBC,0x97},{0xBC,0xA1},{0xBC,0xA5},{0xBC,0xB7},{0xBC,0xE1},
{0xBC,0xE2},{0xBC,0xE5},{0xBC,0xE9},{0xBC,0xF1},{0xBC,0xF3},
{0xBC,0xF5},{0xBC,0xF6},{0xBC,0xF7},{0xBD,0x41},{0xBD,0x57},
{0xBD,0x61},{0xBD,0x76},{0xBD,0xA1},{0xBD,0xA2},{0xBD,0xA5},
{0xBD,0xA9},{0xBD,0xB1},{0xBD,0xB3},{0xBD,0xB5},{0xBD,0xB7},
{0xBD,0xB9},{0xBD,0xC1},{0xBD,0xC2},{0xBD,0xC9},{0xBD,0xD6},
{0xBD,0xE1},{0xBD,0xF6},{0xBE,0x41},{0xBE,0x45},{0xBE,0x49},
{0xBE,0x51},{0xBE,0x53},{0xBE,0x77},{0xBE,0x81},{0xBE,0x82},
{0xBE,0x85},{0xBE,0x89},{0xBE,0x91},{0xBE,0x93},{0xBE,0x97},
{0xBE,0xA1},{0xBE,0xB6},{0xBE,0xB7},{0xBE,0xE1},{0xBF,0x41},
{0xBF,0x61},{0xBF,0x71},{0xBF,0x75},{0xBF,0x77},{0xBF,0xA1},
{0xBF,0xA2},{0xBF,0xA5},{0xBF,0xA9},{0xBF,0xB1},{0xBF,0xB3},
{0xBF,0xB7},{0xBF,0xB8},{0xBF,0xBD},{0xC0,0x61},{0xC0,0x62},    // 차
{0xC0,0x65},{0xC0,0x67},{0xC0,0x69},{0xC0,0x71},{0xC0,0x73},
{0xC0,0x75},{0xC0,0x76},{0xC0,0x77},{0xC0,0x78},{0xC0,0x81},
{0xC0,0x82},{0xC0,0x85},{0xC0,0x89},{0xC0,0x91},{0xC0,0x93},
{0xC0,0x95},{0xC0,0x96},{0xC0,0x97},{0xC0,0xA1},{0xC0,0xA5},
{0xC0,0xA7},{0xC0,0xA9},{0xC0,0xB1},{0xC0,0xB7},{0xC0,0xE1},
{0xC0,0xE2},{0xC0,0xE5},{0xC0,0xE9},{0xC0,0xF1},{0xC0,0xF3},
{0xC0,0xF5},{0xC0,0xF6},{0xC0,0xF7},{0xC1,0x41},{0xC1,0x42},
{0xC1,0x45},{0xC1,0x49},{0xC1,0x51},{0xC1,0x53},{0xC1,0x55},
{0xC1,0x57},{0xC1,0x61},{0xC1,0x65},{0xC1,0x76},{0xC1,0x81},
{0xC1,0x85},{0xC1,0x97},{0xC1,0xA1},{0xC1,0xA2},{0xC1,0xA5},
{0xC1,0xA9},{0xC1,0xB1},{0xC1,0xB3},{0xC1,0xB5},{0xC1,0xB7},
{0xC1,0xC1},{0xC1,0xC5},{0xC1,0xC9},{0xC1,0xD7},{0xC2,0x41},
{0xC2,0x45},{0xC2,0x49},{0xC2,0x51},{0xC2,0x53},{0xC2,0x55},
{0xC2,0x57},{0xC2,0x61},{0xC2,0x71},{0xC2,0x81},{0xC2,0x82},
{0xC2,0x85},{0xC2,0x89},{0xC2,0x91},{0xC2,0x93},{0xC2,0x95},
{0xC2,0x97},{0xC2,0xA1},{0xC2,0xB6},{0xC2,0xC1},{0xC2,0xC5},
{0xC2,0xE1},{0xC2,0xE5},{0xC2,0xE9},{0xC2,0xF1},{0xC2,0xF3},
{0xC2,0xF5},{0xC2,0xF7},{0xC3,0x41},{0xC3,0x45},{0xC3,0x49},
{0xC3,0x51},{0xC3,0x57},{0xC3,0x61},{0xC3,0x62},{0xC3,0x65},
{0xC3,0x69},{0xC3,0x71},{0xC3,0x73},{0xC3,0x75},{0xC3,0x77},
{0xC3,0xA1},{0xC3,0xA2},{0xC3,0xA5},{0xC3,0xA8},{0xC3,0xA9},
{0xC3,0xAA},{0xC3,0xB1},{0xC3,0xB3},{0xC3,0xB5},{0xC3,0xB7},
{0xC4,0x61},{0xC4,0x62},{0xC4,0x65},{0xC4,0x69},{0xC4,0x71},    // 카
{0xC4,0x73},{0xC4,0x75},{0xC4,0x77},{0xC4,0x81},{0xC4,0x82},
{0xC4,0x85},{0xC4,0x89},{0xC4,0x91},{0xC4,0x93},{0xC4,0x95},
{0xC4,0x96},{0xC4,0x97},{0xC4,0xA1},{0xC4,0xA2},{0xC4,0xB7},
{0xC4,0xE1},{0xC4,0xE2},{0xC4,0xE5},{0xC4,0xE8},{0xC4,0xE9},
{0xC4,0xF1},{0xC4,0xF3},{0xC4,0xF5},{0xC4,0xF6},{0xC4,0xF7},
{0xC5,0x41},{0xC5,0x42},{0xC5,0x45},{0xC5,0x49},{0xC5,0x51},
{0xC5,0x53},{0xC5,0x55},{0xC5,0x57},{0xC5,0x61},{0xC5,0x65},
{0xC5,0x69},{0xC5,0x71},{0xC5,0x73},{0xC5,0x75},{0xC5,0x76},
{0xC5,0x77},{0xC5,0x81},{0xC5,0xA1},{0xC5,0xA2},{0xC5,0xA5},
{0xC5,0xA9},{0xC5,0xB1},{0xC5,0xB3},{0xC5,0xB5},{0xC5,0xB7},
{0xC5,0xC1},{0xC5,0xC2},{0xC5,0xC5},{0xC5,0xC9},{0xC5,0xD1},
{0xC5,0xD7},{0xC5,0xE1},{0xC5,0xF7},{0xC6,0x41},{0xC6,0x49},
{0xC6,0x61},{0xC6,0x81},{0xC6,0x82},{0xC6,0x85},{0xC6,0x89},
{0xC6,0x91},{0xC6,0x93},{0xC6,0x95},{0xC6,0x97},{0xC6,0xA1},
{0xC6,0xA5},{0xC6,0xA9},{0xC6,0xB7},{0xC6,0xC1},{0xC6,0xD7},
{0xC6,0xE1},{0xC6,0xE2},{0xC6,0xE5},{0xC6,0xE9},{0xC6,0xF1},
{0xC6,0xF3},{0xC6,0xF5},{0xC6,0xF7},{0xC7,0x41},{0xC7,0x45},
{0xC7,0x49},{0xC7,0x51},{0xC7,0x61},{0xC7,0x62},{0xC7,0x65},
{0xC7,0x69},{0xC7,0x71},{0xC7,0x73},{0xC7,0x77},{0xC7,0xA1},
{0xC7,0xA2},{0xC7,0xA5},{0xC7,0xA9},{0xC7,0xB1},{0xC7,0xB3},
{0xC7,0xB5},{0xC7,0xB7},{0xC8,0x61},{0xC8,0x62},{0xC8,0x65},    // 타
{0xC8,0x69},{0xC8,0x6A},{0xC8,0x71},{0xC8,0x73},{0xC8,0x75},
{0xC8,0x76},{0xC8,0x77},{0xC8,0x81},{0xC8,0x82},{0xC8,0x85},
{0xC8,0x89},{0xC8,0x91},{0xC8,0x93},{0xC8,0x95},{0xC8,0x96},
{0xC8,0x97},{0xC8,0xA1},{0xC8,0xB7},{0xC8,0xE1},{0xC8,0xE2},
{0xC8,0xE5},{0xC8,0xE9},{0xC8,0xEB},{0xC8,0xF1},{0xC8,0xF3},
{0xC8,0xF5},{0xC8,0xF6},{0xC8,0xF7},{0xC9,0x41},{0xC9,0x42},
{0xC9,0x45},{0xC9,0x49},{0xC9,0x51},{0xC9,0x53},{0xC9,0x55},
{0xC9,0x57},{0xC9,0x61},{0xC9,0x65},{0xC9,0x76},{0xC9,0x81},
{0xC9,0x85},{0xC9,0xA1},{0xC9,0xA2},{0xC9,0xA5},{0xC9,0xA9},
{0xC9,0xB1},{0xC9,0xB3},{0xC9,0xB5},{0xC9,0xB7},{0xC9,0xBC},
{0xC9,0xC1},{0xC9,0xC5},{0xC9,0xE1},{0xCA,0x41},{0xCA,0x45},
{0xCA,0x55},{0xCA,0x57},{0xCA,0x61},{0xCA,0x81},{0xCA,0x82},
{0xCA,0x85},{0xCA,0x89},{0xCA,0x91},{0xCA,0x93},{0xCA,0x95},
{0xCA,0x97},{0xCA,0xA1},{0xCA,0xB6},{0xCA,0xC1},{0xCA,0xE1},
{0xCA,0xE2},{0xCA,0xE5},{0xCA,0xE9},{0xCA,0xF1},{0xCA,0xF3},
{0xCA,0xF7},{0xCB,0x41},{0xCB,0x45},{0xCB,0x49},{0xCB,0x51},
{0xCB,0x57},{0xCB,0x61},{0xCB,0x62},{0xCB,0x65},{0xCB,0x68},
{0xCB,0x69},{0xCB,0x6B},{0xCB,0x71},{0xCB,0x73},{0xCB,0x75},
{0xCB,0x81},{0xCB,0x85},{0xCB,0x89},{0xCB,0x91},{0xCB,0x93},
{0xCB,0xA1},{0xCB,0xA2},{0xCB,0xA5},{0xCB,0xA9},{0xCB,0xB1},
{0xCB,0xB3},{0xCB,0xB5},{0xCB,0xB7},{0xCC,0x61},{0xCC,0x62},    // 파
{0xCC,0x63},{0xCC,0x65},{0xCC,0x69},{0xCC,0x6B},{0xCC,0x71},
{0xCC,0x73},{0xCC,0x75},{0xCC,0x76},{0xCC,0x77},{0xCC,0x7B},
{0xCC,0x81},{0xCC,0x82},{0xCC,0x85},{0xCC,0x89},{0xCC,0x91},
{0xCC,0x93},{0xCC,0x95},{0xCC,0x96},{0xCC,0x97},{0xCC,0xA1},
{0xCC,0xA2},{0xCC,0xE1},{0xCC,0xE2},{0xCC,0xE5},{0xCC,0xE9},
{0xCC,0xF1},{0xCC,0xF3},{0xCC,0xF5},{0xCC,0xF6},{0xCC,0xF7},
{0xCD,0x41},{0xCD,0x42},{0xCD,0x45},{0xCD,0x49},{0xCD,0x51},
{0xCD,0x53},{0xCD,0x55},{0xCD,0x57},{0xCD,0x61},{0xCD,0x65},
{0xCD,0x69},{0xCD,0x71},{0xCD,0x73},{0xCD,0x76},{0xCD,0x77},
{0xCD,0x81},{0xCD,0x89},{0xCD,0x93},{0xCD,0x95},{0xCD,0xA1},
{0xCD,0xA2},{0xCD,0xA5},{0xCD,0xA9},{0xCD,0xB1},{0xCD,0xB3},
{0xCD,0xB5},{0xCD,0xB7},{0xCD,0xC1},{0xCD,0xD7},{0xCE,0x41},
{0xCE,0x45},{0xCE,0x61},{0xCE,0x65},{0xCE,0x69},{0xCE,0x73},
{0xCE,0x75},{0xCE,0x81},{0xCE,0x82},{0xCE,0x85},{0xCE,0x88},
{0xCE,0x89},{0xCE,0x8B},{0xCE,0x91},{0xCE,0x93},{0xCE,0x95},
{0xCE,0x97},{0xCE,0xA1},{0xCE,0xB7},{0xCE,0xE1},{0xCE,0xE5},
{0xCE,0xE9},{0xCE,0xF1},{0xCE,0xF5},{0xCF,0x41},{0xCF,0x45},
{0xCF,0x49},{0xCF,0x51},{0xCF,0x55},{0xCF,0x57},{0xCF,0x61},
{0xCF,0x65},{0xCF,0x69},{0xCF,0x71},{0xCF,0x73},{0xCF,0x75},
{0xCF,0xA1},{0xCF,0xA2},{0xCF,0xA5},{0xCF,0xA9},{0xCF,0xB1},
{0xCF,0xB3},{0xCF,0xB5},{0xCF,0xB7},{0xD0,0x61},{0xD0,0x62},    // 하
{0xD0,0x65},{0xD0,0x69},{0xD0,0x6E},{0xD0,0x71},{0xD0,0x73},
{0xD0,0x75},{0xD0,0x77},{0xD0,0x81},{0xD0,0x82},{0xD0,0x85},
{0xD0,0x89},{0xD0,0x91},{0xD0,0x93},{0xD0,0x95},{0xD0,0x96},
{0xD0,0x97},{0xD0,0xA1},{0xD0,0xB7},{0xD0,0xE1},{0xD0,0xE2},
{0xD0,0xE5},{0xD0,0xE9},{0xD0,0xEB},{0xD0,0xF1},{0xD0,0xF3},
{0xD0,0xF5},{0xD0,0xF7},{0xD1,0x41},{0xD1,0x42},{0xD1,0x45},
{0xD1,0x49},{0xD1,0x51},{0xD1,0x53},{0xD1,0x55},{0xD1,0x57},
{0xD1,0x61},{0xD1,0x62},{0xD1,0x65},{0xD1,0x69},{0xD1,0x71},
{0xD1,0x73},{0xD1,0x75},{0xD1,0x76},{0xD1,0x77},{0xD1,0x81},
{0xD1,0x85},{0xD1,0x89},{0xD1,0x93},{0xD1,0xA1},{0xD1,0xA2},
{0xD1,0xA5},{0xD1,0xA9},{0xD1,0xAE},{0xD1,0xB1},{0xD1,0xB3},
{0xD1,0xB5},{0xD1,0xB7},{0xD1,0xBB},{0xD1,0xC1},{0xD1,0xC2},
{0xD1,0xC5},{0xD1,0xC9},{0xD1,0xD5},{0xD1,0xD7},{0xD1,0xE1},
{0xD1,0xE2},{0xD1,0xE5},{0xD1,0xF5},{0xD1,0xF7},{0xD2,0x41},
{0xD2,0x42},{0xD2,0x45},{0xD2,0x49},{0xD2,0x53},{0xD2,0x55},
{0xD2,0x57},{0xD2,0x61},{0xD2,0x65},{0xD2,0x69},{0xD2,0x73},
{0xD2,0x75},{0xD2,0x81},{0xD2,0x82},{0xD2,0x85},{0xD2,0x89},
{0xD2,0x8E},{0xD2,0x91},{0xD2,0x95},{0xD2,0x97},{0xD2,0xA1},
{0xD2,0xA5},{0xD2,0xA9},{0xD2,0xB1},{0xD2,0xB7},{0xD2,0xC1},
{0xD2,0xC2},{0xD2,0xC5},{0xD2,0xC9},{0xD2,0xD7},{0xD2,0xE1},
{0xD2,0xE2},{0xD2,0xE5},{0xD2,0xE9},{0xD2,0xF1},{0xD2,0xF3},
{0xD2,0xF5},{0xD2,0xF7},{0xD3,0x41},{0xD3,0x42},{0xD3,0x45},
{0xD3,0x49},{0xD3,0x51},{0xD3,0x55},{0xD3,0x57},{0xD3,0x61},
{0xD3,0x62},{0xD3,0x65},{0xD3,0x67},{0xD3,0x68},{0xD3,0x69},
{0xD3,0x6A},{0xD3,0x71},{0xD3,0x73},{0xD3,0x75},{0xD3,0x77},
{0xD3,0x7B},{0xD3,0x81},{0xD3,0x85},{0xD3,0x89},{0xD3,0x91},
{0xD3,0x93},{0xD3,0x97},{0xD3,0xA1},{0xD3,0xA2},{0xD3,0xA5},
{0xD3,0xA9},{0xD3,0xB1},{0xD3,0xB3},{0xD3,0xB5},{0xD3,0xB7} };

/* ---------------------------------------------------------------------------- */
/*		8x16 영문 명조체 폰트						*/
/* ---------------------------------------------------------------------------- */
const unsigned char E_font[128][16] = {		/* 8x16 English ASCII character font */
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // 0x00
  {0xF0,0x08,0x28,0x08,0x08,0x28,0x08,0xF0,0x07,0x08,0x09,0x0B,0x0B,0x09,0x08,0x07}, // 0x01
  {0xF0,0xF8,0xD8,0xF8,0xF8,0xD8,0xF8,0xF0,0x07,0x0F,0x0E,0x0C,0x0C,0x0E,0x0F,0x07}, // 0x02
  {0x00,0xF0,0xF8,0xF8,0xF0,0xF8,0xF8,0xF0,0x00,0x00,0x03,0x07,0x0F,0x07,0x03,0x00}, // 0x03
  {0x00,0x80,0xC0,0xE0,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x01,0x03,0x07,0x03,0x01,0x00}, // 0x04
  {0x00,0xC0,0xC0,0xF8,0xF8,0xF8,0xC0,0xC0,0x00,0x03,0x0B,0x09,0x0F,0x09,0x0B,0x03}, // 0x05
  {0x00,0xC0,0xE0,0xF0,0xF8,0xF0,0xE0,0xC0,0x00,0x01,0x0B,0x0B,0x0F,0x0B,0x0B,0x01}, // 0x06
  {0x00,0x00,0x80,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x01,0x03,0x03,0x01,0x00,0x00}, // 0x07
  {0xFE,0xFE,0x7E,0x3E,0x3E,0x7E,0xFE,0xFE,0x7F,0x7F,0x7E,0x7C,0x7C,0x7E,0x7F,0x7F}, // 0x08
  {0x00,0xC0,0x60,0x20,0x20,0x60,0xC0,0x00,0x00,0x03,0x06,0x04,0x04,0x06,0x03,0x00}, // 0x09
  {0xFE,0x3E,0x9E,0xDE,0xDE,0x9E,0x3E,0xFE,0x7F,0x7C,0x79,0x7B,0x7B,0x79,0x7C,0x7F}, // 0x0A
  {0x00,0x00,0x80,0xC0,0xE8,0xB8,0x18,0x78,0x00,0x07,0x0F,0x08,0x08,0x0F,0x07,0x00}, // 0x0B
  {0x00,0x70,0xF8,0x88,0x88,0xF8,0x70,0x00,0x00,0x02,0x02,0x0F,0x0F,0x02,0x02,0x00}, // 0x0C
  {0x00,0x00,0x00,0xF8,0xF8,0x30,0x60,0xC0,0x00,0x06,0x0F,0x0F,0x07,0x00,0x00,0x00}, // 0x0D
  {0x00,0x00,0xF8,0xF8,0x28,0x28,0xF8,0xF8,0x00,0x07,0x07,0x03,0x00,0x0E,0x0F,0x07}, // 0x0E
  {0x00,0x10,0xC0,0xE0,0x28,0xE0,0xC0,0x10,0x00,0x04,0x01,0x03,0x0A,0x03,0x01,0x04}, // 0x0F
  {0x00,0xF8,0xF0,0xE0,0xC0,0xC0,0x80,0x80,0x00,0x0F,0x07,0x03,0x01,0x01,0x00,0x00}, // 0x10
  {0x00,0x80,0x80,0xC0,0xC0,0xE0,0xF0,0xF8,0x00,0x00,0x00,0x01,0x01,0x03,0x07,0x0F}, // 0x11
  {0x00,0x20,0x30,0xF8,0xF8,0x30,0x20,0x00,0x00,0x02,0x06,0x0F,0x0F,0x06,0x02,0x00}, // 0x12
  {0x00,0x70,0xF8,0xF8,0x00,0xF8,0xF8,0x70,0x00,0x00,0x0D,0x0D,0x00,0x0D,0x0D,0x00}, // 0x13
  {0x70,0xF8,0x88,0xF8,0xF8,0x08,0xF8,0xF8,0x00,0x00,0x00,0x0F,0x0F,0x00,0x0F,0x0F}, // 0x14
  {0x00,0xD8,0xFC,0x24,0x64,0xCC,0x88,0x00,0x00,0x08,0x19,0x13,0x12,0x1F,0x0D,0x00}, // 0x15
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F}, // 0x16
  {0x00,0x20,0x30,0xF8,0xF8,0x30,0x20,0x00,0x00,0x12,0x16,0x1F,0x1F,0x16,0x12,0x00}, // 0x17
  {0x00,0x20,0x30,0xF8,0xF8,0x30,0x20,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00}, // 0x18
  {0x00,0x00,0x00,0xF8,0xF8,0x00,0x00,0x00,0x00,0x02,0x06,0x0F,0x0F,0x06,0x02,0x00}, // 0x19
  {0x00,0x80,0x80,0x80,0x80,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0x01,0x00}, // 0x1A
  {0x00,0x80,0xC0,0xE0,0x80,0x80,0x80,0x80,0x00,0x00,0x01,0x03,0x00,0x00,0x00,0x00}, // 0x1B
  {0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x02,0x02,0x02,0x02,0x02}, // 0x1C
  {0x80,0xC0,0xE0,0x80,0x80,0xE0,0xC0,0x80,0x00,0x01,0x03,0x00,0x00,0x03,0x01,0x00}, // 0x1D
  {0x00,0x00,0x00,0xC0,0xF8,0xC0,0x00,0x00,0x00,0x0C,0x0F,0x0F,0x0F,0x0F,0x0F,0x0C}, // 0x1E
  {0x00,0x18,0x78,0xF8,0xF8,0xF8,0x78,0x18,0x00,0x00,0x00,0x01,0x0F,0x01,0x00,0x00}, // 0x1F
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // space
  {0x00,0x00,0x70,0xF8,0xF8,0x70,0x00,0x00,0x00,0x00,0x00,0x0D,0x0D,0x00,0x00,0x00}, // !
  {0x00,0x20,0x38,0x18,0x20,0x38,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // "
  {0x00,0x20,0xF8,0xF8,0x20,0xF8,0xF8,0x20,0x00,0x02,0x0F,0x0F,0x02,0x0F,0x0F,0x02}, // #
  {0x00,0x60,0xF0,0x9C,0x9C,0xB0,0x20,0x00,0x00,0x02,0x06,0x1C,0x1C,0x07,0x03,0x00}, // $
  {0x00,0x20,0x70,0x70,0xA0,0xC0,0x60,0x20,0x00,0x04,0x06,0x03,0x05,0x0E,0x0E,0x04}, // %
  {0x00,0x00,0xB0,0xF8,0xC8,0x78,0xB0,0x80,0x00,0x07,0x0F,0x08,0x09,0x07,0x0F,0x08}, // &
  {0x00,0x00,0x20,0x38,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // '
  {0x00,0x00,0xE0,0xF0,0x18,0x08,0x00,0x00,0x00,0x00,0x03,0x07,0x0C,0x08,0x00,0x00}, // (
  {0x00,0x00,0x08,0x18,0xF0,0xE0,0x00,0x00,0x00,0x00,0x08,0x0C,0x07,0x03,0x00,0x00}, // )
  {0x00,0x80,0xA0,0xE0,0xC0,0xE0,0xA0,0x80,0x00,0x00,0x02,0x03,0x01,0x03,0x02,0x00}, // *
  {0x00,0x80,0x80,0xE0,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x00}, // +
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x1C,0x0C,0x00,0x00,0x00}, // ,
  {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // -
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x00}, // .
  {0x00,0x00,0x00,0x00,0x80,0xC0,0x60,0x30,0x00,0x0C,0x06,0x03,0x01,0x00,0x00,0x00}, // /
  {0x00,0xF0,0xF8,0x08,0x08,0xF8,0xF0,0x00,0x00,0x07,0x0F,0x08,0x08,0x0F,0x07,0x00}, // 0
  {0x00,0x00,0x10,0xF8,0xF8,0x00,0x00,0x00,0x00,0x00,0x08,0x0F,0x0F,0x08,0x00,0x00}, // 1
  {0x00,0x10,0x18,0x08,0x88,0xF8,0x70,0x00,0x00,0x0C,0x0E,0x0B,0x09,0x08,0x08,0x00}, // 2
  {0x00,0x08,0x08,0x48,0xE8,0xB8,0x18,0x00,0x00,0x04,0x0C,0x08,0x08,0x0F,0x07,0x00}, // 3
  {0x00,0xC0,0xE0,0x30,0xF8,0xF8,0x00,0x00,0x00,0x03,0x03,0x02,0x0F,0x0F,0x02,0x00}, // 4
  {0x00,0x78,0x78,0x48,0x48,0xC8,0x88,0x00,0x00,0x04,0x0C,0x08,0x08,0x0F,0x07,0x00}, // 5
  {0x00,0xE0,0xF0,0x98,0x88,0x88,0x00,0x00,0x00,0x07,0x0F,0x08,0x08,0x0F,0x07,0x00}, // 6
  {0x00,0x08,0x08,0x88,0xC8,0x78,0x38,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00}, // 7
  {0x00,0x70,0xF8,0x88,0x88,0xF8,0x70,0x00,0x00,0x07,0x0F,0x08,0x08,0x0F,0x07,0x00}, // 8
  {0x00,0x70,0xF8,0x88,0x88,0xF8,0xF0,0x00,0x00,0x00,0x08,0x08,0x0C,0x07,0x03,0x00}, // 9
  {0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00,0x00,0x00}, // :
  {0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x08,0x0E,0x06,0x00,0x00,0x00}, // ;
  {0x00,0x80,0xC0,0x60,0x30,0x18,0x08,0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x08,0x00}, // <
  {0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x00}, // =
  {0x00,0x08,0x18,0x30,0x60,0xC0,0x80,0x00,0x00,0x08,0x0C,0x06,0x03,0x01,0x00,0x00}, // >
  {0x00,0x10,0x18,0x88,0xC8,0x78,0x30,0x00,0x00,0x00,0x00,0x0D,0x0D,0x00,0x00,0x00}, // ?
  {0x00,0xF0,0xF8,0x08,0xC8,0xF8,0xF0,0x00,0x00,0x07,0x0F,0x08,0x0B,0x0B,0x01,0x00}, // @
  {0x00,0xE0,0xF0,0x18,0x18,0xF0,0xE0,0x00,0x00,0x0F,0x0F,0x01,0x01,0x0F,0x0F,0x00}, // A
  {0x00,0xF8,0xF8,0x88,0x88,0xF8,0x70,0x00,0x00,0x0F,0x0F,0x08,0x08,0x0F,0x07,0x00}, // B
  {0x00,0xF0,0xF8,0x08,0x08,0x18,0x10,0x00,0x00,0x07,0x0F,0x08,0x08,0x0C,0x04,0x00}, // C
  {0x00,0xF8,0xF8,0x08,0x08,0xF8,0xF0,0x00,0x00,0x0F,0x0F,0x08,0x08,0x0F,0x07,0x00}, // D
  {0x00,0xF8,0xF8,0x88,0x88,0x88,0x08,0x00,0x00,0x0F,0x0F,0x08,0x08,0x08,0x08,0x00}, // E
  {0x00,0xF8,0xF8,0x88,0x88,0x88,0x08,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00}, // F
  {0x00,0xF0,0xF8,0x08,0x08,0x08,0x08,0x00,0x00,0x07,0x0F,0x08,0x09,0x0F,0x0F,0x00}, // G
  {0x00,0xF8,0xF8,0x80,0x80,0xF8,0xF8,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00}, // H
  {0x00,0x00,0x08,0xF8,0xF8,0x08,0x00,0x00,0x00,0x00,0x08,0x0F,0x0F,0x08,0x00,0x00}, // I
  {0x00,0x00,0x00,0x00,0x00,0xF8,0xF8,0x00,0x00,0x04,0x0C,0x08,0x08,0x0F,0x07,0x00}, // J
  {0x00,0xF8,0xF8,0x80,0xE0,0x78,0x18,0x00,0x00,0x0F,0x0F,0x00,0x03,0x0F,0x0C,0x00}, // K
  {0x00,0xF8,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x08,0x08,0x08,0x08,0x00}, // L
  {0x00,0xF8,0xF8,0x30,0xE0,0x30,0xF8,0xF8,0x00,0x0F,0x0F,0x00,0x00,0x00,0x0F,0x0F}, // M
  {0x00,0xF8,0xF8,0xE0,0x80,0xF8,0xF8,0x00,0x00,0x0F,0x0F,0x00,0x03,0x0F,0x0F,0x00}, // N
  {0x00,0xF0,0xF8,0x08,0x08,0xF8,0xF0,0x00,0x00,0x07,0x0F,0x08,0x08,0x0F,0x07,0x00}, // O
  {0x00,0xF8,0xF8,0x88,0x88,0xF8,0x70,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00}, // P
  {0x00,0xF0,0xF8,0x08,0x08,0xF8,0xF0,0x00,0x00,0x07,0x0F,0x08,0x08,0x1F,0x17,0x00}, // Q
  {0x00,0xF8,0xF8,0x88,0x88,0xF8,0x70,0x00,0x00,0x0F,0x0F,0x01,0x03,0x0E,0x0C,0x00}, // R
  {0x00,0x70,0xF8,0x88,0x88,0x98,0x10,0x00,0x00,0x04,0x0C,0x08,0x08,0x0F,0x07,0x00}, // S
  {0x00,0x08,0x08,0xF8,0xF8,0x08,0x08,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00}, // T
  {0x00,0xF8,0xF8,0x00,0x00,0xF8,0xF8,0x00,0x00,0x07,0x0F,0x08,0x08,0x0F,0x07,0x00}, // U
  {0x00,0xF8,0xF8,0x00,0x00,0xF8,0xF8,0x00,0x00,0x03,0x07,0x0C,0x0C,0x07,0x03,0x00}, // V
  {0x00,0xF8,0xF8,0x00,0x80,0x00,0xF8,0xF8,0x00,0x0F,0x0F,0x06,0x03,0x06,0x0F,0x0F}, // W
  {0x00,0x38,0x78,0xC0,0xC0,0x78,0x38,0x00,0x00,0x0E,0x0F,0x01,0x01,0x0F,0x0E,0x00}, // X
  {0x00,0x78,0xF8,0x80,0x80,0xF8,0x78,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00}, // Y
  {0x00,0x08,0x08,0x88,0xC8,0x78,0x38,0x00,0x00,0x0E,0x0F,0x09,0x08,0x08,0x08,0x00}, // Z
  {0x00,0x00,0xF8,0xF8,0x08,0x08,0x00,0x00,0x00,0x00,0x0F,0x0F,0x08,0x08,0x00,0x00}, // [
  {0x00,0x30,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x06,0x0C}, /* \ */
  {0x00,0x00,0x08,0x08,0xF8,0xF8,0x00,0x00,0x00,0x00,0x08,0x08,0x0F,0x0F,0x00,0x00}, // ]
  {0x00,0x10,0x18,0x0C,0x0C,0x18,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // ^
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20}, // _
  {0x00,0x00,0x00,0x18,0x38,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // `
  {0x00,0x00,0x40,0x40,0x40,0xC0,0x80,0x00,0x00,0x06,0x0F,0x09,0x09,0x0F,0x0F,0x00}, // a
  {0x00,0xF8,0xF8,0x40,0x40,0xC0,0x80,0x00,0x00,0x0F,0x0F,0x08,0x08,0x0F,0x07,0x00}, // b
  {0x00,0x80,0xC0,0x40,0x40,0xC0,0x80,0x00,0x00,0x07,0x0F,0x08,0x08,0x0C,0x04,0x00}, // c
  {0x00,0x80,0xC0,0x40,0x40,0xF8,0xF8,0x00,0x00,0x07,0x0F,0x08,0x08,0x0F,0x0F,0x00}, // d
  {0x00,0x80,0xC0,0x40,0x40,0xC0,0x80,0x00,0x00,0x07,0x0F,0x0A,0x0A,0x0B,0x0B,0x00}, // e
  {0x00,0x80,0xF0,0xF8,0x88,0x98,0x10,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00}, // f
  {0x00,0x80,0xC0,0x40,0x40,0xC0,0x80,0x00,0x00,0x07,0x4F,0x48,0x48,0x7F,0x3F,0x00}, // g
  {0x00,0xF8,0xF8,0x40,0x40,0xC0,0x80,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00}, // h
  {0x00,0x00,0x40,0xD8,0xD8,0x00,0x00,0x00,0x00,0x00,0x08,0x0F,0x0F,0x08,0x00,0x00}, // i
  {0x00,0x00,0x00,0x00,0x40,0xD8,0xD8,0x00,0x00,0x00,0x10,0x30,0x20,0x3F,0x1F,0x00}, // j
  {0x00,0xF8,0xF8,0x00,0x80,0xC0,0x40,0x00,0x00,0x0F,0x0F,0x03,0x07,0x0C,0x08,0x00}, // k
  {0x00,0x00,0x08,0xF8,0xF8,0x00,0x00,0x00,0x00,0x00,0x08,0x0F,0x0F,0x08,0x00,0x00}, // l
  {0x00,0xC0,0xC0,0xC0,0x80,0xC0,0xC0,0x80,0x00,0x0F,0x0F,0x00,0x07,0x00,0x0F,0x0F}, // m
  {0x00,0xC0,0xC0,0x40,0x40,0xC0,0x80,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00}, // n
  {0x00,0x80,0xC0,0x40,0x40,0xC0,0x80,0x00,0x00,0x07,0x0F,0x08,0x08,0x0F,0x07,0x00}, // o
  {0x00,0xC0,0xC0,0x40,0x40,0xC0,0x80,0x00,0x00,0x7F,0x7F,0x08,0x08,0x0F,0x07,0x00}, // p
  {0x00,0x80,0xC0,0x40,0x40,0xC0,0xC0,0x00,0x00,0x07,0x0F,0x08,0x08,0x7F,0x7F,0x00}, // q
  {0x00,0xC0,0xC0,0x80,0xC0,0x40,0x40,0x00,0x00,0x0F,0x0F,0x01,0x00,0x00,0x00,0x00}, // r
  {0x00,0x80,0xC0,0x40,0x40,0x40,0x40,0x00,0x00,0x08,0x09,0x09,0x09,0x0F,0x06,0x00}, // s
  {0x00,0x40,0xF8,0xF8,0x40,0x40,0x00,0x00,0x00,0x00,0x07,0x0F,0x08,0x0C,0x04,0x00}, // t
  {0x00,0xC0,0xC0,0x00,0x00,0xC0,0xC0,0x00,0x00,0x07,0x0F,0x08,0x08,0x0F,0x0F,0x00}, // u
  {0x00,0xC0,0xC0,0x00,0x00,0xC0,0xC0,0x00,0x00,0x03,0x07,0x0C,0x0C,0x07,0x03,0x00}, // v
  {0x00,0xC0,0xC0,0x00,0x00,0x00,0xC0,0xC0,0x00,0x07,0x0F,0x0C,0x07,0x0C,0x0F,0x07}, // w
  {0x00,0x40,0xC0,0x80,0x00,0x80,0xC0,0x40,0x00,0x08,0x0C,0x07,0x03,0x07,0x0C,0x08}, // x
  {0x00,0xC0,0xC0,0x00,0x00,0xC0,0xC0,0x00,0x00,0x07,0x4F,0x48,0x48,0x7F,0x3F,0x00}, // y
  {0x00,0x40,0x40,0x40,0xC0,0xC0,0x40,0x00,0x00,0x0C,0x0E,0x0B,0x09,0x08,0x08,0x00}, // z
  {0x00,0x00,0x80,0xF0,0x78,0x08,0x08,0x00,0x00,0x00,0x00,0x07,0x0F,0x08,0x08,0x00}, // {
  {0x00,0x00,0x00,0x78,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00}, // |
  {0x00,0x00,0x08,0x08,0x78,0xF0,0x80,0x00,0x00,0x00,0x08,0x08,0x0F,0x07,0x00,0x00}, // }
  {0x00,0x80,0xC0,0x40,0xC0,0x80,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // ~
  {0x00,0x00,0x60,0x90,0x90,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}};// 0x7F

/* ---------------------------------------------------------------------------- */
/*		사용자 정의 함수 선언						*/
/* ---------------------------------------------------------------------------- */

void Initialize_TFT_LCD(void);			// initialize TFT-LCD with HX8347-G
void TFT_command(U16 IR);			// write IR to TFT-LCD 
void TFT_data(U16 data);			// write data to TFT-LCD 
void TFT_write(U16 reg, U16 val);		// write TFT-LCD register
void TFT_clear_screen(void);			// TFT-LCD clear screen with black color
void TFT_color_screen(U16 color);		// TFT-LCD full screen color
void TFT_GRAM_address(U16 xPos, U16 yPos);	// set GRAM address of TFT-LCD
void TFT_xy(U08 xChar, U08 yChar);		// set character position
void TFT_color(U16 colorfore, U16 colorback);	// set foreground and background color
void TFT_pixel(U16 xPos, U16 yPos, U16 color);	// write a pixel
void TFT_portrait_mode(void);			// set portrait entry mode
void TFT_landscape_mode(void);			// set landscape entry mode
void TFT_cursor(U16 cursor_color);		// set cursor and color
void TFT_underscore(U16 underscore_color);	// set underscore and color
void TFT_outline(U16 outline_color);		// set outline and color
void TFT_string(U08 xChar, U08 yChar, U16 colorfore, U16 colorback, U08 *str);	// write TFT-LCD string
void TFT_English(U08 code);			// write a English ASCII character
unsigned short KS_code_conversion(U16 KSSM);	// convert 완성형 to 조합형
void TFT_Korean(U16 code);			// write a Korean character

void TFT_unsigned_decimal(U32 number, U08 zerofill, U08 digit); // display unsigned decimal number
void TFT_signed_decimal(S32 number, U08 zerofill, U08 digit);	// display signed decimal number
void TFT_hexadecimal(U32 number, U08 digit);	// display hexadecimal number
void TFT_0x_hexadecimal(U32 number, U08 digit);	// display hexadecimal number with 0x
void TFT_binary(U32 number, U08 digit);		// display binary number
void TFT_unsigned_float(float number, U08 integral, U08 fractional); // display unsigned floating-point number
void TFT_signed_float(float number, U08 integral, U08 fractional);   // display signed floating-point number

void Line(S16 x1,S16 y1, S16 x2,S16 y2, U16 color);	// draw a straight line
void Rectangle(S16 x1,S16 y1, S16 x2,S16 y2, U16 color);// draw a rectangle
void Block(S16 x1,S16 y1, S16 x2,S16 y2, U16 color, U16 fill); // draw a rectangle with filled color
void Circle(S16 x1,S16 y1, S16 r, U16 color);	// draw a circle
void Sine(S16 peak, U08 mode, U16 color);	// draw a sine curve

void Initialize_touch_screen(void);		// initialize touch screen
unsigned short Read_ADS7846(U16 command);	// read X, Y value from ADS7846
void Touch_screen_input(void);			// touch screen input of X, Y average value from ADS7846

/* ---------------------------------------------------------------------------- */
/*	TFT-LCD 기본 문자 출력 함수(영문 : 8x16 픽셀, 한글 : 16x16 픽셀)	*/
/* ---------------------------------------------------------------------------- */

#define Transparent	0x0821			//   1,   1,   1
#define White		0xFFFF			// 255, 255, 255
#define Black		0x0000			//   0,   0,   0
#define Red		0xF800			// 255,   0,   0
#define Green		0x07E0			//   0, 255,   0
#define Blue		0x001F			//   0,   0, 255
#define Yellow		0xFFE0			// 255, 255,   0
#define Cyan		0x07FF			//   0, 255, 255
#define Magenta		0xF81F			// 255,   0, 255
#define Brown		0xA145
#define Khaki		0xF731
#define Orange		0xFD20
#define Pink		0xFB56
#define Silver		0xC618
#define Violet		0xEC1D
#define Olive		0x8400			// 128, 128,   0
#define Purple		0x8010			// 128,   0, 128
#define Maroon          0x7800			// 128,   0,   0
#define Navy            0x000F			//   0,   0, 128
#define DarkGreen       0x03E0			//   0, 128,   0
#define DarkCyan        0x03EF			//   0, 128, 128
#define DarkGrey        0x7BEF			// 128, 128, 128
#define LightGrey       0xC618			// 192, 192, 192

unsigned char  ScreenMode = 'L';		// screen mode(P = portrait, L = landscape)
unsigned char  XcharacterLimit = 40;		// character number of line (30 or 40)
unsigned char  YcharacterLimit = 30;		// line number of screen (40 or 30)
unsigned char  Xcharacter, Ycharacter;		// Xcharacter(0-29), Ycharacter(0-39) for portrait
						// Xcharacter(0-39), Ycharacter(0-29) for landscape
unsigned char  Xcursor, Ycursor;		// cursor position
unsigned char  cursor_flag = 0;			// 0 = cursor off, 1 = cursor on
unsigned short cursor;				// cursor color
unsigned char  underscore_flag = 0;		// 0 = underscore off, 1 = underscore on
unsigned short underscore;			// underscore color
unsigned char  outline_flag = 0;		// 0 = outline off, 1 = outline on
unsigned short outline;				// outline color
unsigned short foreground, background;		// foreground and background color

void Initialize_TFT_LCD(void)			/* initialize TFT-LCD with HX8347-G */
{
  RCC->AHBENR |= 0x00480000;			// enable clock of port C,F

  GPIOC->MODER = 0x55555555;			// set PC15-PC0 to output
  GPIOC->OSPEEDR = 0x55555555;			// 10MHz speed

  GPIOF->MODER = 0x00005500;			// set PF7-PF4 to output
  GPIOF->OSPEEDR = 0x00005500;			// 10MHz speed
  GPIOF->ODR = 0x000000D0;			// -TFT_RESET = -TFT_CS = -TFT_WR = 1

  GPIOF->BRR = 0x00000080;			// reset TFT-LCD
  Delay_ms(1);
  GPIOF->BSRR = 0x00000080;
  Delay_ms(120);

  TFT_write(0x02, 0x0000);			// window setting
  TFT_write(0x03, 0x0000);			// x = 0~319
  TFT_write(0x04, 0x0001);
  TFT_write(0x05, 0x003F);
  TFT_write(0x06, 0x0000);			// y = 0~239
  TFT_write(0x07, 0x0000);
  TFT_write(0x08, 0x0000);
  TFT_write(0x09, 0x00EF);

  TFT_write(0x01, 0x0006);			// display setting
  TFT_write(0x16, 0x0068);			// MV=1, MX=1, MY=0, BGR=1
  TFT_write(0x18, 0x0000);			// SM=0
  TFT_write(0x70, 0x0065);			// GS=1, SS=1, 16 bit/pixel
  TFT_write(0x23, 0x0095);
  TFT_write(0x24, 0x0095);
  TFT_write(0x25, 0x00FF);
  TFT_write(0x27, 0x0002);
  TFT_write(0x28, 0x0002);
  TFT_write(0x29, 0x0002);
  TFT_write(0x2A, 0x0002);
  TFT_write(0x2C, 0x0002);
  TFT_write(0x2D, 0x0002);
  TFT_write(0x3A, 0x0001);
  TFT_write(0x3B, 0x0001);
  TFT_write(0x3C, 0x00F0);
  TFT_write(0x3D, 0x0000);
  Delay_ms(20);
  TFT_write(0x35, 0x0038);
  TFT_write(0x36, 0x0078);
  TFT_write(0x3E, 0x0038);
  TFT_write(0x40, 0x000F);
  TFT_write(0x41, 0x00F0); 

  TFT_write(0x19, 0x0049);			// power setting
  TFT_write(0x93, 0x000F);
  Delay_ms(10);
  TFT_write(0x20, 0x0040);
  TFT_write(0x1D, 0x0007);
  Delay_ms(10); 
  TFT_write(0x1E, 0x0000);
  TFT_write(0x1F, 0x0004);
  TFT_write(0x44, 0x0040);			// VCom control for 3.3V
  TFT_write(0x45, 0x0012);
  Delay_ms(10); 
  TFT_write(0x1C, 0x0004);
  Delay_ms(20);
  TFT_write(0x43, 0x0080);  
  Delay_ms(5);
  TFT_write(0x1B, 0x0018);    
  Delay_ms(40); 
  TFT_write(0x1B, 0x0010);      
  Delay_ms(40);

  TFT_write(0x46, 0x00A4);			// gamma setting 
  TFT_write(0x47, 0x0053);
  TFT_write(0x48, 0x0010);
  TFT_write(0x49, 0x005F);
  TFT_write(0x4A, 0x0004);
  TFT_write(0x4B, 0x003F);
  TFT_write(0x4C, 0x0002);
  TFT_write(0x4D, 0x00F6);
  TFT_write(0x4E, 0x0012);
  TFT_write(0x4F, 0x004C);
  TFT_write(0x50, 0x0046);
  TFT_write(0x51, 0x0044);

  TFT_write(0x90, 0x007F);			// display on setting
  TFT_write(0x26, 0x0004);
  Delay_ms(40);
  TFT_write(0x26, 0x0024);
  TFT_write(0x26, 0x002C);
  Delay_ms(40); 
  TFT_write(0x26, 0x003C);

  TFT_write(0x57, 0x0002);			// internal VDDD setting
  TFT_write(0x55, 0x0000);
  TFT_write(0xFE, 0x005A);
  TFT_write(0x57, 0x0000);

  TFT_clear_screen();				// clear screen
}

void TFT_command(U16 IR)			/* write IR to TFT-LCD */
{
  GPIOF->BRR = 0x00000060;			// RS = 0, -CS = 0
  GPIOC->ODR  = IR;
  GPIOF->BRR = 0x00000010;			// -WR = 0
  GPIOF->BSRR = 0x00000010;			// -WR = 1
  GPIOF->BSRR = 0x00000060;			// RS = 1, -CS = 1
}

void TFT_data(U16 data)				/* write data to TFT-LCD */
{
  GPIOF->BSRR = 0x00400020;			// RS = 1, -CS = 0
  GPIOC->ODR  = data;
  GPIOF->BRR = 0x00000010;			// -WR = 0
  GPIOF->BSRR = 0x00000010;			// -WR = 1
  GPIOF->BSRR = 0x00000060;			// RS = 1, -CS = 1
}

void TFT_write(U16 reg, U16 val)		/* write TFT-LCD register */
{
  TFT_command(reg);
  TFT_data(val);
}

/* ---------------------------------------------------------------------------- */
/*		TFT 보드 출력제어 함수						*/
/* ---------------------------------------------------------------------------- */

void TFT_clear_screen(void)			/* TFT-LCD clear screen with black color */
{
  TFT_color_screen(Black);
}

void TFT_color_screen(U16 color)		/* TFT-LCD full screen color */
{
  unsigned short i, j;

  TFT_GRAM_address(0,0);

  for(i = 0; i < 320; i++)
    for(j = 0; j < 240; j++)
      TFT_data(color);
}

void TFT_GRAM_address(U16 xPos, U16 yPos)	/* set GRAM address of TFT-LCD */
{
  if(ScreenMode == 'P')
    { if((xPos > 239) || (yPos > 319))
        return;
      TFT_write(0x02, 0x0000);			// xPos = 0~239
      TFT_write(0x03, xPos);
      TFT_write(0x06, yPos >> 8);		// yPos = 0~319
      TFT_write(0x07, yPos & 0x00FF);
    }
  else
    { if((xPos > 319) || (yPos > 239))
        return;
      TFT_write(0x02, xPos >> 8);		// xPos = 0~319
      TFT_write(0x03, xPos & 0x00FF);
      TFT_write(0x06, 0x0000);			// yPos = 0~239
      TFT_write(0x07, yPos);
    }

  TFT_command(0x22);
}

void TFT_xy(U08 xChar, U08 yChar)		/* set character position (x,y) */
{
  Xcharacter = xChar;
  Ycharacter = yChar;
}

void TFT_color(U16 colorfore, U16 colorback)	/* set foreground and background color */
{
  foreground = colorfore;
  background = colorback;
}

void TFT_pixel(U16 xPos, U16 yPos, U16 color)	/* write a pixel */
{
  if(ScreenMode == 'P')
    { if((xPos > 239) || (yPos > 319))
        return;
      TFT_write(0x02, 0x0000);			// xPos = 0~239
      TFT_write(0x03, xPos);
      TFT_write(0x06, yPos >> 8);		// yPos = 0~319
      TFT_write(0x07, yPos & 0x00FF);
    }
  else
    { if((xPos > 319) || (yPos > 239))
        return;
      TFT_write(0x02, xPos >> 8);		// xPos = 0~319
      TFT_write(0x03, xPos & 0x00FF);
      TFT_write(0x06, 0x0000);			// yPos = 0~239
      TFT_write(0x07, yPos);
    }

  if(color != Transparent)			// transparent mode ?
    TFT_write(0x22, color);
}

/* ---------------------------------------------------------------------------- */
/*		TFT-LCD 문자 출력 함수						*/
/* ---------------------------------------------------------------------------- */

void TFT_portrait_mode(void)			/* set portrait mode */
{
  TFT_write(0x16, 0x0008);			// MV=0, MX=0, MY=0, BGR=1

  TFT_write(0x02, 0x0000);			// x = 0~239
  TFT_write(0x03, 0x0000);
  TFT_write(0x04, 0x0000);
  TFT_write(0x05, 0x00EF);
  TFT_write(0x06, 0x0000);			// y = 0~319
  TFT_write(0x07, 0x0000);
  TFT_write(0x08, 0x0001);
  TFT_write(0x09, 0x003F);

  XcharacterLimit = 30;				// 30x40 character unit
  YcharacterLimit = 40;
  ScreenMode = 'P';
}

void TFT_landscape_mode(void)			/* set landscape mode */
{
  TFT_write(0x16, 0x0068);			// MV=1, MX=1, MY=0, BGR=1

  TFT_write(0x02, 0x0000);			// x = 0~319
  TFT_write(0x03, 0x0000);
  TFT_write(0x04, 0x0001);
  TFT_write(0x05, 0x003F);
  TFT_write(0x06, 0x0000);			// y = 0~239
  TFT_write(0x07, 0x0000);
  TFT_write(0x08, 0x0000);
  TFT_write(0x09, 0x00EF);

  XcharacterLimit = 40;				// 40x30 character unit
  YcharacterLimit = 30;
  ScreenMode = 'L';
}

void TFT_cursor(U16 cursor_color)		/* set cursor and color */
{
  if(cursor_color == Transparent)		// disable cursor
    cursor_flag = 0;
  else						// enable cursor
    { cursor_flag = 1;
      cursor = cursor_color;
    }
}

void TFT_underscore(U16 underscore_color)	/* set underscore and color */
{
  if(underscore_color == Transparent)		// disable underscore
    underscore_flag = 0;
  else						// enable underscore
    { underscore_flag = 1;
      underscore = underscore_color;
    }
}

void TFT_outline(U16 outline_color)		/* set outline and color */
{
  if(outline_color == Transparent)		// disable outline
    outline_flag = 0;
  else						// enable outline
    { outline_flag = 1;
      outline = outline_color;
    }
}

void TFT_string(U08 xChar, U08 yChar, U16 colorfore, U16 colorback, U08 *str)	/* write TFT-LCD string */
{
  unsigned char ch1, ch2;
  unsigned short hangeul;

  Xcharacter = xChar;
  Ycharacter = yChar;

  foreground = colorfore;
  background = colorback;

  while(*str)
    { ch1 = *str;
      str++;

      if(ch1 < 0x80)				// English ASCII character
	TFT_English(ch1);
      else					// Korean
	{ ch2 = *str;
	  hangeul = (ch1 << 8) + ch2;
          str++;
	  hangeul = KS_code_conversion(hangeul);// convert 완성형 to 조합형
	  TFT_Korean(hangeul);
	}
    }
}

void TFT_English(U08 code)			/* write a English ASCII character */
{
  unsigned char  data, x, y;
  unsigned short pixel[8][16];
  unsigned short xPos, yPos, dot0, dot1, dot2, dot3, dot4;

  for(x = 0; x < 8; x++)			// read English ASCII font
    { data = E_font[code][x];
      for(y = 0; y < 8; y++)
        { if(data & 0x01) pixel[x][y] = foreground;
	  else            pixel[x][y] = background;
	  data = data >> 1;
	}
    }

  for(x = 0; x < 8; x++)
    { data = E_font[code][x+8];
      for(y = 0; y < 8; y++)
	{ if(data & 0x01) pixel[x][y+8] = foreground;
	  else            pixel[x][y+8] = background;
	  data = data >> 1;
	}
    }

  if(outline_flag == 1)				// display outline
    for(x = 0; x < 8; x++)
      { dot0 = E_font[code][x] + E_font[code][x+8]*256;
        dot1 = dot0 >> 1;				 // up side
        dot2 = dot0;					 // down side
        dot3 = E_font[code][x+1] + E_font[code][x+9]*256;// left side
        dot4 = E_font[code][x-1] + E_font[code][x+7]*256;// right side

        for(y = 0; y < 15; y++)
	  { if(!(dot0 & 0x0001))
	      { if(dot1 & 0x0001) pixel[x][y] = outline;
	        if(dot2 & 0x0001) pixel[x][y] = outline;
	        if((dot3 & 0x0001) && (x < 7 )) pixel[x][y] = outline;
	        if((dot4 & 0x0001) && (x > 0 )) pixel[x][y] = outline;
	      }

            dot1 >>= 1;
            dot2 = dot0;
	    dot0 >>= 1;
	    dot3 >>= 1;
	    dot4 >>= 1;
          }
      }
  if(Xcharacter >= XcharacterLimit)		// end of line ?
    { Xcharacter = 0;
      Ycharacter += 2;
      if(Ycharacter >= (YcharacterLimit-1))	// end of screen ?
        Ycharacter = 0;
    }

  if(underscore_flag == 1)
    { for(x = 0; x < 8; x++)			// display underscore
          pixel[x][15] = underscore;
    }

  if((cursor_flag == 1) && (Xcharacter == Xcursor) &&(Ycharacter == Ycursor))
    { for(x = 0; x < 8; x++)			// display cursor
        { pixel[x][14] = cursor;
          pixel[x][15] = cursor;
        }
    }

  if(background != Transparent)			// transparent mode ?
    { xPos = Xcharacter*8;

      for(y = 0; y < 16; y++)			// if no, write a character in higher speed
        { yPos = Ycharacter*8 + y;

          if(ScreenMode == 'P')
            { TFT_write(0x02, 0x0000);		// xPos = 0~239
              TFT_write(0x03, xPos);
              TFT_write(0x06, yPos >> 8);	// yPos = 0~319
              TFT_write(0x07, yPos & 0x00FF);
            }
          else
	    { TFT_write(0x02, xPos >> 8);	// xPos = 0~319
              TFT_write(0x03, xPos & 0x00FF);
              TFT_write(0x06, 0x0000);		// yPos = 0~239
              TFT_write(0x07, yPos);
	    }

          TFT_command(0x22);
          TFT_data(pixel[0][y]);
          TFT_data(pixel[1][y]);
          TFT_data(pixel[2][y]);
          TFT_data(pixel[3][y]);
          TFT_data(pixel[4][y]);
          TFT_data(pixel[5][y]);
          TFT_data(pixel[6][y]);
          TFT_data(pixel[7][y]);
        }
    }
  else
    { for(y = 0; y < 16; y++)			// if yes, write a character
        for(x = 0; x < 8; x++)
          TFT_pixel(Xcharacter*8 + x, Ycharacter*8 + y, pixel[x][y]);
    }

  Xcharacter += 1;				// go to next position
}

unsigned short KS_code_conversion(U16 KSSM)	/* convert 완성형 to 조합형 */
{
  unsigned char  HB, LB;
  unsigned short index, KS;

  HB = KSSM >> 8;
  LB = KSSM & 0x00FF;

  if(KSSM >= 0xB0A1 && KSSM <= 0xC8FE)
    { index = (HB - 0xB0)*94 + LB - 0xA1;
      KS  =  KS_Table[index][0] * 256;
      KS |=  KS_Table[index][1];

      return KS;
    }
  else
    return 0;
}

void TFT_Korean(U16 code)			/* write a Korean character */
{
  unsigned char  cho_5bit, joong_5bit, jong_5bit;
  unsigned char  cho_bul, joong_bul, jong_bul = 0, i, jong_flag;
  unsigned short ch;
  unsigned char  Kbuffer[32] = {0};		// 32 byte Korean font buffer

  cho_5bit   = table_cho[(code >> 10) & 0x001F];  // get 5bit(14-10) of chosung
  joong_5bit = table_joong[(code >> 5) & 0x001F]; // get 5bit(09-05) of joongsung
  jong_5bit  = table_jong[code & 0x001F];	  // get 5bit(04-00) of jongsung

  if(jong_5bit == 0)				// if jongsung not exist
    { jong_flag = 0;
      cho_bul = bul_cho1[joong_5bit];
      if((cho_5bit == 1) || (cho_5bit == 16))
   	joong_bul = 0;
      else
	joong_bul = 1;
    }
  else						// if jongsung exist
    { jong_flag = 1;
      cho_bul = bul_cho2[joong_5bit];
      if((cho_5bit == 1) || (cho_5bit == 16))
	joong_bul = 2;
      else
	joong_bul = 3;
      jong_bul = bul_jong[joong_5bit];
    }

  ch = cho_bul*20 + cho_5bit;			// get chosung font 
  for(i = 0; i < 32; i++)
    Kbuffer[i] = K_font[ch][i];
  ch = 8*20 + joong_bul*22 + joong_5bit;	// OR joongsung font
  for(i = 0; i < 32; i++)
    Kbuffer[i] |= K_font[ch][i];
  if(jong_flag)					// OR jongsung font
    { ch = 8*20 + 4*22 + jong_bul*28 + jong_5bit;
      for(i = 0; i < 32; i++)
	Kbuffer[i] |= K_font[ch][i];
    }
  
  unsigned char  data, x, y;
  unsigned short pixel[16][16];
  unsigned short xPos, yPos, dot0, dot1, dot2, dot3, dot4;

  for(x = 0; x < 16; x++)			// read Korean font
    { data = Kbuffer[x];
      for(y = 0; y < 8; y++)
	{ if(data & 0x01) pixel[x][y] = foreground;
	  else            pixel[x][y] = background;
	  data = data >> 1;
	}
    }

  for(x = 0; x < 16; x++)
    { data = Kbuffer[x+16];
      for(y = 0; y < 8; y++)
	{ if(data & 0x01) pixel[x][y+8] = foreground;
	  else            pixel[x][y+8] = background;
	  data = data >> 1;
	}
    }

  if(outline_flag == 1)				// display outline
    for(x = 0; x < 16; x++)
      { dot0 = Kbuffer[x] + Kbuffer[x+16]*256;
        dot1 = dot0 >> 1;			 // up side
        dot2 = dot0;				 // down side
        dot3 = Kbuffer[x+1] + Kbuffer[x+17]*256; // left side
        dot4 = Kbuffer[x-1] + Kbuffer[x+15]*256; // right side

        for(y = 0; y < 16; y++)
	  { if(!(dot0 & 0x0001))
	      { if(dot1 & 0x0001) pixel[x][y] = outline;
	        if(dot2 & 0x0001) pixel[x][y] = outline;
 	        if((dot3 & 0x0001) && (x < 15 )) pixel[x][y] = outline;
	        if((dot4 & 0x0001) && (x > 0 ))  pixel[x][y] = outline;
	      }

	    dot1 >>= 1;
	    dot2 = dot0;
	    dot0 >>= 1;
	    dot3 >>= 1;
	    dot4 >>= 1;
          }
      }

  if(Xcharacter >= (XcharacterLimit-1))		// end of line ?
    { Xcharacter = 0;
      Ycharacter += 2;
      if(Ycharacter >= (YcharacterLimit-1))	// end of screen ?
        Ycharacter = 0;
    }
  
  if(underscore_flag == 1)
    { for(x = 0; x < 16; x++)			// display underscore
          pixel[x][15] = underscore;
    }

  if((cursor_flag == 1) && (Xcharacter == Xcursor) &&(Ycharacter == Ycursor))
    { for(x = 0; x < 16; x++)			// display cursor
        { pixel[x][14] = cursor;
          pixel[x][15] = cursor;
        }
    }

  if(background != Transparent)			// transparent mode ?
    { xPos = Xcharacter*8;

      for(y = 0; y < 16; y++)			// if no, write a character in higher speed
        { yPos = Ycharacter*8 + y;

          if(ScreenMode == 'P')
            { TFT_write(0x02, 0x0000);		// xPos = 0~239
              TFT_write(0x03, xPos);
              TFT_write(0x06, yPos >> 8);	// yPos = 0~319
              TFT_write(0x07, yPos & 0x00FF);
            }
          else
	    { TFT_write(0x02, xPos >> 8);	// xPos = 0~319
              TFT_write(0x03, xPos & 0x00FF);
              TFT_write(0x06, 0x0000);		// yPos = 0~239
              TFT_write(0x07, yPos);
	    }

          TFT_command(0x22);
          TFT_data(pixel[0][y]);
          TFT_data(pixel[1][y]);
          TFT_data(pixel[2][y]);
          TFT_data(pixel[3][y]);
          TFT_data(pixel[4][y]);
          TFT_data(pixel[5][y]);
          TFT_data(pixel[6][y]);
          TFT_data(pixel[7][y]);
          TFT_data(pixel[8][y]);
          TFT_data(pixel[9][y]);
          TFT_data(pixel[10][y]);
          TFT_data(pixel[11][y]);
          TFT_data(pixel[12][y]);
          TFT_data(pixel[13][y]);
          TFT_data(pixel[14][y]);
          TFT_data(pixel[15][y]);
        }
    }
  else
    { for(y = 0; y < 16; y++)			// if yes, write a character
        for(x = 0; x < 16; x++)
          TFT_pixel(Xcharacter*8 + x, Ycharacter*8 + y, pixel[x][y]);
    }

  Xcharacter += 2;				// go to next position
}

/* ---------------------------------------------------------------------------- */
/*		TFT-LCD 수치 데이터 출력 함수					*/
/* ---------------------------------------------------------------------------- */

void TFT_unsigned_decimal(U32 number, U08 zerofill, U08 digit) /* display unsigned decimal number */
{
  unsigned char zero_flag, character;
  unsigned int  div;

  if((digit == 0) || (digit > 9)) return;

  div = 1;
  while(--digit) div *= 10;

  zero_flag = zerofill;
  while(div > 0)				// display number
    { character = number / div;
      if((character == 0) && (zero_flag == 0) && (div != 1))
        TFT_English(character + ' ');
      else
        { zero_flag = 1;
          TFT_English(character + '0');
        }
      number %= div;
      div /= 10;
    }
}

void TFT_signed_decimal(S32 number, U08 zerofill, U08 digit)	/* display signed decimal number */
{
  unsigned char zero_flag, character;
  unsigned int  div;

  if((digit == 0) || (digit > 9)) return;

  if(number >= 0)				// display sign
    TFT_English('+');
  else
    { TFT_English('-');
      number = -number;
    }

  div = 1;
  while(--digit) div *= 10;

  zero_flag = zerofill;
  while(div > 0)				// display number
    { character = number / div;
      if((character == 0) && (zero_flag == 0) && (div != 1))
        TFT_English(character + ' ');
      else
        { zero_flag = 1;
          TFT_English(character + '0');
        }
      number %= div;
      div /= 10;
    }
}

void TFT_hexadecimal(U32 number, U08 digit)	/* display hexadecimal number */
{
  unsigned char i, character;

  if((digit == 0) || (digit > 8)) return;

  for(i = digit; i > 0; i--)
    { character = (number >> 4*(i-1)) & 0x0F;
      if(character < 10) TFT_English(character + '0');
      else               TFT_English(character - 10 + 'A');
    }
}

void TFT_0x_hexadecimal(U32 number, U08 digit)	/* display hexadecimal number with 0x */
{
  unsigned char i, character;

  if((digit == 0) || (digit > 8)) return;

  TFT_English('0');
  TFT_English('x');

  for(i = digit; i > 0; i--)
    { character = (number >> 4*(i-1)) & 0x0F;
      if(character < 10) TFT_English(character + '0');
      else               TFT_English(character - 10 + 'A');
    }
}

void TFT_binary(U32 number, U08 digit)		/* display binary number */
{
  unsigned char i;

  if((digit == 0) || (digit > 32)) return;

  for(i = digit; i > 0; i--)
    TFT_English(((number >> (i-1)) & 0x01) + '0');
}

void TFT_unsigned_float(float number, U08 integral, U08 fractional) /* display unsigned floating-point number */
{
  unsigned char zero_flag, digit, character;	// integral = digits of integral part
  unsigned int  div, integer;			// fractional = digits of fractional part

  digit = integral + fractional;
  if((integral == 0) || (fractional == 0) || (digit > 9)) return;

  div = 1;
  while(--digit) div *= 10;

  while(fractional--) number *= 10.;
  integer = (U32)(number + 0.5);

  zero_flag = 0;
  digit = 1;
  while(div > 0)				// display number
    { character = integer / div;
      if((character == 0) && (zero_flag == 0) && (digit != integral))
        TFT_English(character + ' ');
      else
        { zero_flag = 1;
          TFT_English(character + '0');
        }
      integer %= div;
      div /= 10;

      if(digit == integral)
        TFT_English('.');
      digit++;
    }
}

void TFT_signed_float(float number, U08 integral, U08 fractional) /* display signed floating-point number */
{
  unsigned char zero_flag, digit, character;
  unsigned int  div, integer;

  digit = integral + fractional;
  if((integral == 0) || (fractional == 0) || (digit > 9)) return;

  if(number >= 0)				// display sign
    TFT_English('+');
  else
    { TFT_English('-');
      number = -number;
    }

  div = 1;
  while(--digit) div *= 10;

  while(fractional--) number *= 10.;
  integer = (U32)(number + 0.5);

  zero_flag = 0;
  digit = 1;
  while(div > 0)				// display number
    { character = integer / div;
      if((character == 0) && (zero_flag == 0) && (digit != integral))
        TFT_English(character + ' ');
      else
        { zero_flag = 1;
          TFT_English(character + '0');
        }
      integer %= div;
      div /= 10;

      if(digit == integral)
        TFT_English('.');
      digit++;
    }
}

/* ---------------------------------------------------------------------------- */
/*		그래픽 함수							*/
/* ---------------------------------------------------------------------------- */

void Line(S16 x1,S16 y1, S16 x2,S16 y2, U16 color)	/* draw a straight line */
{
  short x, y;

  if((x1 == x2) && (y1 == y2))			// if x1 == x2 and y1 == y2, it is a dot
    TFT_pixel(x1, y1, color);
  else
    { if(x1 < x2) x = x2 - x1;			// calculate x length
      else        x = x1 - x2;
      if(y1 < y2) y = y2 - y1;			// calculate y length
      else        y = y1 - y2;

      if((x >= y) && (x1 <= x2))		// if x is long and y is short
        for(x = x1; x <= x2; x++)
          { y = y1 + (int)(x - x1)*(int)(y2 - y1)/(x2 - x1);
            TFT_pixel(x, y, color);
          }
      else if((x >= y) && (x1 > x2))
        for(x = x1; x >= x2; x--)
          { y = y1 + (int)(x - x1)*(int)(y2 - y1)/(x2 - x1);
            TFT_pixel(x, y, color);
          }
      else if((x < y) && (y1 <= y2))		// if x is short and y is long
        for(y = y1; y <= y2; y++)
          { x = x1 + (int)(y - y1)*(int)(x2 - x1)/(y2 - y1);
            TFT_pixel(x, y, color);
          }
      else if((x < y) && (y1 > y2))
        for(y = y1; y >= y2; y--)
          { x = x1 + (int)(y - y1)*(int)(x2 - x1)/(y2 - y1);
            TFT_pixel(x, y, color);
          }
    }
}

void Rectangle(S16 x1,S16 y1, S16 x2,S16 y2, U16 color) /* draw a rectangle */
{
  Line(x1,y1, x1,y2, color);			// horizontal line
  Line(x2,y1, x2,y2, color);
  Line(x1,y1, x2,y1, color);			// vertical line
  Line(x1,y2, x2,y2, color);
}

void Block(S16 x1,S16 y1, S16 x2,S16 y2, U16 color, U16 fill) /* draw a rectangle with filled color */
{
  short i;

  Line(x1,y1, x1,y2, color);			// horizontal line
  Line(x2,y1, x2,y2, color);
  Line(x1,y1, x2,y1, color);			// vertical line
  Line(x1,y2, x2,y2, color);

  if((y1 < y2) && (x1 != x2))			// fill block
    { for(i = y1+1; i <= y2-1; i++)
         Line(x1+1,i, x2-1,i, fill);
    }
  else if((y1 > y2) && (x1 != x2))
    { for(i = y2+1; i <= y1-1; i++)
         Line(x1+1,i, x2-1,i, fill);
    }
}

void Circle(S16 x1,S16 y1, S16 r, U16 color)	/* draw a circle */
{
  short x, y;
  float s;

  for(y = y1 - r*3/4; y <= y1 + r*3/4; y++)	// draw with y variable
    { s = sqrt((int)r*(int)r - (int)(y-y1)*(int)(y-y1)) + 0.5;
      x = x1 + (int)s;
      TFT_pixel(x, y, color);
      x = x1 - (int)s;
      TFT_pixel(x, y, color);
    }

  for(x = x1 - r*3/4; x <= x1 + r*3/4; x++)	// draw with x variable
    { s = sqrt((int)r*(int)r - (int)(x-x1)*(int)(x-x1)) + 0.5;
      y = y1 + (int)s;
      TFT_pixel(x, y, color);
      y = y1 - (int)s;
      TFT_pixel(x, y, color);
    }
}

#define M_PI       3.141592654

void Sine(S16 peak, U08 mode, U16 color)	/* draw a sine curve */
{
  short x, y;

  if(mode == 0)
    for(x = 0; x <= 319; x++)
      { y = 120 - (int)(sin((float)x * 1.6875 * M_PI / 180.) * peak + 0.5);
        TFT_pixel(x, y, color);
      }
  else
    for(x = 0; x <= 319; x++)
      { y = 120 + (int)(sin((float)x * 1.6875 * M_PI / 180.) * peak + 0.5);
        TFT_pixel(x, y, color);
      }
}

/* ---------------------------------------------------------------------------- */
/*		    TFT-2432A 보드 터치 스크린 컨트롤러 입력 함수		*/
/* ---------------------------------------------------------------------------- */

#define x_touch_min	250			// minimum value of touch screen x-axis
#define x_touch_max	3750			// maximum value of touch screen x-axis
#define y_touch_min	400			// minimum value of touch screen y-axis
#define y_touch_max	3830			// maximum value of touch screen y-axis

#define ADS7846_CMD_X	0x00D0			// 12-bit resolution X position measurement command
#define ADS7846_CMD_Y	0x0090			// 12-bit resolution Y position measurement command

unsigned char touch_flag;			// 'A' = ADS7846, 'T' = TSC2003

unsigned short x_12bit, y_12bit;		// x_12bit(0-4095), y_12bit(0-4095)
unsigned short x_touch, y_touch;		// x_touch(0-239),  y_touch(0-319)

void Initialize_touch_screen(void)		/* initialize touch screen */
{
  GPIOA->MODER &= 0x3FFFFFFF;			// PA15(-TS_INT) = input
  GPIOB->MODER &= 0xFFFFF03C;			// PB0(-TS_CS) = output
  GPIOB->MODER |= 0x00000A81;			// PB5(TS_MOSI),PB4(TS_MISO),PB3(TS_CLK) = alternate function
  GPIOB->BSRR = 0x00000001;			// -TS_CS = 1
  GPIOB->AFR[0] &= 0xFF000FFF;			// PB5 = SPI1_MOSI, PB4 = SPI1_MISO, PB3 = SPI1_CLK

  RCC->AHBENR |= 0x00060000;			// enable clock of port A,B
  RCC->APB2ENR |= 0x00001000;			// enable SPI1 clock

  SPI1->CR1 = 0x0364;				// master mode, 48MHz/32 = 1.5MHz, CPOL = CPHA = 0
  SPI1->CR2 = 0x0F00;				// 16-bit data, disable SS output

  Read_ADS7846(ADS7846_CMD_X);			// dummy input for -TS_INT signal
}

unsigned short Read_ADS7846(U16 command)	/* read X, Y value from ADS7846 */
{
  unsigned short axis;

  GPIOB->BRR = 0x00000001;			// -TS_CS = 0
  SPI1->DR = command;
  while(!(SPI1->SR & 0x0001));
  axis = SPI1->DR;
  Delay_us(1);
  SPI1->DR = 0x0000;
  while(!(SPI1->SR & 0x0001));
  axis = SPI1->DR;
  GPIOB->BSRR = 0x00000001;			// -TS_CS = 1

  axis >>= 3;
  return axis;
}

void Touch_screen_input(void)			/* touch screen input of X, Y average value from ADS7846 */
{
  unsigned char i;
  unsigned short temp;

  x_12bit = 0;					// initial value
  y_12bit = 0;

  for(i = 0; i < 16; i++)			// read X, Y value by 16 times if -PENIRQ enable
    { if((GPIOA->IDR & 0x00008000) == 0)	// -TS_INT = 0 ?
        x_12bit += Read_ADS7846(ADS7846_CMD_X);	// if yes, measure X position
      else					// if not, return with 0
        { x_12bit = 0;
	  y_12bit = 0;
	  break;
	}
      Delay_us(5);

      if((GPIOA->IDR & 0x00008000) == 0)	// -TS_INT = 0 ?
        y_12bit += Read_ADS7846(ADS7846_CMD_Y);	// if yes, measure Y position
      else					// if not, return with 0
        { x_12bit = 0;
	  y_12bit = 0;
	  break;
	}
      Delay_us(5);
    }

  x_12bit >>= 4;				// calculate average for 16 times
  y_12bit >>= 4;

  if((x_12bit == 0) && (y_12bit == 0))
    { x_touch = 0;
      y_touch = 0;
      return;
    }

  if(x_12bit <= x_touch_min)			// convert to pixel x-axis value
    x_touch = 0;
  else if(x_12bit >= x_touch_max)
    x_touch = 239;
  else
    x_touch = (unsigned int)((float)(x_12bit - x_touch_min) * 239./(float)(x_touch_max - x_touch_min));

  if(y_12bit <= y_touch_min)			// convert to pixel y-axis value
    y_touch = 319;
  else if(y_12bit >= y_touch_max)
    y_touch = 0;
  else
    y_touch = 319 - (unsigned int)((float)(y_12bit - y_touch_min) * 319./(float)(y_touch_max - y_touch_min));

  if(ScreenMode == 'L')				// adjust axis value for landscape mode
    { temp = x_12bit;				// exchange x_12bit and y_12bit
      x_12bit = y_12bit;
      y_12bit = temp;
      temp = x_touch;				// exchange x_touch and y_touch
      x_touch = y_touch;
      y_touch = 239 - temp;
    }
}
