
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000286  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000044  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000dd  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008b  00000000  00000000  0000041b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001db  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a7  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  b6:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:
#define BREAK2_OFF 		(MOTOR_PORT&=~0x80)



void port_init(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
  c6:	eb e3       	ldi	r30, 0x3B	; 59
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
 DDRA  = 0x00;
  cc:	ea e3       	ldi	r30, 0x3A	; 58
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
 PORTB = 0x00;
  d2:	e8 e3       	ldi	r30, 0x38	; 56
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1
 DDRB  = 0x00;
  d8:	e7 e3       	ldi	r30, 0x37	; 55
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
 PORTC = 0x00; //m103 output only
  de:	e5 e3       	ldi	r30, 0x35	; 53
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
 DDRC  = 0xff;
  e4:	e4 e3       	ldi	r30, 0x34	; 52
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	80 83       	st	Z, r24
 PORTD = 0x00;
  ec:	e2 e3       	ldi	r30, 0x32	; 50
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	10 82       	st	Z, r1
 DDRD  = 0x00;
  f2:	e1 e3       	ldi	r30, 0x31	; 49
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	10 82       	st	Z, r1
 PORTE = 0x00;
  f8:	e3 e2       	ldi	r30, 0x23	; 35
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
 DDRE  = 0x00;
  fe:	e2 e2       	ldi	r30, 0x22	; 34
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
 PORTF = 0x00;
 104:	e2 e6       	ldi	r30, 0x62	; 98
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	10 82       	st	Z, r1
 DDRF  = 0x00;
 10a:	e1 e6       	ldi	r30, 0x61	; 97
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
 PORTG = 0x00;
 110:	e5 e6       	ldi	r30, 0x65	; 101
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
 DDRG  = 0xff;
 116:	e4 e6       	ldi	r30, 0x64	; 100
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	80 83       	st	Z, r24
}
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 12c:	f8 94       	cli
 XMCRA = 0x00; //external memory
 12e:	ed e6       	ldi	r30, 0x6D	; 109
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	10 82       	st	Z, r1
 XMCRB = 0x00; //external memory
 134:	ec e6       	ldi	r30, 0x6C	; 108
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	10 82       	st	Z, r1
 port_init();
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <port_init>

 MCUCR = 0x00;
 13e:	e5 e5       	ldi	r30, 0x55	; 85
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 144:	ea e6       	ldi	r30, 0x6A	; 106
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	10 82       	st	Z, r1
 EICRB = 0x00; //extended ext ints
 14a:	ea e5       	ldi	r30, 0x5A	; 90
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	10 82       	st	Z, r1
 EIMSK = 0x00;
 150:	e9 e5       	ldi	r30, 0x59	; 89
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	10 82       	st	Z, r1
 TIMSK = 0x00; //timer interrupt sources
 156:	e7 e5       	ldi	r30, 0x57	; 87
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1
 ETIMSK = 0x00; //extended timer interrupt sources
 15c:	ed e7       	ldi	r30, 0x7D	; 125
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	10 82       	st	Z, r1
 sei(); //re-enable interrupts
 162:	78 94       	sei
 //all peripherals are now initialized
}
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <delay>:

void delay(int delaytime){
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	00 d0       	rcall	.+0      	; 0x170 <delay+0x6>
 170:	00 d0       	rcall	.+0      	; 0x172 <delay+0x8>
 172:	00 d0       	rcall	.+0      	; 0x174 <delay+0xa>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	9e 83       	std	Y+6, r25	; 0x06
 17a:	8d 83       	std	Y+5, r24	; 0x05
	 int i,j;
	 for(i=0;i<1000;i++){
 17c:	1c 82       	std	Y+4, r1	; 0x04
 17e:	1b 82       	std	Y+3, r1	; 0x03
 180:	14 c0       	rjmp	.+40     	; 0x1aa <delay+0x40>
	 	for(j=0;j<delaytime;j++){
 182:	1a 82       	std	Y+2, r1	; 0x02
 184:	19 82       	std	Y+1, r1	; 0x01
 186:	05 c0       	rjmp	.+10     	; 0x192 <delay+0x28>
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	29 81       	ldd	r18, Y+1	; 0x01
 194:	3a 81       	ldd	r19, Y+2	; 0x02
 196:	8d 81       	ldd	r24, Y+5	; 0x05
 198:	9e 81       	ldd	r25, Y+6	; 0x06
 19a:	28 17       	cp	r18, r24
 19c:	39 07       	cpc	r19, r25
 19e:	a4 f3       	brlt	.-24     	; 0x188 <delay+0x1e>
 //all peripherals are now initialized
}

void delay(int delaytime){
	 int i,j;
	 for(i=0;i<1000;i++){
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	9c 81       	ldd	r25, Y+4	; 0x04
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	9c 83       	std	Y+4, r25	; 0x04
 1a8:	8b 83       	std	Y+3, r24	; 0x03
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	9c 81       	ldd	r25, Y+4	; 0x04
 1ae:	23 e0       	ldi	r18, 0x03	; 3
 1b0:	88 3e       	cpi	r24, 0xE8	; 232
 1b2:	92 07       	cpc	r25, r18
 1b4:	34 f3       	brlt	.-52     	; 0x182 <delay+0x18>
	 	for(j=0;j<delaytime;j++){
		}
	 }
}
 1b6:	26 96       	adiw	r28, 0x06	; 6
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	cf 91       	pop	r28
 1c4:	df 91       	pop	r29
 1c6:	08 95       	ret

000001c8 <main>:

int main(void)
{
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 init_devices();
 1d0:	0e 94 92 00 	call	0x124	; 0x124 <init_devices>
 
 ENABLE1_ON;
 1d4:	a5 e3       	ldi	r26, 0x35	; 53
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e5 e3       	ldi	r30, 0x35	; 53
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	8b 7f       	andi	r24, 0xFB	; 251
 1e0:	8c 93       	st	X, r24
 PWM1_ON;
 1e2:	a5 e3       	ldi	r26, 0x35	; 53
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e5 e3       	ldi	r30, 0x35	; 53
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	8c 93       	st	X, r24
 BREAK1_OFF;
 1f0:	a5 e3       	ldi	r26, 0x35	; 53
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e5 e3       	ldi	r30, 0x35	; 53
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	8c 93       	st	X, r24
 ENABLE2_ON;
 1fe:	a5 e3       	ldi	r26, 0x35	; 53
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e5 e3       	ldi	r30, 0x35	; 53
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	8c 93       	st	X, r24
 PWM2_ON;
 20c:	a5 e3       	ldi	r26, 0x35	; 53
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e5 e3       	ldi	r30, 0x35	; 53
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 61       	ori	r24, 0x10	; 16
 218:	8c 93       	st	X, r24
 BREAK2_OFF; 
 21a:	a5 e3       	ldi	r26, 0x35	; 53
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e5 e3       	ldi	r30, 0x35	; 53
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	8f 77       	andi	r24, 0x7F	; 127
 226:	8c 93       	st	X, r24
 
 while(1){
 	 DIR1_ON;		
 228:	a5 e3       	ldi	r26, 0x35	; 53
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e5 e3       	ldi	r30, 0x35	; 53
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	82 60       	ori	r24, 0x02	; 2
 234:	8c 93       	st	X, r24
	 DIR2_ON;	
 236:	a5 e3       	ldi	r26, 0x35	; 53
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e5 e3       	ldi	r30, 0x35	; 53
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 62       	ori	r24, 0x20	; 32
 242:	8c 93       	st	X, r24
	 PORTG = 0x01;	
 244:	e5 e6       	ldi	r30, 0x65	; 101
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 83       	st	Z, r24
	 delay(2000);
 24c:	80 ed       	ldi	r24, 0xD0	; 208
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	0e 94 b5 00 	call	0x16a	; 0x16a <delay>
   	 DIR1_OFF;
 254:	a5 e3       	ldi	r26, 0x35	; 53
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e5 e3       	ldi	r30, 0x35	; 53
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8d 7f       	andi	r24, 0xFD	; 253
 260:	8c 93       	st	X, r24
	 DIR2_OFF;	 
 262:	a5 e3       	ldi	r26, 0x35	; 53
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	e5 e3       	ldi	r30, 0x35	; 53
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	8f 7d       	andi	r24, 0xDF	; 223
 26e:	8c 93       	st	X, r24
	 PORTG = 0x02;
 270:	e5 e6       	ldi	r30, 0x65	; 101
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	80 83       	st	Z, r24
	 delay(2000);
 278:	80 ed       	ldi	r24, 0xD0	; 208
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	0e 94 b5 00 	call	0x16a	; 0x16a <delay>
 280:	d3 cf       	rjmp	.-90     	; 0x228 <main+0x60>

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
