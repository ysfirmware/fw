
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000052a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000071  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000017f  00000000  00000000  0000060f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b2  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000032b  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000100  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
  b6:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:

#define MOTOR_PORT		PORTC
#define MOTOR_PORT_DDR	DDRC

void port_init(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
  c6:	eb e3       	ldi	r30, 0x3B	; 59
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
 DDRA  = 0x00;
  cc:	ea e3       	ldi	r30, 0x3A	; 58
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
 PORTB = 0x00;
  d2:	e8 e3       	ldi	r30, 0x38	; 56
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1
 DDRB  = 0x00;
  d8:	e7 e3       	ldi	r30, 0x37	; 55
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
 PORTC = 0x00; //m103 output only
  de:	e5 e3       	ldi	r30, 0x35	; 53
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
 DDRC  = 0xff;
  e4:	e4 e3       	ldi	r30, 0x34	; 52
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	80 83       	st	Z, r24
 PORTD = 0x00;
  ec:	e2 e3       	ldi	r30, 0x32	; 50
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	10 82       	st	Z, r1
 DDRD  = 0x00;
  f2:	e1 e3       	ldi	r30, 0x31	; 49
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	10 82       	st	Z, r1
 PORTE = 0x00;
  f8:	e3 e2       	ldi	r30, 0x23	; 35
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
 DDRE  = 0x00;
  fe:	e2 e2       	ldi	r30, 0x22	; 34
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
 PORTF = 0x00;
 104:	e2 e6       	ldi	r30, 0x62	; 98
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	10 82       	st	Z, r1
 DDRF  = 0x00;
 10a:	e1 e6       	ldi	r30, 0x61	; 97
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
 PORTG = 0x00;
 110:	e5 e6       	ldi	r30, 0x65	; 101
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
 DDRG  = 0x00;
 116:	e4 e6       	ldi	r30, 0x64	; 100
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	10 82       	st	Z, r1
}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 12a:	f8 94       	cli
 XMCRA = 0x00; //external memory
 12c:	ed e6       	ldi	r30, 0x6D	; 109
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	10 82       	st	Z, r1
 XMCRB = 0x00; //external memory
 132:	ec e6       	ldi	r30, 0x6C	; 108
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	10 82       	st	Z, r1
 port_init();
 138:	0e 94 5f 00 	call	0xbe	; 0xbe <port_init>
 
 MCUCR = 0x00;
 13c:	e5 e5       	ldi	r30, 0x55	; 85
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 142:	ea e6       	ldi	r30, 0x6A	; 106
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 82       	st	Z, r1
 EICRB = 0x00; //extended ext ints
 148:	ea e5       	ldi	r30, 0x5A	; 90
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	10 82       	st	Z, r1
 EIMSK = 0x00;
 14e:	e9 e5       	ldi	r30, 0x59	; 89
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	10 82       	st	Z, r1
 TIMSK = 0x00; //timer interrupt sources
 154:	e7 e5       	ldi	r30, 0x57	; 87
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	10 82       	st	Z, r1
 ETIMSK = 0x00; //extended timer interrupt sources
 15a:	ed e7       	ldi	r30, 0x7D	; 125
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	10 82       	st	Z, r1
 sei(); //re-enable interrupts
 160:	78 94       	sei
 //all peripherals are now initialized
}
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	08 95       	ret

00000168 <LEFTmotorOneClock>:


/* Stepping Motor derive---------------------------*/
unsigned char  LEFTmotorOneClock(unsigned char step, char dir)
{	
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	00 d0       	rcall	.+0      	; 0x16e <LEFTmotorOneClock+0x6>
 16e:	00 d0       	rcall	.+0      	; 0x170 <LEFTmotorOneClock+0x8>
 170:	00 d0       	rcall	.+0      	; 0x172 <LEFTmotorOneClock+0xa>
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	89 83       	std	Y+1, r24	; 0x01
 178:	6a 83       	std	Y+2, r22	; 0x02
	step = step & 0x0f;
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	8f 70       	andi	r24, 0x0F	; 15
 17e:	89 83       	std	Y+1, r24	; 0x01
	if(dir){
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	88 23       	and	r24, r24
 184:	09 f4       	brne	.+2      	; 0x188 <LEFTmotorOneClock+0x20>
 186:	56 c0       	rjmp	.+172    	; 0x234 <LEFTmotorOneClock+0xcc>
		switch(step){
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	3e 83       	std	Y+6, r19	; 0x06
 190:	2d 83       	std	Y+5, r18	; 0x05
 192:	8d 81       	ldd	r24, Y+5	; 0x05
 194:	9e 81       	ldd	r25, Y+6	; 0x06
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	91 05       	cpc	r25, r1
 19a:	09 f4       	brne	.+2      	; 0x19e <LEFTmotorOneClock+0x36>
 19c:	3f c0       	rjmp	.+126    	; 0x21c <LEFTmotorOneClock+0xb4>
 19e:	2d 81       	ldd	r18, Y+5	; 0x05
 1a0:	3e 81       	ldd	r19, Y+6	; 0x06
 1a2:	25 30       	cpi	r18, 0x05	; 5
 1a4:	31 05       	cpc	r19, r1
 1a6:	84 f4       	brge	.+32     	; 0x1c8 <LEFTmotorOneClock+0x60>
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	91 05       	cpc	r25, r1
 1b0:	79 f1       	breq	.+94     	; 0x210 <LEFTmotorOneClock+0xa8>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	23 30       	cpi	r18, 0x03	; 3
 1b8:	31 05       	cpc	r19, r1
 1ba:	3c f5       	brge	.+78     	; 0x20a <LEFTmotorOneClock+0xa2>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 05       	cpc	r25, r1
 1c4:	f9 f0       	breq	.+62     	; 0x204 <LEFTmotorOneClock+0x9c>
 1c6:	33 c0       	rjmp	.+102    	; 0x22e <LEFTmotorOneClock+0xc6>
 1c8:	2d 81       	ldd	r18, Y+5	; 0x05
 1ca:	3e 81       	ldd	r19, Y+6	; 0x06
 1cc:	28 30       	cpi	r18, 0x08	; 8
 1ce:	31 05       	cpc	r19, r1
 1d0:	59 f1       	breq	.+86     	; 0x228 <LEFTmotorOneClock+0xc0>
 1d2:	8d 81       	ldd	r24, Y+5	; 0x05
 1d4:	9e 81       	ldd	r25, Y+6	; 0x06
 1d6:	89 30       	cpi	r24, 0x09	; 9
 1d8:	91 05       	cpc	r25, r1
 1da:	34 f4       	brge	.+12     	; 0x1e8 <LEFTmotorOneClock+0x80>
 1dc:	2d 81       	ldd	r18, Y+5	; 0x05
 1de:	3e 81       	ldd	r19, Y+6	; 0x06
 1e0:	26 30       	cpi	r18, 0x06	; 6
 1e2:	31 05       	cpc	r19, r1
 1e4:	c1 f0       	breq	.+48     	; 0x216 <LEFTmotorOneClock+0xae>
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <LEFTmotorOneClock+0xc6>
 1e8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ea:	9e 81       	ldd	r25, Y+6	; 0x06
 1ec:	89 30       	cpi	r24, 0x09	; 9
 1ee:	91 05       	cpc	r25, r1
 1f0:	31 f0       	breq	.+12     	; 0x1fe <LEFTmotorOneClock+0x96>
 1f2:	2d 81       	ldd	r18, Y+5	; 0x05
 1f4:	3e 81       	ldd	r19, Y+6	; 0x06
 1f6:	2c 30       	cpi	r18, 0x0C	; 12
 1f8:	31 05       	cpc	r19, r1
 1fa:	99 f0       	breq	.+38     	; 0x222 <LEFTmotorOneClock+0xba>
 1fc:	18 c0       	rjmp	.+48     	; 0x22e <LEFTmotorOneClock+0xc6>
			case 0x09: step=0x01; break;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	6d c0       	rjmp	.+218    	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x01: step=0x03; break;
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	6a c0       	rjmp	.+212    	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x03: step=0x02; break;
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	67 c0       	rjmp	.+206    	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x02: step=0x06; break;
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	64 c0       	rjmp	.+200    	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x06: step=0x04; break;
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	61 c0       	rjmp	.+194    	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x04: step=0x0c; break;
 21c:	8c e0       	ldi	r24, 0x0C	; 12
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	5e c0       	rjmp	.+188    	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x0c: step=0x08; break;
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	89 83       	std	Y+1, r24	; 0x01
 226:	5b c0       	rjmp	.+182    	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x08: step=0x09; break;
 228:	89 e0       	ldi	r24, 0x09	; 9
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	58 c0       	rjmp	.+176    	; 0x2de <LEFTmotorOneClock+0x176>
			default: step=0x0c; break;
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	89 83       	std	Y+1, r24	; 0x01
 232:	55 c0       	rjmp	.+170    	; 0x2de <LEFTmotorOneClock+0x176>
		}
	}else{
		switch(step){
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	3c 83       	std	Y+4, r19	; 0x04
 23c:	2b 83       	std	Y+3, r18	; 0x03
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	9c 81       	ldd	r25, Y+4	; 0x04
 242:	84 30       	cpi	r24, 0x04	; 4
 244:	91 05       	cpc	r25, r1
 246:	09 f4       	brne	.+2      	; 0x24a <LEFTmotorOneClock+0xe2>
 248:	3f c0       	rjmp	.+126    	; 0x2c8 <LEFTmotorOneClock+0x160>
 24a:	2b 81       	ldd	r18, Y+3	; 0x03
 24c:	3c 81       	ldd	r19, Y+4	; 0x04
 24e:	25 30       	cpi	r18, 0x05	; 5
 250:	31 05       	cpc	r19, r1
 252:	84 f4       	brge	.+32     	; 0x274 <LEFTmotorOneClock+0x10c>
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	9c 81       	ldd	r25, Y+4	; 0x04
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	91 05       	cpc	r25, r1
 25c:	79 f1       	breq	.+94     	; 0x2bc <LEFTmotorOneClock+0x154>
 25e:	2b 81       	ldd	r18, Y+3	; 0x03
 260:	3c 81       	ldd	r19, Y+4	; 0x04
 262:	23 30       	cpi	r18, 0x03	; 3
 264:	31 05       	cpc	r19, r1
 266:	3c f5       	brge	.+78     	; 0x2b6 <LEFTmotorOneClock+0x14e>
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	9c 81       	ldd	r25, Y+4	; 0x04
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 05       	cpc	r25, r1
 270:	f9 f0       	breq	.+62     	; 0x2b0 <LEFTmotorOneClock+0x148>
 272:	33 c0       	rjmp	.+102    	; 0x2da <LEFTmotorOneClock+0x172>
 274:	2b 81       	ldd	r18, Y+3	; 0x03
 276:	3c 81       	ldd	r19, Y+4	; 0x04
 278:	28 30       	cpi	r18, 0x08	; 8
 27a:	31 05       	cpc	r19, r1
 27c:	59 f1       	breq	.+86     	; 0x2d4 <LEFTmotorOneClock+0x16c>
 27e:	8b 81       	ldd	r24, Y+3	; 0x03
 280:	9c 81       	ldd	r25, Y+4	; 0x04
 282:	89 30       	cpi	r24, 0x09	; 9
 284:	91 05       	cpc	r25, r1
 286:	34 f4       	brge	.+12     	; 0x294 <LEFTmotorOneClock+0x12c>
 288:	2b 81       	ldd	r18, Y+3	; 0x03
 28a:	3c 81       	ldd	r19, Y+4	; 0x04
 28c:	26 30       	cpi	r18, 0x06	; 6
 28e:	31 05       	cpc	r19, r1
 290:	c1 f0       	breq	.+48     	; 0x2c2 <LEFTmotorOneClock+0x15a>
 292:	23 c0       	rjmp	.+70     	; 0x2da <LEFTmotorOneClock+0x172>
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	9c 81       	ldd	r25, Y+4	; 0x04
 298:	89 30       	cpi	r24, 0x09	; 9
 29a:	91 05       	cpc	r25, r1
 29c:	31 f0       	breq	.+12     	; 0x2aa <LEFTmotorOneClock+0x142>
 29e:	2b 81       	ldd	r18, Y+3	; 0x03
 2a0:	3c 81       	ldd	r19, Y+4	; 0x04
 2a2:	2c 30       	cpi	r18, 0x0C	; 12
 2a4:	31 05       	cpc	r19, r1
 2a6:	99 f0       	breq	.+38     	; 0x2ce <LEFTmotorOneClock+0x166>
 2a8:	18 c0       	rjmp	.+48     	; 0x2da <LEFTmotorOneClock+0x172>
			case 0x09: step=0x08; break;
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	89 83       	std	Y+1, r24	; 0x01
 2ae:	17 c0       	rjmp	.+46     	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x01: step=0x09; break;
 2b0:	89 e0       	ldi	r24, 0x09	; 9
 2b2:	89 83       	std	Y+1, r24	; 0x01
 2b4:	14 c0       	rjmp	.+40     	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x03: step=0x01; break;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	11 c0       	rjmp	.+34     	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x02: step=0x03; break;
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	0e c0       	rjmp	.+28     	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x06: step=0x02; break;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	0b c0       	rjmp	.+22     	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x04: step=0x06; break;
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	89 83       	std	Y+1, r24	; 0x01
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x0c: step=0x04; break;
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <LEFTmotorOneClock+0x176>
			case 0x08: step=0x0c; break;
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	89 83       	std	Y+1, r24	; 0x01
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <LEFTmotorOneClock+0x176>
			default: step=0x0c; break;
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return step;
 2de:	89 81       	ldd	r24, Y+1	; 0x01

}
 2e0:	26 96       	adiw	r28, 0x06	; 6
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
 2ec:	cf 91       	pop	r28
 2ee:	df 91       	pop	r29
 2f0:	08 95       	ret

000002f2 <RIGHTmotorOneClock>:

/* Stepping Motor derive---------------------------*/
unsigned char  RIGHTmotorOneClock(unsigned char step, char dir)
{	
 2f2:	df 93       	push	r29
 2f4:	cf 93       	push	r28
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <RIGHTmotorOneClock+0x6>
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <RIGHTmotorOneClock+0x8>
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <RIGHTmotorOneClock+0xa>
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	6a 83       	std	Y+2, r22	; 0x02
	step = step & 0xf0;
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	80 7f       	andi	r24, 0xF0	; 240
 308:	89 83       	std	Y+1, r24	; 0x01
	if(dir){
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	88 23       	and	r24, r24
 30e:	09 f4       	brne	.+2      	; 0x312 <RIGHTmotorOneClock+0x20>
 310:	56 c0       	rjmp	.+172    	; 0x3be <RIGHTmotorOneClock+0xcc>
		switch(step){
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	3e 83       	std	Y+6, r19	; 0x06
 31a:	2d 83       	std	Y+5, r18	; 0x05
 31c:	8d 81       	ldd	r24, Y+5	; 0x05
 31e:	9e 81       	ldd	r25, Y+6	; 0x06
 320:	80 34       	cpi	r24, 0x40	; 64
 322:	91 05       	cpc	r25, r1
 324:	09 f4       	brne	.+2      	; 0x328 <RIGHTmotorOneClock+0x36>
 326:	3f c0       	rjmp	.+126    	; 0x3a6 <RIGHTmotorOneClock+0xb4>
 328:	2d 81       	ldd	r18, Y+5	; 0x05
 32a:	3e 81       	ldd	r19, Y+6	; 0x06
 32c:	21 34       	cpi	r18, 0x41	; 65
 32e:	31 05       	cpc	r19, r1
 330:	84 f4       	brge	.+32     	; 0x352 <RIGHTmotorOneClock+0x60>
 332:	8d 81       	ldd	r24, Y+5	; 0x05
 334:	9e 81       	ldd	r25, Y+6	; 0x06
 336:	80 32       	cpi	r24, 0x20	; 32
 338:	91 05       	cpc	r25, r1
 33a:	79 f1       	breq	.+94     	; 0x39a <RIGHTmotorOneClock+0xa8>
 33c:	2d 81       	ldd	r18, Y+5	; 0x05
 33e:	3e 81       	ldd	r19, Y+6	; 0x06
 340:	20 33       	cpi	r18, 0x30	; 48
 342:	31 05       	cpc	r19, r1
 344:	39 f1       	breq	.+78     	; 0x394 <RIGHTmotorOneClock+0xa2>
 346:	8d 81       	ldd	r24, Y+5	; 0x05
 348:	9e 81       	ldd	r25, Y+6	; 0x06
 34a:	80 31       	cpi	r24, 0x10	; 16
 34c:	91 05       	cpc	r25, r1
 34e:	f9 f0       	breq	.+62     	; 0x38e <RIGHTmotorOneClock+0x9c>
 350:	33 c0       	rjmp	.+102    	; 0x3b8 <RIGHTmotorOneClock+0xc6>
 352:	2d 81       	ldd	r18, Y+5	; 0x05
 354:	3e 81       	ldd	r19, Y+6	; 0x06
 356:	20 38       	cpi	r18, 0x80	; 128
 358:	31 05       	cpc	r19, r1
 35a:	59 f1       	breq	.+86     	; 0x3b2 <RIGHTmotorOneClock+0xc0>
 35c:	8d 81       	ldd	r24, Y+5	; 0x05
 35e:	9e 81       	ldd	r25, Y+6	; 0x06
 360:	81 38       	cpi	r24, 0x81	; 129
 362:	91 05       	cpc	r25, r1
 364:	34 f4       	brge	.+12     	; 0x372 <RIGHTmotorOneClock+0x80>
 366:	2d 81       	ldd	r18, Y+5	; 0x05
 368:	3e 81       	ldd	r19, Y+6	; 0x06
 36a:	20 36       	cpi	r18, 0x60	; 96
 36c:	31 05       	cpc	r19, r1
 36e:	c1 f0       	breq	.+48     	; 0x3a0 <RIGHTmotorOneClock+0xae>
 370:	23 c0       	rjmp	.+70     	; 0x3b8 <RIGHTmotorOneClock+0xc6>
 372:	8d 81       	ldd	r24, Y+5	; 0x05
 374:	9e 81       	ldd	r25, Y+6	; 0x06
 376:	80 39       	cpi	r24, 0x90	; 144
 378:	91 05       	cpc	r25, r1
 37a:	31 f0       	breq	.+12     	; 0x388 <RIGHTmotorOneClock+0x96>
 37c:	2d 81       	ldd	r18, Y+5	; 0x05
 37e:	3e 81       	ldd	r19, Y+6	; 0x06
 380:	20 3c       	cpi	r18, 0xC0	; 192
 382:	31 05       	cpc	r19, r1
 384:	99 f0       	breq	.+38     	; 0x3ac <RIGHTmotorOneClock+0xba>
 386:	18 c0       	rjmp	.+48     	; 0x3b8 <RIGHTmotorOneClock+0xc6>
			case 0x90: step=0x10; break;
 388:	80 e1       	ldi	r24, 0x10	; 16
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	6d c0       	rjmp	.+218    	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x10: step=0x30; break;
 38e:	80 e3       	ldi	r24, 0x30	; 48
 390:	89 83       	std	Y+1, r24	; 0x01
 392:	6a c0       	rjmp	.+212    	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x30: step=0x20; break;
 394:	80 e2       	ldi	r24, 0x20	; 32
 396:	89 83       	std	Y+1, r24	; 0x01
 398:	67 c0       	rjmp	.+206    	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x20: step=0x60; break;
 39a:	80 e6       	ldi	r24, 0x60	; 96
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	64 c0       	rjmp	.+200    	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x60: step=0x40; break;
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	89 83       	std	Y+1, r24	; 0x01
 3a4:	61 c0       	rjmp	.+194    	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x40: step=0xc0; break;
 3a6:	80 ec       	ldi	r24, 0xC0	; 192
 3a8:	89 83       	std	Y+1, r24	; 0x01
 3aa:	5e c0       	rjmp	.+188    	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0xc0: step=0x80; break;
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	89 83       	std	Y+1, r24	; 0x01
 3b0:	5b c0       	rjmp	.+182    	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x80: step=0x90; break;
 3b2:	80 e9       	ldi	r24, 0x90	; 144
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	58 c0       	rjmp	.+176    	; 0x468 <RIGHTmotorOneClock+0x176>
			default: step=0xc0; break;
 3b8:	80 ec       	ldi	r24, 0xC0	; 192
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	55 c0       	rjmp	.+170    	; 0x468 <RIGHTmotorOneClock+0x176>
		}
	}else{
		switch(step){
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	3c 83       	std	Y+4, r19	; 0x04
 3c6:	2b 83       	std	Y+3, r18	; 0x03
 3c8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ca:	9c 81       	ldd	r25, Y+4	; 0x04
 3cc:	80 34       	cpi	r24, 0x40	; 64
 3ce:	91 05       	cpc	r25, r1
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <RIGHTmotorOneClock+0xe2>
 3d2:	3f c0       	rjmp	.+126    	; 0x452 <RIGHTmotorOneClock+0x160>
 3d4:	2b 81       	ldd	r18, Y+3	; 0x03
 3d6:	3c 81       	ldd	r19, Y+4	; 0x04
 3d8:	21 34       	cpi	r18, 0x41	; 65
 3da:	31 05       	cpc	r19, r1
 3dc:	84 f4       	brge	.+32     	; 0x3fe <RIGHTmotorOneClock+0x10c>
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	9c 81       	ldd	r25, Y+4	; 0x04
 3e2:	80 32       	cpi	r24, 0x20	; 32
 3e4:	91 05       	cpc	r25, r1
 3e6:	79 f1       	breq	.+94     	; 0x446 <RIGHTmotorOneClock+0x154>
 3e8:	2b 81       	ldd	r18, Y+3	; 0x03
 3ea:	3c 81       	ldd	r19, Y+4	; 0x04
 3ec:	20 33       	cpi	r18, 0x30	; 48
 3ee:	31 05       	cpc	r19, r1
 3f0:	39 f1       	breq	.+78     	; 0x440 <RIGHTmotorOneClock+0x14e>
 3f2:	8b 81       	ldd	r24, Y+3	; 0x03
 3f4:	9c 81       	ldd	r25, Y+4	; 0x04
 3f6:	80 31       	cpi	r24, 0x10	; 16
 3f8:	91 05       	cpc	r25, r1
 3fa:	f9 f0       	breq	.+62     	; 0x43a <RIGHTmotorOneClock+0x148>
 3fc:	33 c0       	rjmp	.+102    	; 0x464 <RIGHTmotorOneClock+0x172>
 3fe:	2b 81       	ldd	r18, Y+3	; 0x03
 400:	3c 81       	ldd	r19, Y+4	; 0x04
 402:	20 38       	cpi	r18, 0x80	; 128
 404:	31 05       	cpc	r19, r1
 406:	59 f1       	breq	.+86     	; 0x45e <RIGHTmotorOneClock+0x16c>
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	9c 81       	ldd	r25, Y+4	; 0x04
 40c:	81 38       	cpi	r24, 0x81	; 129
 40e:	91 05       	cpc	r25, r1
 410:	34 f4       	brge	.+12     	; 0x41e <RIGHTmotorOneClock+0x12c>
 412:	2b 81       	ldd	r18, Y+3	; 0x03
 414:	3c 81       	ldd	r19, Y+4	; 0x04
 416:	20 36       	cpi	r18, 0x60	; 96
 418:	31 05       	cpc	r19, r1
 41a:	c1 f0       	breq	.+48     	; 0x44c <RIGHTmotorOneClock+0x15a>
 41c:	23 c0       	rjmp	.+70     	; 0x464 <RIGHTmotorOneClock+0x172>
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	9c 81       	ldd	r25, Y+4	; 0x04
 422:	80 39       	cpi	r24, 0x90	; 144
 424:	91 05       	cpc	r25, r1
 426:	31 f0       	breq	.+12     	; 0x434 <RIGHTmotorOneClock+0x142>
 428:	2b 81       	ldd	r18, Y+3	; 0x03
 42a:	3c 81       	ldd	r19, Y+4	; 0x04
 42c:	20 3c       	cpi	r18, 0xC0	; 192
 42e:	31 05       	cpc	r19, r1
 430:	99 f0       	breq	.+38     	; 0x458 <RIGHTmotorOneClock+0x166>
 432:	18 c0       	rjmp	.+48     	; 0x464 <RIGHTmotorOneClock+0x172>
			case 0x90: step=0x80; break;
 434:	80 e8       	ldi	r24, 0x80	; 128
 436:	89 83       	std	Y+1, r24	; 0x01
 438:	17 c0       	rjmp	.+46     	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x10: step=0x90; break;
 43a:	80 e9       	ldi	r24, 0x90	; 144
 43c:	89 83       	std	Y+1, r24	; 0x01
 43e:	14 c0       	rjmp	.+40     	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x30: step=0x10; break;
 440:	80 e1       	ldi	r24, 0x10	; 16
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	11 c0       	rjmp	.+34     	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x20: step=0x30; break;
 446:	80 e3       	ldi	r24, 0x30	; 48
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	0e c0       	rjmp	.+28     	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x60: step=0x20; break;
 44c:	80 e2       	ldi	r24, 0x20	; 32
 44e:	89 83       	std	Y+1, r24	; 0x01
 450:	0b c0       	rjmp	.+22     	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x40: step=0x60; break;
 452:	80 e6       	ldi	r24, 0x60	; 96
 454:	89 83       	std	Y+1, r24	; 0x01
 456:	08 c0       	rjmp	.+16     	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0xc0: step=0x40; break;
 458:	80 e4       	ldi	r24, 0x40	; 64
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	05 c0       	rjmp	.+10     	; 0x468 <RIGHTmotorOneClock+0x176>
			case 0x80: step=0xc0; break;
 45e:	80 ec       	ldi	r24, 0xC0	; 192
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	02 c0       	rjmp	.+4      	; 0x468 <RIGHTmotorOneClock+0x176>
			default: step=0xc0; break;
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return step;
 468:	89 81       	ldd	r24, Y+1	; 0x01
}
 46a:	26 96       	adiw	r28, 0x06	; 6
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <delay>:


void delay(int n)
{
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	00 d0       	rcall	.+0      	; 0x482 <delay+0x6>
 482:	00 d0       	rcall	.+0      	; 0x484 <delay+0x8>
 484:	00 d0       	rcall	.+0      	; 0x486 <delay+0xa>
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	9e 83       	std	Y+6, r25	; 0x06
 48c:	8d 83       	std	Y+5, r24	; 0x05
	volatile int i,j;
	for(i=1;i<n;i++)
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	9a 83       	std	Y+2, r25	; 0x02
 494:	89 83       	std	Y+1, r24	; 0x01
 496:	15 c0       	rjmp	.+42     	; 0x4c2 <delay+0x46>
	{
    	for(j=1;j<1000;j++);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	9c 83       	std	Y+4, r25	; 0x04
 49e:	8b 83       	std	Y+3, r24	; 0x03
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <delay+0x30>
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	9c 81       	ldd	r25, Y+4	; 0x04
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	9c 83       	std	Y+4, r25	; 0x04
 4aa:	8b 83       	std	Y+3, r24	; 0x03
 4ac:	8b 81       	ldd	r24, Y+3	; 0x03
 4ae:	9c 81       	ldd	r25, Y+4	; 0x04
 4b0:	23 e0       	ldi	r18, 0x03	; 3
 4b2:	88 3e       	cpi	r24, 0xE8	; 232
 4b4:	92 07       	cpc	r25, r18
 4b6:	ac f3       	brlt	.-22     	; 0x4a2 <delay+0x26>


void delay(int n)
{
	volatile int i,j;
	for(i=1;i<n;i++)
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	9a 81       	ldd	r25, Y+2	; 0x02
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	9a 83       	std	Y+2, r25	; 0x02
 4c0:	89 83       	std	Y+1, r24	; 0x01
 4c2:	29 81       	ldd	r18, Y+1	; 0x01
 4c4:	3a 81       	ldd	r19, Y+2	; 0x02
 4c6:	8d 81       	ldd	r24, Y+5	; 0x05
 4c8:	9e 81       	ldd	r25, Y+6	; 0x06
 4ca:	28 17       	cp	r18, r24
 4cc:	39 07       	cpc	r19, r25
 4ce:	24 f3       	brlt	.-56     	; 0x498 <delay+0x1c>
	{
    	for(j=1;j<1000;j++);
	}
}
 4d0:	26 96       	adiw	r28, 0x06	; 6
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	cf 91       	pop	r28
 4de:	df 91       	pop	r29
 4e0:	08 95       	ret

000004e2 <main>:

//
int main(void)
{
 4e2:	df 93       	push	r29
 4e4:	cf 93       	push	r28
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <main+0x6>
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 volatile unsigned char stepleft=0, stepright=0;
 4ec:	19 82       	std	Y+1, r1	; 0x01
 4ee:	1a 82       	std	Y+2, r1	; 0x02
 
 init_devices();
 4f0:	0e 94 91 00 	call	0x122	; 0x122 <init_devices>
 //insert your functional code here...
 

 MOTOR_PORT_DDR = 0xff;
 4f4:	e4 e3       	ldi	r30, 0x34	; 52
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	80 83       	st	Z, r24
 while(1){
		stepright = RIGHTmotorOneClock(stepright, 1);
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	0e 94 79 01 	call	0x2f2	; 0x2f2 <RIGHTmotorOneClock>
 504:	8a 83       	std	Y+2, r24	; 0x02
	    stepleft = LEFTmotorOneClock(stepleft, 0);
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	0e 94 b4 00 	call	0x168	; 0x168 <LEFTmotorOneClock>
 50e:	89 83       	std	Y+1, r24	; 0x01
		delay(3);
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 3e 02 	call	0x47c	; 0x47c <delay>
		MOTOR_PORT = stepleft|stepright;
 518:	e5 e3       	ldi	r30, 0x35	; 53
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	99 81       	ldd	r25, Y+1	; 0x01
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	89 2b       	or	r24, r25
 522:	80 83       	st	Z, r24
 524:	eb cf       	rjmp	.-42     	; 0x4fc <main+0x1a>

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
