
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000228  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000044  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000e0  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000092  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b3  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a4  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  b6:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:

#define MOTOR_PORT		PORTC
#define MOTOR_PORT_DDR	DDRC

void port_init(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
  c6:	eb e3       	ldi	r30, 0x3B	; 59
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
 DDRA  = 0x00;
  cc:	ea e3       	ldi	r30, 0x3A	; 58
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
 PORTB = 0x00;
  d2:	e8 e3       	ldi	r30, 0x38	; 56
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1
 DDRB  = 0x00;
  d8:	e7 e3       	ldi	r30, 0x37	; 55
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
 PORTC = 0x00; //m103 output only
  de:	e5 e3       	ldi	r30, 0x35	; 53
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
 DDRC  = 0xff;
  e4:	e4 e3       	ldi	r30, 0x34	; 52
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	80 83       	st	Z, r24
 PORTD = 0x00;
  ec:	e2 e3       	ldi	r30, 0x32	; 50
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	10 82       	st	Z, r1
 DDRD  = 0x00;
  f2:	e1 e3       	ldi	r30, 0x31	; 49
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	10 82       	st	Z, r1
 PORTE = 0x00;
  f8:	e3 e2       	ldi	r30, 0x23	; 35
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
 DDRE  = 0x00;
  fe:	e2 e2       	ldi	r30, 0x22	; 34
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
 PORTF = 0x00;
 104:	e2 e6       	ldi	r30, 0x62	; 98
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	10 82       	st	Z, r1
 DDRF  = 0x00;
 10a:	e1 e6       	ldi	r30, 0x61	; 97
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
 PORTG = 0x00;
 110:	e5 e6       	ldi	r30, 0x65	; 101
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
 DDRG  = 0x00;
 116:	e4 e6       	ldi	r30, 0x64	; 100
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	10 82       	st	Z, r1
}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 12a:	f8 94       	cli
 XMCRA = 0x00; //external memory
 12c:	ed e6       	ldi	r30, 0x6D	; 109
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	10 82       	st	Z, r1
 XMCRB = 0x00; //external memory
 132:	ec e6       	ldi	r30, 0x6C	; 108
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	10 82       	st	Z, r1
 port_init();
 138:	0e 94 5f 00 	call	0xbe	; 0xbe <port_init>

 MCUCR = 0x00;
 13c:	e5 e5       	ldi	r30, 0x55	; 85
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 142:	ea e6       	ldi	r30, 0x6A	; 106
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 82       	st	Z, r1
 EICRB = 0x00; //extended ext ints
 148:	ea e5       	ldi	r30, 0x5A	; 90
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	10 82       	st	Z, r1
 EIMSK = 0x00;
 14e:	e9 e5       	ldi	r30, 0x59	; 89
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	10 82       	st	Z, r1
 TIMSK = 0x00; //timer interrupt sources
 154:	e7 e5       	ldi	r30, 0x57	; 87
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	10 82       	st	Z, r1
 ETIMSK = 0x00; //extended timer interrupt sources
 15a:	ed e7       	ldi	r30, 0x7D	; 125
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	10 82       	st	Z, r1
 
 sei(); //re-enable interrupts
 160:	78 94       	sei
 //all peripherals are now initialized
}
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	08 95       	ret

00000168 <delay>:

void delay(int n)
{
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	00 d0       	rcall	.+0      	; 0x16e <delay+0x6>
 16e:	00 d0       	rcall	.+0      	; 0x170 <delay+0x8>
 170:	00 d0       	rcall	.+0      	; 0x172 <delay+0xa>
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	9e 83       	std	Y+6, r25	; 0x06
 178:	8d 83       	std	Y+5, r24	; 0x05
	volatile int i,j;
	for(i=1;i<n;i++)
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	89 83       	std	Y+1, r24	; 0x01
 182:	15 c0       	rjmp	.+42     	; 0x1ae <delay+0x46>
	{
    	for(j=1;j<600;j++);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9c 83       	std	Y+4, r25	; 0x04
 18a:	8b 83       	std	Y+3, r24	; 0x03
 18c:	05 c0       	rjmp	.+10     	; 0x198 <delay+0x30>
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	9c 81       	ldd	r25, Y+4	; 0x04
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	9c 83       	std	Y+4, r25	; 0x04
 196:	8b 83       	std	Y+3, r24	; 0x03
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	9c 81       	ldd	r25, Y+4	; 0x04
 19c:	22 e0       	ldi	r18, 0x02	; 2
 19e:	88 35       	cpi	r24, 0x58	; 88
 1a0:	92 07       	cpc	r25, r18
 1a2:	ac f3       	brlt	.-22     	; 0x18e <delay+0x26>
}

void delay(int n)
{
	volatile int i,j;
	for(i=1;i<n;i++)
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	9a 81       	ldd	r25, Y+2	; 0x02
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	9a 83       	std	Y+2, r25	; 0x02
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	29 81       	ldd	r18, Y+1	; 0x01
 1b0:	3a 81       	ldd	r19, Y+2	; 0x02
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	9e 81       	ldd	r25, Y+6	; 0x06
 1b6:	28 17       	cp	r18, r24
 1b8:	39 07       	cpc	r19, r25
 1ba:	24 f3       	brlt	.-56     	; 0x184 <delay+0x1c>
	{
    	for(j=1;j<600;j++);
	}
}
 1bc:	26 96       	adiw	r28, 0x06	; 6
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	cf 91       	pop	r28
 1ca:	df 91       	pop	r29
 1cc:	08 95       	ret

000001ce <main>:

int main(void)
{
 1ce:	df 93       	push	r29
 1d0:	cf 93       	push	r28
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 init_devices();
 1d6:	0e 94 91 00 	call	0x122	; 0x122 <init_devices>
 
MOTOR_PORT_DDR = 0xff;
 1da:	e4 e3       	ldi	r30, 0x34	; 52
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 83       	st	Z, r24
    
	while(1){
		MOTOR_PORT = 0x33;
 1e2:	e5 e3       	ldi	r30, 0x35	; 53
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	80 83       	st	Z, r24
		delay(4);
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 b4 00 	call	0x168	; 0x168 <delay>
		MOTOR_PORT = 0x66;
 1f2:	e5 e3       	ldi	r30, 0x35	; 53
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	86 e6       	ldi	r24, 0x66	; 102
 1f8:	80 83       	st	Z, r24
		delay(4);
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 b4 00 	call	0x168	; 0x168 <delay>
		MOTOR_PORT = 0xcc;
 202:	e5 e3       	ldi	r30, 0x35	; 53
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	8c ec       	ldi	r24, 0xCC	; 204
 208:	80 83       	st	Z, r24
		delay(4);
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 b4 00 	call	0x168	; 0x168 <delay>
		MOTOR_PORT = 0x99;
 212:	e5 e3       	ldi	r30, 0x35	; 53
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	89 e9       	ldi	r24, 0x99	; 153
 218:	80 83       	st	Z, r24
		delay(4);		
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 b4 00 	call	0x168	; 0x168 <delay>
 222:	df cf       	rjmp	.-66     	; 0x1e2 <main+0x14>

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
