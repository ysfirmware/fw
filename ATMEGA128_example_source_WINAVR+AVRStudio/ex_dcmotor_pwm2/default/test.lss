
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007f2  00000886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800102  00800102  00000888  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000124  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000235  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000cf  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a3  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012c  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 32       	cpi	r26, 0x2D	; 45
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 28 02 	call	0x450	; 0x450 <main>
  c6:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <port_init>:
volatile unsigned int DCMOTOR[8], sw_state[8]={0,0,0,0,0,0,0,0};
volatile unsigned int Tcount=0,T2_count=0;
volatile unsigned int motor_speed,motor2_speed;

void port_init(void)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
  d6:	eb e3       	ldi	r30, 0x3B	; 59
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
 DDRA  = 0x00;
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
 PORTB = 0x00;
  e2:	e8 e3       	ldi	r30, 0x38	; 56
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
 DDRB  = 0x00;
  e8:	e7 e3       	ldi	r30, 0x37	; 55
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
 PORTC = 0x00; //m103 output only
  ee:	e5 e3       	ldi	r30, 0x35	; 53
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
 DDRC  = 0xff;
  f4:	e4 e3       	ldi	r30, 0x34	; 52
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	80 83       	st	Z, r24
 PORTD = 0x00;
  fc:	e2 e3       	ldi	r30, 0x32	; 50
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
 DDRD  = 0x00;
 102:	e1 e3       	ldi	r30, 0x31	; 49
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	10 82       	st	Z, r1
 PORTE = 0x00;
 108:	e3 e2       	ldi	r30, 0x23	; 35
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	10 82       	st	Z, r1
 DDRE  = 0x00;
 10e:	e2 e2       	ldi	r30, 0x22	; 34
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
 PORTF = 0x00;
 114:	e2 e6       	ldi	r30, 0x62	; 98
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	10 82       	st	Z, r1
 DDRF  = 0x00;
 11a:	e1 e6       	ldi	r30, 0x61	; 97
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	10 82       	st	Z, r1
 PORTG = 0x00;
 120:	e5 e6       	ldi	r30, 0x65	; 101
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	10 82       	st	Z, r1
 DDRG  = 0x00;
 126:	e4 e6       	ldi	r30, 0x64	; 100
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	10 82       	st	Z, r1
}
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	08 95       	ret

00000132 <timer0_init>:
//TIMER0 initialize - prescale:64
// WGM: Normal
// desired value: 1mSec
// actual value:  1.000mSec (0.0%)
void timer0_init(void)
{
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 TCCR0 = 0x00; //stop
 13a:	e3 e5       	ldi	r30, 0x53	; 83
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	10 82       	st	Z, r1
 ASSR  = 0x00; //set async mode
 140:	e0 e5       	ldi	r30, 0x50	; 80
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	10 82       	st	Z, r1
 TCNT0 = 0x06; //set count
 146:	e2 e5       	ldi	r30, 0x52	; 82
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	80 83       	st	Z, r24
 OCR0  = 0xFA;
 14e:	e1 e5       	ldi	r30, 0x51	; 81
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8a ef       	ldi	r24, 0xFA	; 250
 154:	80 83       	st	Z, r24
 TCCR0 = 0x04; //start timer
 156:	e3 e5       	ldi	r30, 0x53	; 83
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24
}
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	00 90 5b 00 	lds	r0, 0x005B
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 TCNT0 = 0x06; //reload counter value
 182:	e2 e5       	ldi	r30, 0x52	; 82
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 83       	st	Z, r24
 T20ms++;
 18a:	80 91 03 01 	lds	r24, 0x0103
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 03 01 	sts	0x0103, r24
 if(T20ms >= 20)
 194:	80 91 03 01 	lds	r24, 0x0103
 198:	84 31       	cpi	r24, 0x14	; 20
 19a:	30 f0       	brcs	.+12     	; 0x1a8 <__vector_16+0x44>
 {
	T20ms = 0;
 19c:	10 92 03 01 	sts	0x0103, r1
	Tcount = 0;
 1a0:	10 92 16 01 	sts	0x0116, r1
 1a4:	10 92 15 01 	sts	0x0115, r1
 }
 
 T2_20ms++;
 1a8:	80 91 04 01 	lds	r24, 0x0104
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 04 01 	sts	0x0104, r24
 if(T2_20ms >= 20)
 1b2:	80 91 04 01 	lds	r24, 0x0104
 1b6:	84 31       	cpi	r24, 0x14	; 20
 1b8:	30 f0       	brcs	.+12     	; 0x1c6 <__vector_16+0x62>
 {
	T2_20ms = 0;
 1ba:	10 92 04 01 	sts	0x0104, r1
	T2_count = 0;
 1be:	10 92 18 01 	sts	0x0118, r1
 1c2:	10 92 17 01 	sts	0x0117, r1
 }
}
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	00 92 5b 00 	sts	0x005B, r0
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <timer2_init>:
//TIMER2 initialize - prescale:64
// WGM: Normal
// desired value: 100uSec
// actual value: 100.000uSec (0.0%)
void timer2_init(void)
{
 1e0:	df 93       	push	r29
 1e2:	cf 93       	push	r28
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 TCCR2 = 0x00; //stop
 1e8:	e5 e4       	ldi	r30, 0x45	; 69
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	10 82       	st	Z, r1
 TCNT2 = 0xEC; //setup
 1ee:	e4 e4       	ldi	r30, 0x44	; 68
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	8c ee       	ldi	r24, 0xEC	; 236
 1f4:	80 83       	st	Z, r24
 OCR2  = 0x14;
 1f6:	e3 e4       	ldi	r30, 0x43	; 67
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	84 e1       	ldi	r24, 0x14	; 20
 1fc:	80 83       	st	Z, r24
 TCCR2 = 0x02; //start
 1fe:	e5 e4       	ldi	r30, 0x45	; 69
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	80 83       	st	Z, r24
}
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <__vector_10>:

ISR(TIMER2_OVF_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	00 90 5b 00 	lds	r0, 0x005B
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
 22e:	df 93       	push	r29
 230:	cf 93       	push	r28
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 TCNT2 = 0xE7; //reload counter value
 236:	e4 e4       	ldi	r30, 0x44	; 68
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	87 ee       	ldi	r24, 0xE7	; 231
 23c:	80 83       	st	Z, r24
 Tcount++;
 23e:	80 91 15 01 	lds	r24, 0x0115
 242:	90 91 16 01 	lds	r25, 0x0116
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 16 01 	sts	0x0116, r25
 24c:	80 93 15 01 	sts	0x0115, r24
 T2_count++;
 250:	80 91 17 01 	lds	r24, 0x0117
 254:	90 91 18 01 	lds	r25, 0x0118
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	90 93 18 01 	sts	0x0118, r25
 25e:	80 93 17 01 	sts	0x0117, r24
 
 if(DCMOTOR[0]>Tcount)
 262:	20 91 1d 01 	lds	r18, 0x011D
 266:	30 91 1e 01 	lds	r19, 0x011E
 26a:	80 91 15 01 	lds	r24, 0x0115
 26e:	90 91 16 01 	lds	r25, 0x0116
 272:	82 17       	cp	r24, r18
 274:	93 07       	cpc	r25, r19
 276:	a8 f4       	brcc	.+42     	; 0x2a2 <__vector_10+0x96>
    MOTOR_PORT |= (0x01<<num);
 278:	a5 e3       	ldi	r26, 0x35	; 53
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e5 e3       	ldi	r30, 0x35	; 53
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	48 2f       	mov	r20, r24
 284:	80 91 02 01 	lds	r24, 0x0102
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_10+0x8c>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <__vector_10+0x88>
 29c:	84 2b       	or	r24, r20
 29e:	8c 93       	st	X, r24
 2a0:	14 c0       	rjmp	.+40     	; 0x2ca <__vector_10+0xbe>
 else	
 	MOTOR_PORT &= (~(0x01<<num));	
 2a2:	a5 e3       	ldi	r26, 0x35	; 53
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e5 e3       	ldi	r30, 0x35	; 53
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	48 2f       	mov	r20, r24
 2ae:	80 91 02 01 	lds	r24, 0x0102
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__vector_10+0xb4>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	2a 95       	dec	r18
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <__vector_10+0xb0>
 2c4:	80 95       	com	r24
 2c6:	84 23       	and	r24, r20
 2c8:	8c 93       	st	X, r24
	
 if(DCMOTOR[4]>Tcount)
 2ca:	20 91 25 01 	lds	r18, 0x0125
 2ce:	30 91 26 01 	lds	r19, 0x0126
 2d2:	80 91 15 01 	lds	r24, 0x0115
 2d6:	90 91 16 01 	lds	r25, 0x0116
 2da:	82 17       	cp	r24, r18
 2dc:	93 07       	cpc	r25, r19
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <__vector_10+0xe4>
    MOTOR_PORT |= (0x01<<4);
 2e0:	a5 e3       	ldi	r26, 0x35	; 53
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	e5 e3       	ldi	r30, 0x35	; 53
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	80 61       	ori	r24, 0x10	; 16
 2ec:	8c 93       	st	X, r24
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <__vector_10+0xf2>
 else	
 	MOTOR_PORT &= (~(0x01<<4));	
 2f0:	a5 e3       	ldi	r26, 0x35	; 53
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	e5 e3       	ldi	r30, 0x35	; 53
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 7e       	andi	r24, 0xEF	; 239
 2fc:	8c 93       	st	X, r24
}
 2fe:	cf 91       	pop	r28
 300:	df 91       	pop	r29
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	00 92 5b 00 	sts	0x005B, r0
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 324:	df 93       	push	r29
 326:	cf 93       	push	r28
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 32c:	f8 94       	cli
 XMCRA = 0x00; //external memory
 32e:	ed e6       	ldi	r30, 0x6D	; 109
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	10 82       	st	Z, r1
 XMCRB = 0x00; //external memory
 334:	ec e6       	ldi	r30, 0x6C	; 108
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	10 82       	st	Z, r1
 port_init();
 33a:	0e 94 67 00 	call	0xce	; 0xce <port_init>
 timer0_init();
 33e:	0e 94 99 00 	call	0x132	; 0x132 <timer0_init>
 timer2_init();
 342:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <timer2_init>

  MCUCR = 0x00;
 346:	e5 e5       	ldi	r30, 0x55	; 85
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 34c:	ea e6       	ldi	r30, 0x6A	; 106
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	10 82       	st	Z, r1
 EICRB = 0x00; //extended ext ints
 352:	ea e5       	ldi	r30, 0x5A	; 90
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	10 82       	st	Z, r1
 EIMSK = 0x00;
 358:	e9 e5       	ldi	r30, 0x59	; 89
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	10 82       	st	Z, r1
 TIMSK = 0x41; //timer interrupt sources
 35e:	e7 e5       	ldi	r30, 0x57	; 87
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	81 e4       	ldi	r24, 0x41	; 65
 364:	80 83       	st	Z, r24
 ETIMSK = 0x00; //extended timer interrupt sources
 366:	ed e7       	ldi	r30, 0x7D	; 125
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	10 82       	st	Z, r1
 sei(); //re-enable interrupts
 36c:	78 94       	sei
 //all peripherals are now initialized
}
 36e:	cf 91       	pop	r28
 370:	df 91       	pop	r29
 372:	08 95       	ret

00000374 <delay>:

void delay(int cnt)
{
 374:	df 93       	push	r29
 376:	cf 93       	push	r28
 378:	00 d0       	rcall	.+0      	; 0x37a <delay+0x6>
 37a:	00 d0       	rcall	.+0      	; 0x37c <delay+0x8>
 37c:	00 d0       	rcall	.+0      	; 0x37e <delay+0xa>
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	9e 83       	std	Y+6, r25	; 0x06
 384:	8d 83       	std	Y+5, r24	; 0x05
	 unsigned int i, j;
	 for(i=0;i<cnt;i++){
 386:	1c 82       	std	Y+4, r1	; 0x04
 388:	1b 82       	std	Y+3, r1	; 0x03
 38a:	13 c0       	rjmp	.+38     	; 0x3b2 <delay+0x3e>
		for(j=0;j<1000;j++)
 38c:	1a 82       	std	Y+2, r1	; 0x02
 38e:	19 82       	std	Y+1, r1	; 0x01
 390:	05 c0       	rjmp	.+10     	; 0x39c <delay+0x28>
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	9a 81       	ldd	r25, Y+2	; 0x02
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	9a 83       	std	Y+2, r25	; 0x02
 39a:	89 83       	std	Y+1, r24	; 0x01
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	9a 81       	ldd	r25, Y+2	; 0x02
 3a0:	23 e0       	ldi	r18, 0x03	; 3
 3a2:	88 3e       	cpi	r24, 0xE8	; 232
 3a4:	92 07       	cpc	r25, r18
 3a6:	a8 f3       	brcs	.-22     	; 0x392 <delay+0x1e>
}

void delay(int cnt)
{
	 unsigned int i, j;
	 for(i=0;i<cnt;i++){
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	9c 81       	ldd	r25, Y+4	; 0x04
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	9c 83       	std	Y+4, r25	; 0x04
 3b0:	8b 83       	std	Y+3, r24	; 0x03
 3b2:	2d 81       	ldd	r18, Y+5	; 0x05
 3b4:	3e 81       	ldd	r19, Y+6	; 0x06
 3b6:	8b 81       	ldd	r24, Y+3	; 0x03
 3b8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ba:	82 17       	cp	r24, r18
 3bc:	93 07       	cpc	r25, r19
 3be:	30 f3       	brcs	.-52     	; 0x38c <delay+0x18>
		for(j=0;j<1000;j++)
		{
		}
	}
}
 3c0:	26 96       	adiw	r28, 0x06	; 6
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	cf 91       	pop	r28
 3ce:	df 91       	pop	r29
 3d0:	08 95       	ret

000003d2 <motor_init>:

void motor_init(void){
 3d2:	df 93       	push	r29
 3d4:	cf 93       	push	r28
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
	 ENABLE1_ON;
 3da:	a5 e3       	ldi	r26, 0x35	; 53
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	e5 e3       	ldi	r30, 0x35	; 53
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	8b 7f       	andi	r24, 0xFB	; 251
 3e6:	8c 93       	st	X, r24
 	 PWM1_ON;
 3e8:	a5 e3       	ldi	r26, 0x35	; 53
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	e5 e3       	ldi	r30, 0x35	; 53
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	8c 93       	st	X, r24
 	 BREAK1_OFF; 
 3f6:	a5 e3       	ldi	r26, 0x35	; 53
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e5 e3       	ldi	r30, 0x35	; 53
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	87 7f       	andi	r24, 0xF7	; 247
 402:	8c 93       	st	X, r24
	 DIR1_ON;
 404:	a5 e3       	ldi	r26, 0x35	; 53
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e5 e3       	ldi	r30, 0x35	; 53
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	8c 93       	st	X, r24
 	 
	 ENABLE2_ON;
 412:	a5 e3       	ldi	r26, 0x35	; 53
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e5 e3       	ldi	r30, 0x35	; 53
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	8f 7b       	andi	r24, 0xBF	; 191
 41e:	8c 93       	st	X, r24
 	 PWM2_ON;
 420:	a5 e3       	ldi	r26, 0x35	; 53
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e5 e3       	ldi	r30, 0x35	; 53
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	80 61       	ori	r24, 0x10	; 16
 42c:	8c 93       	st	X, r24
 	 BREAK2_OFF; 
 42e:	a5 e3       	ldi	r26, 0x35	; 53
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	e5 e3       	ldi	r30, 0x35	; 53
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	8f 77       	andi	r24, 0x7F	; 127
 43a:	8c 93       	st	X, r24
	 DIR2_ON;
 43c:	a5 e3       	ldi	r26, 0x35	; 53
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e5 e3       	ldi	r30, 0x35	; 53
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	80 62       	ori	r24, 0x20	; 32
 448:	8c 93       	st	X, r24
}
 44a:	cf 91       	pop	r28
 44c:	df 91       	pop	r29
 44e:	08 95       	ret

00000450 <main>:

//
int main(void)
{
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	00 d0       	rcall	.+0      	; 0x456 <main+0x6>
 456:	00 d0       	rcall	.+0      	; 0x458 <main+0x8>
 458:	00 d0       	rcall	.+0      	; 0x45a <main+0xa>
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
 
 init_devices();
 45e:	0e 94 92 01 	call	0x324	; 0x324 <init_devices>
 //insert your functional code here...
 motor_init();
 462:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <motor_init>
 SW_PORT_DDR = 0x00;
 466:	ea e3       	ldi	r30, 0x3A	; 58
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	10 82       	st	Z, r1
 DCMOTOR[0] =  motor_speed = 800;
 46c:	80 e2       	ldi	r24, 0x20	; 32
 46e:	93 e0       	ldi	r25, 0x03	; 3
 470:	90 93 1a 01 	sts	0x011A, r25
 474:	80 93 19 01 	sts	0x0119, r24
 478:	80 91 19 01 	lds	r24, 0x0119
 47c:	90 91 1a 01 	lds	r25, 0x011A
 480:	90 93 1e 01 	sts	0x011E, r25
 484:	80 93 1d 01 	sts	0x011D, r24
 DCMOTOR[4] = motor2_speed = 100;   
 488:	84 e6       	ldi	r24, 0x64	; 100
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	90 93 1c 01 	sts	0x011C, r25
 490:	80 93 1b 01 	sts	0x011B, r24
 494:	80 91 1b 01 	lds	r24, 0x011B
 498:	90 91 1c 01 	lds	r25, 0x011C
 49c:	90 93 26 01 	sts	0x0126, r25
 4a0:	80 93 25 01 	sts	0x0125, r24
 
 while(1){ 		
	
	switch(SW_PORT&0xff){
 4a4:	e9 e3       	ldi	r30, 0x39	; 57
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	28 2f       	mov	r18, r24
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	3e 83       	std	Y+6, r19	; 0x06
 4b0:	2d 83       	std	Y+5, r18	; 0x05
 4b2:	8d 81       	ldd	r24, Y+5	; 0x05
 4b4:	9e 81       	ldd	r25, Y+6	; 0x06
 4b6:	88 30       	cpi	r24, 0x08	; 8
 4b8:	91 05       	cpc	r25, r1
 4ba:	09 f4       	brne	.+2      	; 0x4be <main+0x6e>
 4bc:	58 c0       	rjmp	.+176    	; 0x56e <main+0x11e>
 4be:	2d 81       	ldd	r18, Y+5	; 0x05
 4c0:	3e 81       	ldd	r19, Y+6	; 0x06
 4c2:	29 30       	cpi	r18, 0x09	; 9
 4c4:	31 05       	cpc	r19, r1
 4c6:	dc f4       	brge	.+54     	; 0x4fe <main+0xae>
 4c8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ca:	9e 81       	ldd	r25, Y+6	; 0x06
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	91 05       	cpc	r25, r1
 4d0:	99 f1       	breq	.+102    	; 0x538 <main+0xe8>
 4d2:	2d 81       	ldd	r18, Y+5	; 0x05
 4d4:	3e 81       	ldd	r19, Y+6	; 0x06
 4d6:	22 30       	cpi	r18, 0x02	; 2
 4d8:	31 05       	cpc	r19, r1
 4da:	34 f4       	brge	.+12     	; 0x4e8 <main+0x98>
 4dc:	8d 81       	ldd	r24, Y+5	; 0x05
 4de:	9e 81       	ldd	r25, Y+6	; 0x06
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <main+0x96>
 4e4:	6d c0       	rjmp	.+218    	; 0x5c0 <main+0x170>
 4e6:	c4 c0       	rjmp	.+392    	; 0x670 <main+0x220>
 4e8:	2d 81       	ldd	r18, Y+5	; 0x05
 4ea:	3e 81       	ldd	r19, Y+6	; 0x06
 4ec:	22 30       	cpi	r18, 0x02	; 2
 4ee:	31 05       	cpc	r19, r1
 4f0:	69 f1       	breq	.+90     	; 0x54c <main+0xfc>
 4f2:	8d 81       	ldd	r24, Y+5	; 0x05
 4f4:	9e 81       	ldd	r25, Y+6	; 0x06
 4f6:	84 30       	cpi	r24, 0x04	; 4
 4f8:	91 05       	cpc	r25, r1
 4fa:	91 f1       	breq	.+100    	; 0x560 <main+0x110>
 4fc:	b9 c0       	rjmp	.+370    	; 0x670 <main+0x220>
 4fe:	2d 81       	ldd	r18, Y+5	; 0x05
 500:	3e 81       	ldd	r19, Y+6	; 0x06
 502:	20 32       	cpi	r18, 0x20	; 32
 504:	31 05       	cpc	r19, r1
 506:	09 f4       	brne	.+2      	; 0x50a <main+0xba>
 508:	43 c0       	rjmp	.+134    	; 0x590 <main+0x140>
 50a:	8d 81       	ldd	r24, Y+5	; 0x05
 50c:	9e 81       	ldd	r25, Y+6	; 0x06
 50e:	81 32       	cpi	r24, 0x21	; 33
 510:	91 05       	cpc	r25, r1
 512:	34 f4       	brge	.+12     	; 0x520 <main+0xd0>
 514:	2d 81       	ldd	r18, Y+5	; 0x05
 516:	3e 81       	ldd	r19, Y+6	; 0x06
 518:	20 31       	cpi	r18, 0x10	; 16
 51a:	31 05       	cpc	r19, r1
 51c:	79 f1       	breq	.+94     	; 0x57c <main+0x12c>
 51e:	a8 c0       	rjmp	.+336    	; 0x670 <main+0x220>
 520:	8d 81       	ldd	r24, Y+5	; 0x05
 522:	9e 81       	ldd	r25, Y+6	; 0x06
 524:	80 34       	cpi	r24, 0x40	; 64
 526:	91 05       	cpc	r25, r1
 528:	e9 f1       	breq	.+122    	; 0x5a4 <main+0x154>
 52a:	2d 81       	ldd	r18, Y+5	; 0x05
 52c:	3e 81       	ldd	r19, Y+6	; 0x06
 52e:	20 38       	cpi	r18, 0x80	; 128
 530:	31 05       	cpc	r19, r1
 532:	09 f4       	brne	.+2      	; 0x536 <main+0xe6>
 534:	3e c0       	rjmp	.+124    	; 0x5b2 <main+0x162>
 536:	9c c0       	rjmp	.+312    	; 0x670 <main+0x220>
		case 0x01 :  motor_speed+=SPEED_UP;
 538:	80 91 19 01 	lds	r24, 0x0119
 53c:	90 91 1a 01 	lds	r25, 0x011A
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	90 93 1a 01 	sts	0x011A, r25
 546:	80 93 19 01 	sts	0x0119, r24
 54a:	92 c0       	rjmp	.+292    	; 0x670 <main+0x220>
			 	  	 break;
		case 0x02 :  motor_speed-=SPEED_UP;
 54c:	80 91 19 01 	lds	r24, 0x0119
 550:	90 91 1a 01 	lds	r25, 0x011A
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	90 93 1a 01 	sts	0x011A, r25
 55a:	80 93 19 01 	sts	0x0119, r24
 55e:	88 c0       	rjmp	.+272    	; 0x670 <main+0x220>
			 	  	 break;
		case 0x04 :  sw_state[2] = PRESSED;			 	  	 		 	  	 	
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	90 93 0a 01 	sts	0x010A, r25
 568:	80 93 09 01 	sts	0x0109, r24
 56c:	81 c0       	rjmp	.+258    	; 0x670 <main+0x220>
			 	  	 break; 
		case 0x08 :  sw_state[3] = PRESSED;			 	  	
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	90 93 0c 01 	sts	0x010C, r25
 576:	80 93 0b 01 	sts	0x010B, r24
 57a:	7a c0       	rjmp	.+244    	; 0x670 <main+0x220>
			 	  	 break;
		
		case 0x10 :  motor2_speed+=SPEED_UP;
 57c:	80 91 1b 01 	lds	r24, 0x011B
 580:	90 91 1c 01 	lds	r25, 0x011C
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	90 93 1c 01 	sts	0x011C, r25
 58a:	80 93 1b 01 	sts	0x011B, r24
 58e:	70 c0       	rjmp	.+224    	; 0x670 <main+0x220>
			 	  	 break;
		case 0x20 :  motor2_speed-=SPEED_UP;
 590:	80 91 1b 01 	lds	r24, 0x011B
 594:	90 91 1c 01 	lds	r25, 0x011C
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	90 93 1c 01 	sts	0x011C, r25
 59e:	80 93 1b 01 	sts	0x011B, r24
 5a2:	66 c0       	rjmp	.+204    	; 0x670 <main+0x220>
			 	  	 break;
		case 0x40 :  sw_state[4] = PRESSED;			 	  	 		 	  	 	
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	90 93 0e 01 	sts	0x010E, r25
 5ac:	80 93 0d 01 	sts	0x010D, r24
 5b0:	5f c0       	rjmp	.+190    	; 0x670 <main+0x220>
			 	  	 break; 
		case 0x80 :  sw_state[5] = PRESSED;			 	  	
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	90 93 10 01 	sts	0x0110, r25
 5ba:	80 93 0f 01 	sts	0x010F, r24
 5be:	58 c0       	rjmp	.+176    	; 0x670 <main+0x220>
			 	  	 break;
					 			 
		case 0x00 : if(sw_state[2] == PRESSED){
 5c0:	80 91 09 01 	lds	r24, 0x0109
 5c4:	90 91 0a 01 	lds	r25, 0x010A
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	91 05       	cpc	r25, r1
 5cc:	79 f4       	brne	.+30     	; 0x5ec <main+0x19c>
			 	  		if(motor_state == STOP){
 5ce:	80 91 00 01 	lds	r24, 0x0100
 5d2:	83 30       	cpi	r24, 0x03	; 3
 5d4:	21 f4       	brne	.+8      	; 0x5de <main+0x18e>
					 		motor_state = LEFT;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 00 01 	sts	0x0100, r24
 5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <main+0x194>
					 	}else{
			 	  	 		motor_state = STOP;
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	80 93 00 01 	sts	0x0100, r24
					 	}
						sw_state[2] = OPEN;
 5e4:	10 92 0a 01 	sts	0x010A, r1
 5e8:	10 92 09 01 	sts	0x0109, r1
					}
					if(sw_state[3] == PRESSED){
 5ec:	80 91 0b 01 	lds	r24, 0x010B
 5f0:	90 91 0c 01 	lds	r25, 0x010C
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	91 05       	cpc	r25, r1
 5f8:	79 f4       	brne	.+30     	; 0x618 <main+0x1c8>
			 	  		if(motor_state == STOP){
 5fa:	80 91 00 01 	lds	r24, 0x0100
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	21 f4       	brne	.+8      	; 0x60a <main+0x1ba>
					 		motor_state = RIGHT;
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	80 93 00 01 	sts	0x0100, r24
 608:	03 c0       	rjmp	.+6      	; 0x610 <main+0x1c0>
					 	}else{
			 	  	 		motor_state = STOP;
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	80 93 00 01 	sts	0x0100, r24
					 	}
						sw_state[3] = OPEN;
 610:	10 92 0c 01 	sts	0x010C, r1
 614:	10 92 0b 01 	sts	0x010B, r1
					}
					
					if(sw_state[4] == PRESSED){
 618:	80 91 0d 01 	lds	r24, 0x010D
 61c:	90 91 0e 01 	lds	r25, 0x010E
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	91 05       	cpc	r25, r1
 624:	79 f4       	brne	.+30     	; 0x644 <main+0x1f4>
			 	  		if(motor2_state == STOP){
 626:	80 91 01 01 	lds	r24, 0x0101
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	21 f4       	brne	.+8      	; 0x636 <main+0x1e6>
					 		motor2_state = LEFT;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 01 01 	sts	0x0101, r24
 634:	03 c0       	rjmp	.+6      	; 0x63c <main+0x1ec>
					 	}else{
			 	  	 		motor2_state = STOP;
 636:	83 e0       	ldi	r24, 0x03	; 3
 638:	80 93 01 01 	sts	0x0101, r24
					 	}
						sw_state[4] = OPEN;
 63c:	10 92 0e 01 	sts	0x010E, r1
 640:	10 92 0d 01 	sts	0x010D, r1
					}
					if(sw_state[5] == PRESSED){
 644:	80 91 0f 01 	lds	r24, 0x010F
 648:	90 91 10 01 	lds	r25, 0x0110
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	91 05       	cpc	r25, r1
 650:	79 f4       	brne	.+30     	; 0x670 <main+0x220>
			 	  		if(motor2_state == STOP){
 652:	80 91 01 01 	lds	r24, 0x0101
 656:	83 30       	cpi	r24, 0x03	; 3
 658:	21 f4       	brne	.+8      	; 0x662 <main+0x212>
					 		motor2_state = RIGHT;
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	80 93 01 01 	sts	0x0101, r24
 660:	03 c0       	rjmp	.+6      	; 0x668 <main+0x218>
					 	}else{
			 	  	 		motor2_state = STOP;
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	80 93 01 01 	sts	0x0101, r24
					 	}
						sw_state[5] = OPEN;
 668:	10 92 10 01 	sts	0x0110, r1
 66c:	10 92 0f 01 	sts	0x010F, r1
					break;
		
		default : break;
	}
	
	if(motor_speed >= MAX_SPEED){
 670:	80 91 19 01 	lds	r24, 0x0119
 674:	90 91 1a 01 	lds	r25, 0x011A
 678:	36 e0       	ldi	r19, 0x06	; 6
 67a:	84 3a       	cpi	r24, 0xA4	; 164
 67c:	93 07       	cpc	r25, r19
 67e:	30 f0       	brcs	.+12     	; 0x68c <main+0x23c>
		motor_speed = MAX_SPEED;  
 680:	84 ea       	ldi	r24, 0xA4	; 164
 682:	96 e0       	ldi	r25, 0x06	; 6
 684:	90 93 1a 01 	sts	0x011A, r25
 688:	80 93 19 01 	sts	0x0119, r24
	}
	if(motor_speed <= MIN_SPEED){
 68c:	80 91 19 01 	lds	r24, 0x0119
 690:	90 91 1a 01 	lds	r25, 0x011A
 694:	82 30       	cpi	r24, 0x02	; 2
 696:	91 05       	cpc	r25, r1
 698:	30 f4       	brcc	.+12     	; 0x6a6 <main+0x256>
		motor_speed = MIN_SPEED;  
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	90 93 1a 01 	sts	0x011A, r25
 6a2:	80 93 19 01 	sts	0x0119, r24
	}
	if(motor2_speed >= MAX_SPEED){
 6a6:	80 91 1b 01 	lds	r24, 0x011B
 6aa:	90 91 1c 01 	lds	r25, 0x011C
 6ae:	26 e0       	ldi	r18, 0x06	; 6
 6b0:	84 3a       	cpi	r24, 0xA4	; 164
 6b2:	92 07       	cpc	r25, r18
 6b4:	30 f0       	brcs	.+12     	; 0x6c2 <main+0x272>
		motor2_speed = MAX_SPEED;  
 6b6:	84 ea       	ldi	r24, 0xA4	; 164
 6b8:	96 e0       	ldi	r25, 0x06	; 6
 6ba:	90 93 1c 01 	sts	0x011C, r25
 6be:	80 93 1b 01 	sts	0x011B, r24
	}
	if(motor2_speed <= MIN_SPEED){
 6c2:	80 91 1b 01 	lds	r24, 0x011B
 6c6:	90 91 1c 01 	lds	r25, 0x011C
 6ca:	82 30       	cpi	r24, 0x02	; 2
 6cc:	91 05       	cpc	r25, r1
 6ce:	30 f4       	brcc	.+12     	; 0x6dc <main+0x28c>
		motor2_speed = MIN_SPEED;  
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	90 93 1c 01 	sts	0x011C, r25
 6d8:	80 93 1b 01 	sts	0x011B, r24
	}

	switch(motor_state){
 6dc:	80 91 00 01 	lds	r24, 0x0100
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	3c 83       	std	Y+4, r19	; 0x04
 6e6:	2b 83       	std	Y+3, r18	; 0x03
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	9c 81       	ldd	r25, Y+4	; 0x04
 6ec:	82 30       	cpi	r24, 0x02	; 2
 6ee:	91 05       	cpc	r25, r1
 6f0:	c9 f0       	breq	.+50     	; 0x724 <main+0x2d4>
 6f2:	2b 81       	ldd	r18, Y+3	; 0x03
 6f4:	3c 81       	ldd	r19, Y+4	; 0x04
 6f6:	23 30       	cpi	r18, 0x03	; 3
 6f8:	31 05       	cpc	r19, r1
 6fa:	19 f1       	breq	.+70     	; 0x742 <main+0x2f2>
 6fc:	8b 81       	ldd	r24, Y+3	; 0x03
 6fe:	9c 81       	ldd	r25, Y+4	; 0x04
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	91 05       	cpc	r25, r1
 704:	29 f5       	brne	.+74     	; 0x750 <main+0x300>
		case LEFT  : BREAK1_OFF;
 706:	a5 e3       	ldi	r26, 0x35	; 53
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	e5 e3       	ldi	r30, 0x35	; 53
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	87 7f       	andi	r24, 0xF7	; 247
 712:	8c 93       	st	X, r24
			 	   	 DIR1_ON;
 714:	a5 e3       	ldi	r26, 0x35	; 53
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	e5 e3       	ldi	r30, 0x35	; 53
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	82 60       	ori	r24, 0x02	; 2
 720:	8c 93       	st	X, r24
 722:	16 c0       	rjmp	.+44     	; 0x750 <main+0x300>
			 	   	 break; 
		case RIGHT : BREAK1_OFF;
 724:	a5 e3       	ldi	r26, 0x35	; 53
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	e5 e3       	ldi	r30, 0x35	; 53
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	87 7f       	andi	r24, 0xF7	; 247
 730:	8c 93       	st	X, r24
			 	   	 DIR1_OFF;
 732:	a5 e3       	ldi	r26, 0x35	; 53
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	e5 e3       	ldi	r30, 0x35	; 53
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	8d 7f       	andi	r24, 0xFD	; 253
 73e:	8c 93       	st	X, r24
 740:	07 c0       	rjmp	.+14     	; 0x750 <main+0x300>
			 	   	 break;
		case STOP  : BREAK1_ON;
 742:	a5 e3       	ldi	r26, 0x35	; 53
 744:	b0 e0       	ldi	r27, 0x00	; 0
 746:	e5 e3       	ldi	r30, 0x35	; 53
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	88 60       	ori	r24, 0x08	; 8
 74e:	8c 93       	st	X, r24
			 	   	 break;
		default : break;
	}
	
	switch(motor2_state){
 750:	80 91 01 01 	lds	r24, 0x0101
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	3a 83       	std	Y+2, r19	; 0x02
 75a:	29 83       	std	Y+1, r18	; 0x01
 75c:	89 81       	ldd	r24, Y+1	; 0x01
 75e:	9a 81       	ldd	r25, Y+2	; 0x02
 760:	82 30       	cpi	r24, 0x02	; 2
 762:	91 05       	cpc	r25, r1
 764:	c9 f0       	breq	.+50     	; 0x798 <main+0x348>
 766:	29 81       	ldd	r18, Y+1	; 0x01
 768:	3a 81       	ldd	r19, Y+2	; 0x02
 76a:	23 30       	cpi	r18, 0x03	; 3
 76c:	31 05       	cpc	r19, r1
 76e:	19 f1       	breq	.+70     	; 0x7b6 <main+0x366>
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	9a 81       	ldd	r25, Y+2	; 0x02
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	91 05       	cpc	r25, r1
 778:	29 f5       	brne	.+74     	; 0x7c4 <main+0x374>
		case LEFT  : BREAK2_OFF;
 77a:	a5 e3       	ldi	r26, 0x35	; 53
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	e5 e3       	ldi	r30, 0x35	; 53
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	8f 77       	andi	r24, 0x7F	; 127
 786:	8c 93       	st	X, r24
			 	   	 DIR2_ON;
 788:	a5 e3       	ldi	r26, 0x35	; 53
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	e5 e3       	ldi	r30, 0x35	; 53
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	80 62       	ori	r24, 0x20	; 32
 794:	8c 93       	st	X, r24
 796:	16 c0       	rjmp	.+44     	; 0x7c4 <main+0x374>
			 	   	 break; 
		case RIGHT : BREAK2_OFF;
 798:	a5 e3       	ldi	r26, 0x35	; 53
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	e5 e3       	ldi	r30, 0x35	; 53
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	8f 77       	andi	r24, 0x7F	; 127
 7a4:	8c 93       	st	X, r24
			 	   	 DIR2_OFF;
 7a6:	a5 e3       	ldi	r26, 0x35	; 53
 7a8:	b0 e0       	ldi	r27, 0x00	; 0
 7aa:	e5 e3       	ldi	r30, 0x35	; 53
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	8f 7d       	andi	r24, 0xDF	; 223
 7b2:	8c 93       	st	X, r24
 7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <main+0x374>
			 	   	 break;
		case STOP  : BREAK2_ON;
 7b6:	a5 e3       	ldi	r26, 0x35	; 53
 7b8:	b0 e0       	ldi	r27, 0x00	; 0
 7ba:	e5 e3       	ldi	r30, 0x35	; 53
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	80 68       	ori	r24, 0x80	; 128
 7c2:	8c 93       	st	X, r24
			 	   	 break;
		default : break;
	}	
		
	DCMOTOR[0] = motor_speed;
 7c4:	80 91 19 01 	lds	r24, 0x0119
 7c8:	90 91 1a 01 	lds	r25, 0x011A
 7cc:	90 93 1e 01 	sts	0x011E, r25
 7d0:	80 93 1d 01 	sts	0x011D, r24
	DCMOTOR[4] = motor2_speed;
 7d4:	80 91 1b 01 	lds	r24, 0x011B
 7d8:	90 91 1c 01 	lds	r25, 0x011C
 7dc:	90 93 26 01 	sts	0x0126, r25
 7e0:	80 93 25 01 	sts	0x0125, r24
	delay(5);
 7e4:	85 e0       	ldi	r24, 0x05	; 5
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 ba 01 	call	0x374	; 0x374 <delay>
 7ec:	5b ce       	rjmp	.-842    	; 0x4a4 <main+0x54>

000007ee <_exit>:
 7ee:	f8 94       	cli

000007f0 <__stop_program>:
 7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <__stop_program>
