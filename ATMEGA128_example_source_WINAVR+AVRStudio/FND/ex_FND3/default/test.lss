
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004f  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b1  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000117  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000193  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b8  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  b6:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:
#include <avr/interrupt.h>
#include <stdio.h>

void port_init(void)
{
 PORTA = 0x00;
  be:	1b ba       	out	0x1b, r1	; 27
 DDRA  = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
 PORTB = 0x00;
  c4:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x00;
  c6:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
  c8:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xff;
  ca:	84 bb       	out	0x14, r24	; 20
 PORTD = 0x00;
  cc:	12 ba       	out	0x12, r1	; 18
 DDRD  = 0x00;
  ce:	11 ba       	out	0x11, r1	; 17
 PORTE = 0x00;
  d0:	13 b8       	out	0x03, r1	; 3
 DDRE  = 0x00;
  d2:	12 b8       	out	0x02, r1	; 2
 PORTF = 0x00;
  d4:	10 92 62 00 	sts	0x0062, r1
 DDRF  = 0x00;
  d8:	10 92 61 00 	sts	0x0061, r1
 PORTG = 0x00;
  dc:	10 92 65 00 	sts	0x0065, r1
 DDRG  = 0x03;
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	80 93 64 00 	sts	0x0064, r24
}
  e6:	08 95       	ret

000000e8 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 //stop errant interrupts until set up
 cli(); //disable all interrupts
  e8:	f8 94       	cli
 XMCRA = 0x00; //external memory
  ea:	10 92 6d 00 	sts	0x006D, r1
 XMCRB = 0x00; //external memory
  ee:	10 92 6c 00 	sts	0x006C, r1
 port_init();
  f2:	0e 94 5f 00 	call	0xbe	; 0xbe <port_init>
  
 MCUCR = 0x00;
  f6:	15 be       	out	0x35, r1	; 53
 EICRA = 0x00; //extended ext ints
  f8:	10 92 6a 00 	sts	0x006A, r1
 EICRB = 0x00; //extended ext ints
  fc:	1a be       	out	0x3a, r1	; 58
 EIMSK = 0x00;
  fe:	19 be       	out	0x39, r1	; 57
 TIMSK = 0x41; //timer interrupt sources
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	87 bf       	out	0x37, r24	; 55
 ETIMSK = 0x00; //extended timer interrupt sources
 104:	10 92 7d 00 	sts	0x007D, r1
 sei(); //re-enable interrupts
 108:	78 94       	sei
 //all peripherals are now initialized
}
 10a:	08 95       	ret

0000010c <delay>:
{
int	 i,j;
	 for (i=0; i<times; i++) {
	 	 for (j=0;j<i;j++);
	 }
}
 10c:	08 95       	ret

0000010e <SS_val>:

void SS_val(int PC, int PA, int D_time)
{
 		  PORTC = ~PC;
 10e:	80 95       	com	r24
 110:	85 bb       	out	0x15, r24	; 21
		  PORTA = PA;
 112:	6b bb       	out	0x1b, r22	; 27
		  delay(D_time);

}
 114:	08 95       	ret

00000116 <main>:
	 where[1] = (what - where[3]*1000 - where[2]*100)/10;
	 where[0] = (what - where[3]*1000 - where[2]*100 - where[1]*10);
/*------------------------------------------------------------------*/


 init_devices();
 116:	0e 94 74 00 	call	0xe8	; 0xe8 <init_devices>
 //insert your functional code here...
 while(1) {

 		  			SS_val(SS_PORTC[1], SS_data[where[3]], D_time);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	6f e4       	ldi	r22, 0x4F	; 79
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	0e 94 87 00 	call	0x10e	; 0x10e <SS_val>
 		  			SS_val(SS_PORTC[2], SS_data[where[2]], D_time);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	6b e5       	ldi	r22, 0x5B	; 91
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	0e 94 87 00 	call	0x10e	; 0x10e <SS_val>
					SS_val(SS_PORTC[3], SS_data[where[1]], D_time);
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	6f e4       	ldi	r22, 0x4F	; 79
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	0e 94 87 00 	call	0x10e	; 0x10e <SS_val>
 		  			SS_val(SS_PORTC[4], SS_data[where[0]], D_time);
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	6b e5       	ldi	r22, 0x5B	; 91
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	0e 94 87 00 	call	0x10e	; 0x10e <SS_val>
 15a:	df cf       	rjmp	.-66     	; 0x11a <main+0x4>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
