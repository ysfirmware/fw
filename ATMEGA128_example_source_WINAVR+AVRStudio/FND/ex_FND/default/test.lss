
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  00000360  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000093  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000019d  00000000  00000000  00000413  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000235  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c2  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 04 01 	call	0x208	; 0x208 <main>
  c6:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <port_init>:
unsigned char display_num[4]={0,0,0,0};         // Seven segment 4자리 숫자 출력 버퍼


void port_init(void)
{
 PORTA = 0x00;
  ce:	1b ba       	out	0x1b, r1	; 27
 DDRA  = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
 PORTB = 0x00;
  d4:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x00;
  d6:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
  d8:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0x0f;
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	84 bb       	out	0x14, r24	; 20
 PORTD = 0x00;
  de:	12 ba       	out	0x12, r1	; 18
 DDRD  = 0x00;
  e0:	11 ba       	out	0x11, r1	; 17
 PORTE = 0x00;
  e2:	13 b8       	out	0x03, r1	; 3
 DDRE  = 0x00;
  e4:	12 b8       	out	0x02, r1	; 2
 PORTF = 0x00;
  e6:	10 92 62 00 	sts	0x0062, r1
 DDRF  = 0x00;
  ea:	10 92 61 00 	sts	0x0061, r1
 PORTG = 0x00;
  ee:	10 92 65 00 	sts	0x0065, r1
 DDRG  = 0x03;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 64 00 	sts	0x0064, r24
}
  f8:	08 95       	ret

000000fa <timer0_init>:
// WGM: Normal
// desired value: 1mSec
// actual value:  1.000mSec (0.0%)
void timer0_init(void)
{
 TCCR0 = 0x00; //stop
  fa:	13 be       	out	0x33, r1	; 51
 ASSR  = 0x00; //set async mode
  fc:	10 be       	out	0x30, r1	; 48
 TCNT0 = 0x06; //set count
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	82 bf       	out	0x32, r24	; 50
 OCR0  = 0xFA;
 102:	8a ef       	ldi	r24, 0xFA	; 250
 104:	81 bf       	out	0x31, r24	; 49
 TCCR0 = 0x04; //start timer
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	83 bf       	out	0x33, r24	; 51
}
 10a:	08 95       	ret

0000010c <__vector_16>:

unsigned char digit_num=0;

ISR(TIMER0_OVF_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
 TCNT0 = 0x06; //reload counter value
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	82 bf       	out	0x32, r24	; 50
    digit_num++;
    digit_num = digit_num%4;
 12a:	20 91 0e 01 	lds	r18, 0x010E
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	23 70       	andi	r18, 0x03	; 3
 132:	20 93 0e 01 	sts	0x010E, r18
	PORTC = 0x0f;
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	85 bb       	out	0x15, r24	; 21
	PORTA = segment_data[display_num[digit_num]];
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	e6 5f       	subi	r30, 0xF6	; 246
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	80 81       	ld	r24, Z
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	e8 0f       	add	r30, r24
 14a:	f1 1d       	adc	r31, r1
 14c:	80 81       	ld	r24, Z
 14e:	8b bb       	out	0x1b, r24	; 27
	PORTC = ~(0x01 << digit_num);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <__vector_16+0x4e>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	2a 95       	dec	r18
 15c:	e2 f7       	brpl	.-8      	; 0x156 <__vector_16+0x4a>
 15e:	80 95       	com	r24
 160:	85 bb       	out	0x15, r24	; 21

}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0b be       	out	0x3b, r0	; 59
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 17c:	f8 94       	cli
 XMCRA = 0x00; //external memory
 17e:	10 92 6d 00 	sts	0x006D, r1
 XMCRB = 0x00; //external memory
 182:	10 92 6c 00 	sts	0x006C, r1
 port_init();
 186:	0e 94 67 00 	call	0xce	; 0xce <port_init>
// WGM: Normal
// desired value: 1mSec
// actual value:  1.000mSec (0.0%)
void timer0_init(void)
{
 TCCR0 = 0x00; //stop
 18a:	13 be       	out	0x33, r1	; 51
 ASSR  = 0x00; //set async mode
 18c:	10 be       	out	0x30, r1	; 48
 TCNT0 = 0x06; //set count
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	82 bf       	out	0x32, r24	; 50
 OCR0  = 0xFA;
 192:	8a ef       	ldi	r24, 0xFA	; 250
 194:	81 bf       	out	0x31, r24	; 49
 TCCR0 = 0x04; //start timer
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	83 bf       	out	0x33, r24	; 51
 XMCRA = 0x00; //external memory
 XMCRB = 0x00; //external memory
 port_init();
 timer0_init();
 
 MCUCR = 0x00;
 19a:	15 be       	out	0x35, r1	; 53
 EICRA = 0x00; //extended ext ints
 19c:	10 92 6a 00 	sts	0x006A, r1
 EICRB = 0x00; //extended ext ints
 1a0:	1a be       	out	0x3a, r1	; 58
 EIMSK = 0x00;
 1a2:	19 be       	out	0x39, r1	; 57
 TIMSK = 0x41; //timer interrupt sources
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	87 bf       	out	0x37, r24	; 55
 ETIMSK = 0x00; //extended timer interrupt sources
 1a8:	10 92 7d 00 	sts	0x007D, r1
 sei(); //re-enable interrupts
 1ac:	78 94       	sei
 //all peripherals are now initialized
}
 1ae:	08 95       	ret

000001b0 <delay>:

void delay(int n)
{
 1b0:	df 93       	push	r29
 1b2:	cf 93       	push	r28
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <delay+0x6>
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <delay+0x8>
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	9c 01       	movw	r18, r24
	volatile int i,j;
	for(i=1;i<n;i++)
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	9a 83       	std	Y+2, r25	; 0x02
 1c4:	89 83       	std	Y+1, r24	; 0x01
	{
    	for(j=1;j<600;j++);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	12 c0       	rjmp	.+36     	; 0x1f0 <delay+0x40>
 1cc:	5c 83       	std	Y+4, r21	; 0x04
 1ce:	4b 83       	std	Y+3, r20	; 0x03
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <delay+0x2c>
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	9c 81       	ldd	r25, Y+4	; 0x04
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	9c 83       	std	Y+4, r25	; 0x04
 1da:	8b 83       	std	Y+3, r24	; 0x03
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	9c 81       	ldd	r25, Y+4	; 0x04
 1e0:	88 55       	subi	r24, 0x58	; 88
 1e2:	92 40       	sbci	r25, 0x02	; 2
 1e4:	b4 f3       	brlt	.-20     	; 0x1d2 <delay+0x22>
}

void delay(int n)
{
	volatile int i,j;
	for(i=1;i<n;i++)
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	89 83       	std	Y+1, r24	; 0x01
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	82 17       	cp	r24, r18
 1f6:	93 07       	cpc	r25, r19
 1f8:	4c f3       	brlt	.-46     	; 0x1cc <delay+0x1c>
	{
    	for(j=1;j<600;j++);
	}
}
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <main>:


//
int main(void)
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 
 int i=0;
 init_devices();
 20c:	0e 94 be 00 	call	0x17c	; 0x17c <init_devices>
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 //insert your functional code here...
 
	while(1){
        i++;
 214:	21 96       	adiw	r28, 0x01	; 1
        display_num[0] = (i%10000)/1000;
 216:	ce 01       	movw	r24, r28
 218:	60 e1       	ldi	r22, 0x10	; 16
 21a:	77 e2       	ldi	r23, 0x27	; 39
 21c:	0e 94 38 01 	call	0x270	; 0x270 <__divmodhi4>
 220:	68 ee       	ldi	r22, 0xE8	; 232
 222:	73 e0       	ldi	r23, 0x03	; 3
 224:	0e 94 38 01 	call	0x270	; 0x270 <__divmodhi4>
 228:	60 93 0a 01 	sts	0x010A, r22
        display_num[1] = (i%1000)/100;
 22c:	ce 01       	movw	r24, r28
 22e:	68 ee       	ldi	r22, 0xE8	; 232
 230:	73 e0       	ldi	r23, 0x03	; 3
 232:	0e 94 38 01 	call	0x270	; 0x270 <__divmodhi4>
 236:	64 e6       	ldi	r22, 0x64	; 100
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	0e 94 38 01 	call	0x270	; 0x270 <__divmodhi4>
 23e:	60 93 0b 01 	sts	0x010B, r22
        display_num[2] = (i%100)/10;
 242:	ce 01       	movw	r24, r28
 244:	64 e6       	ldi	r22, 0x64	; 100
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 38 01 	call	0x270	; 0x270 <__divmodhi4>
 24c:	6a e0       	ldi	r22, 0x0A	; 10
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 38 01 	call	0x270	; 0x270 <__divmodhi4>
 254:	60 93 0c 01 	sts	0x010C, r22
        display_num[3] = (i%10);
 258:	ce 01       	movw	r24, r28
 25a:	6a e0       	ldi	r22, 0x0A	; 10
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	0e 94 38 01 	call	0x270	; 0x270 <__divmodhi4>
 262:	80 93 0d 01 	sts	0x010D, r24
        delay(1000);
 266:	88 ee       	ldi	r24, 0xE8	; 232
 268:	93 e0       	ldi	r25, 0x03	; 3
 26a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <delay>
 26e:	d2 cf       	rjmp	.-92     	; 0x214 <main+0xc>

00000270 <__divmodhi4>:
 270:	97 fb       	bst	r25, 7
 272:	09 2e       	mov	r0, r25
 274:	07 26       	eor	r0, r23
 276:	0a d0       	rcall	.+20     	; 0x28c <__divmodhi4_neg1>
 278:	77 fd       	sbrc	r23, 7
 27a:	04 d0       	rcall	.+8      	; 0x284 <__divmodhi4_neg2>
 27c:	0c d0       	rcall	.+24     	; 0x296 <__udivmodhi4>
 27e:	06 d0       	rcall	.+12     	; 0x28c <__divmodhi4_neg1>
 280:	00 20       	and	r0, r0
 282:	1a f4       	brpl	.+6      	; 0x28a <__divmodhi4_exit>

00000284 <__divmodhi4_neg2>:
 284:	70 95       	com	r23
 286:	61 95       	neg	r22
 288:	7f 4f       	sbci	r23, 0xFF	; 255

0000028a <__divmodhi4_exit>:
 28a:	08 95       	ret

0000028c <__divmodhi4_neg1>:
 28c:	f6 f7       	brtc	.-4      	; 0x28a <__divmodhi4_exit>
 28e:	90 95       	com	r25
 290:	81 95       	neg	r24
 292:	9f 4f       	sbci	r25, 0xFF	; 255
 294:	08 95       	ret

00000296 <__udivmodhi4>:
 296:	aa 1b       	sub	r26, r26
 298:	bb 1b       	sub	r27, r27
 29a:	51 e1       	ldi	r21, 0x11	; 17
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <__udivmodhi4_ep>

0000029e <__udivmodhi4_loop>:
 29e:	aa 1f       	adc	r26, r26
 2a0:	bb 1f       	adc	r27, r27
 2a2:	a6 17       	cp	r26, r22
 2a4:	b7 07       	cpc	r27, r23
 2a6:	10 f0       	brcs	.+4      	; 0x2ac <__udivmodhi4_ep>
 2a8:	a6 1b       	sub	r26, r22
 2aa:	b7 0b       	sbc	r27, r23

000002ac <__udivmodhi4_ep>:
 2ac:	88 1f       	adc	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	5a 95       	dec	r21
 2b2:	a9 f7       	brne	.-22     	; 0x29e <__udivmodhi4_loop>
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	bc 01       	movw	r22, r24
 2ba:	cd 01       	movw	r24, r26
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
