
TEXT_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000c1  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000250  00000000  00000000  000006f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009f  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000048f  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000f0  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000104  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 c1 02 	call	0x582	; 0x582 <main>
  b6:	0c 94 df 02 	jmp	0x5be	; 0x5be <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <port_init>:

#define control_port PORTA
#define data_port	 PORTB

void port_init(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
  c6:	eb e3       	ldi	r30, 0x3B	; 59
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
 DDRA  = 0xFF;		// Control Port
  cc:	ea e3       	ldi	r30, 0x3A	; 58
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	80 83       	st	Z, r24
 PORTB = 0x00;
  d4:	e8 e3       	ldi	r30, 0x38	; 56
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
 DDRB  = 0xFF;		// Data Port
  da:	e7 e3       	ldi	r30, 0x37	; 55
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 83       	st	Z, r24
 PORTC = 0x00;
  e2:	e5 e3       	ldi	r30, 0x35	; 53
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
 DDRC  = 0x00;
  e8:	e4 e3       	ldi	r30, 0x34	; 52
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
 PORTD = 0x00;
  ee:	e2 e3       	ldi	r30, 0x32	; 50
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
 DDRD  = 0x00;
  f4:	e1 e3       	ldi	r30, 0x31	; 49
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
 PORTE = 0x00;
  fa:	e3 e2       	ldi	r30, 0x23	; 35
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
 DDRE  = 0x00;
 100:	e2 e2       	ldi	r30, 0x22	; 34
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	10 82       	st	Z, r1
 PORTF = 0x00;
 106:	e2 e6       	ldi	r30, 0x62	; 98
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
 DDRF  = 0x00;
 10c:	e1 e6       	ldi	r30, 0x61	; 97
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	10 82       	st	Z, r1
 PORTG = 0x00;
 112:	e5 e6       	ldi	r30, 0x65	; 101
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	10 82       	st	Z, r1
 DDRG  = 0x00;
 118:	e4 e6       	ldi	r30, 0x64	; 100
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
}
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 12c:	f8 94       	cli

 XMCRA = 0x00; //external memory
 12e:	ed e6       	ldi	r30, 0x6D	; 109
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	10 82       	st	Z, r1
 port_init();
 134:	0e 94 5f 00 	call	0xbe	; 0xbe <port_init>

 MCUCR = 0x00;
 138:	e5 e5       	ldi	r30, 0x55	; 85
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 13e:	ea e6       	ldi	r30, 0x6A	; 106
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	10 82       	st	Z, r1
 EICRB = 0x00; //extended ext ints
 144:	ea e5       	ldi	r30, 0x5A	; 90
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	10 82       	st	Z, r1
 EIMSK = 0x00;
 14a:	e9 e5       	ldi	r30, 0x59	; 89
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	10 82       	st	Z, r1
 TIMSK = 0x00; //timer interrupt sources
 150:	e7 e5       	ldi	r30, 0x57	; 87
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	10 82       	st	Z, r1
 ETIMSK = 0x00; //extended timer interrupt sources
 156:	ed e7       	ldi	r30, 0x7D	; 125
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1
 
 sei(); //re-enable interrupts
 15c:	78 94       	sei
 //all peripherals are now initialized
}
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <delay>:
void delay(int dd){
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	00 d0       	rcall	.+0      	; 0x16a <delay+0x6>
 16a:	00 d0       	rcall	.+0      	; 0x16c <delay+0x8>
 16c:	00 d0       	rcall	.+0      	; 0x16e <delay+0xa>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	9e 83       	std	Y+6, r25	; 0x06
 174:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    
    for(i=0 ; i<1000 ; i++){
 176:	1c 82       	std	Y+4, r1	; 0x04
 178:	1b 82       	std	Y+3, r1	; 0x03
 17a:	14 c0       	rjmp	.+40     	; 0x1a4 <delay+0x40>
        for(j=0 ; j<dd ; j++){
 17c:	1a 82       	std	Y+2, r1	; 0x02
 17e:	19 82       	std	Y+1, r1	; 0x01
 180:	05 c0       	rjmp	.+10     	; 0x18c <delay+0x28>
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	9a 81       	ldd	r25, Y+2	; 0x02
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	9a 83       	std	Y+2, r25	; 0x02
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	29 81       	ldd	r18, Y+1	; 0x01
 18e:	3a 81       	ldd	r19, Y+2	; 0x02
 190:	8d 81       	ldd	r24, Y+5	; 0x05
 192:	9e 81       	ldd	r25, Y+6	; 0x06
 194:	28 17       	cp	r18, r24
 196:	39 07       	cpc	r19, r25
 198:	a4 f3       	brlt	.-24     	; 0x182 <delay+0x1e>
 //all peripherals are now initialized
}
void delay(int dd){
    int i,j;
    
    for(i=0 ; i<1000 ; i++){
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	9c 81       	ldd	r25, Y+4	; 0x04
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	9c 83       	std	Y+4, r25	; 0x04
 1a2:	8b 83       	std	Y+3, r24	; 0x03
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	23 e0       	ldi	r18, 0x03	; 3
 1aa:	88 3e       	cpi	r24, 0xE8	; 232
 1ac:	92 07       	cpc	r25, r18
 1ae:	34 f3       	brlt	.-52     	; 0x17c <delay+0x18>
        for(j=0 ; j<dd ; j++){
        }
    }
}
 1b0:	26 96       	adiw	r28, 0x06	; 6
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	cf 91       	pop	r28
 1be:	df 91       	pop	r29
 1c0:	08 95       	ret

000001c2 <LCD_RS>:

// RS : PORTA D0
void LCD_RS(int onoff){
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <LCD_RS+0x6>
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	9a 83       	std	Y+2, r25	; 0x02
 1ce:	89 83       	std	Y+1, r24	; 0x01
    if(onoff == ON)
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	91 05       	cpc	r25, r1
 1d8:	41 f4       	brne	.+16     	; 0x1ea <LCD_RS+0x28>
        control_port = control_port | 0x01;
 1da:	ab e3       	ldi	r26, 0x3B	; 59
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	eb e3       	ldi	r30, 0x3B	; 59
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	8c 93       	st	X, r24
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <LCD_RS+0x36>
    else
        control_port = control_port & 0xFE;
 1ea:	ab e3       	ldi	r26, 0x3B	; 59
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	eb e3       	ldi	r30, 0x3B	; 59
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	8c 93       	st	X, r24
}
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	cf 91       	pop	r28
 1fe:	df 91       	pop	r29
 200:	08 95       	ret

00000202 <LCD_RW>:
// RW : PORTA D1
void LCD_RW(int onoff){
 202:	df 93       	push	r29
 204:	cf 93       	push	r28
 206:	00 d0       	rcall	.+0      	; 0x208 <LCD_RW+0x6>
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	9a 83       	std	Y+2, r25	; 0x02
 20e:	89 83       	std	Y+1, r24	; 0x01
    if(onoff == ON)
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	9a 81       	ldd	r25, Y+2	; 0x02
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	91 05       	cpc	r25, r1
 218:	41 f4       	brne	.+16     	; 0x22a <LCD_RW+0x28>
        control_port = control_port | 0x02;
 21a:	ab e3       	ldi	r26, 0x3B	; 59
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	eb e3       	ldi	r30, 0x3B	; 59
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	82 60       	ori	r24, 0x02	; 2
 226:	8c 93       	st	X, r24
 228:	07 c0       	rjmp	.+14     	; 0x238 <LCD_RW+0x36>
    else
        control_port = control_port & 0xFD;
 22a:	ab e3       	ldi	r26, 0x3B	; 59
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	eb e3       	ldi	r30, 0x3B	; 59
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8d 7f       	andi	r24, 0xFD	; 253
 236:	8c 93       	st	X, r24
}
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <LCD_E>:
// RS : PORTA D2
void LCD_E(int onoff){
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	00 d0       	rcall	.+0      	; 0x248 <LCD_E+0x6>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	89 83       	std	Y+1, r24	; 0x01
    if(onoff == ON)
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	9a 81       	ldd	r25, Y+2	; 0x02
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	91 05       	cpc	r25, r1
 258:	41 f4       	brne	.+16     	; 0x26a <LCD_E+0x28>
        control_port = control_port | 0x04;
 25a:	ab e3       	ldi	r26, 0x3B	; 59
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	eb e3       	ldi	r30, 0x3B	; 59
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	84 60       	ori	r24, 0x04	; 4
 266:	8c 93       	st	X, r24
 268:	07 c0       	rjmp	.+14     	; 0x278 <LCD_E+0x36>
    else
        control_port = control_port & 0xFB;
 26a:	ab e3       	ldi	r26, 0x3B	; 59
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	eb e3       	ldi	r30, 0x3B	; 59
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	8b 7f       	andi	r24, 0xFB	; 251
 276:	8c 93       	st	X, r24
}
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	cf 91       	pop	r28
 27e:	df 91       	pop	r29
 280:	08 95       	ret

00000282 <E_Pulse>:

void E_Pulse(void){
 282:	df 93       	push	r29
 284:	cf 93       	push	r28
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
	 LCD_E(ON);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME*10);
 292:	84 e6       	ldi	r24, 0x64	; 100
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(OFF);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME*10);
 2a2:	84 e6       	ldi	r24, 0x64	; 100
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
}
 2aa:	cf 91       	pop	r28
 2ac:	df 91       	pop	r29
 2ae:	08 95       	ret

000002b0 <write_char>:

void write_char(char s){
 2b0:	df 93       	push	r29
 2b2:	cf 93       	push	r28
 2b4:	0f 92       	push	r0
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	89 83       	std	Y+1, r24	; 0x01
	 LCD_RS(ON);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_RS>
	 delay(DELAYTIME);		 
 2c4:	8a e0       	ldi	r24, 0x0A	; 10
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_RW(OFF);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_RW>
	 delay(DELAYTIME);
 2d4:	8a e0       	ldi	r24, 0x0A	; 10
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(ON);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
 	 delay(DELAYTIME);
 2e4:	8a e0       	ldi	r24, 0x0A	; 10
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 data_port = s;
 2ec:	e8 e3       	ldi	r30, 0x38	; 56
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	80 83       	st	Z, r24
	 delay(DELAYTIME);
 2f4:	8a e0       	ldi	r24, 0x0A	; 10
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(OFF);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME);
 304:	8a e0       	ldi	r24, 0x0A	; 10
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(ON);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME);
 314:	8a e0       	ldi	r24, 0x0A	; 10
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
}	
 31c:	0f 90       	pop	r0
 31e:	cf 91       	pop	r28
 320:	df 91       	pop	r29
 322:	08 95       	ret

00000324 <clrscr>:

void clrscr(){
 324:	df 93       	push	r29
 326:	cf 93       	push	r28
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
	 LCD_RS(OFF);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_RS>
	 delay(DELAYTIME);		 
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_RW(OFF);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 01 01 	call	0x202	; 0x202 <LCD_RW>
	 delay(DELAYTIME);
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(ON);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
 	 delay(DELAYTIME);
 354:	8a e0       	ldi	r24, 0x0A	; 10
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 data_port = 0x01;
 35c:	e8 e3       	ldi	r30, 0x38	; 56
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 83       	st	Z, r24
	 delay(DELAYTIME);
 364:	8a e0       	ldi	r24, 0x0A	; 10
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(OFF);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME);
 374:	8a e0       	ldi	r24, 0x0A	; 10
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(ON);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME);
 384:	8a e0       	ldi	r24, 0x0A	; 10
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
}
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <returnhome>:

void returnhome(){
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
	 LCD_RS(OFF);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_RS>
	 delay(DELAYTIME);		 
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_RW(OFF);
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 01 01 	call	0x202	; 0x202 <LCD_RW>
	 delay(DELAYTIME);
 3b2:	8a e0       	ldi	r24, 0x0A	; 10
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(ON);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
 	 delay(DELAYTIME);
 3c2:	8a e0       	ldi	r24, 0x0A	; 10
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 data_port = 0x02;
 3ca:	e8 e3       	ldi	r30, 0x38	; 56
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	80 83       	st	Z, r24
	 delay(DELAYTIME);
 3d2:	8a e0       	ldi	r24, 0x0A	; 10
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(OFF);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME);
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(ON);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME);
 3f2:	8a e0       	ldi	r24, 0x0A	; 10
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
}
 3fa:	cf 91       	pop	r28
 3fc:	df 91       	pop	r29
 3fe:	08 95       	ret

00000400 <LCDONOFF>:

void LCDONOFF(int onoff){
 400:	df 93       	push	r29
 402:	cf 93       	push	r28
 404:	00 d0       	rcall	.+0      	; 0x406 <LCDONOFF+0x6>
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	9a 83       	std	Y+2, r25	; 0x02
 40c:	89 83       	std	Y+1, r24	; 0x01
	 LCD_RS(OFF);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_RS>
	 delay(DELAYTIME);		 
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_RW(OFF);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 01 01 	call	0x202	; 0x202 <LCD_RW>
	 delay(DELAYTIME);
 426:	8a e0       	ldi	r24, 0x0A	; 10
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(ON);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
 	 delay(DELAYTIME);
 436:	8a e0       	ldi	r24, 0x0A	; 10
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 if(onoff == ON){
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	9a 81       	ldd	r25, Y+2	; 0x02
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	91 05       	cpc	r25, r1
 446:	29 f4       	brne	.+10     	; 0x452 <LCDONOFF+0x52>
	 	 data_port = 0x0F;
 448:	e8 e3       	ldi	r30, 0x38	; 56
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	8f e0       	ldi	r24, 0x0F	; 15
 44e:	80 83       	st	Z, r24
 450:	04 c0       	rjmp	.+8      	; 0x45a <LCDONOFF+0x5a>
	 }else{
	 	 data_port = 0x08;
 452:	e8 e3       	ldi	r30, 0x38	; 56
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	88 e0       	ldi	r24, 0x08	; 8
 458:	80 83       	st	Z, r24
	 }
	 delay(DELAYTIME);
 45a:	8a e0       	ldi	r24, 0x0A	; 10
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(OFF);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME);
 46a:	8a e0       	ldi	r24, 0x0A	; 10
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 LCD_E(ON);
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 21 01 	call	0x242	; 0x242 <LCD_E>
	 delay(DELAYTIME);
 47a:	8a e0       	ldi	r24, 0x0A	; 10
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
}
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	cf 91       	pop	r28
 488:	df 91       	pop	r29
 48a:	08 95       	ret

0000048c <lcd_disp>:


void lcd_disp(char x, char y){
 48c:	df 93       	push	r29
 48e:	cf 93       	push	r28
 490:	00 d0       	rcall	.+0      	; 0x492 <lcd_disp+0x6>
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	6a 83       	std	Y+2, r22	; 0x02
LCD_RS(OFF);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCD_RS>
LCD_RW(OFF);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 01 01 	call	0x202	; 0x202 <LCD_RW>
if(y==1)y++;
 4aa:	8a 81       	ldd	r24, Y+2	; 0x02
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <lcd_disp+0x2c>
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	8a 83       	std	Y+2, r24	; 0x02
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <lcd_disp+0x38>
else if(y==2) y--;
 4b8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ba:	82 30       	cpi	r24, 0x02	; 2
 4bc:	19 f4       	brne	.+6      	; 0x4c4 <lcd_disp+0x38>
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	81 50       	subi	r24, 0x01	; 1
 4c2:	8a 83       	std	Y+2, r24	; 0x02
if(y<=1){
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	b8 f4       	brcc	.+46     	; 0x4f8 <lcd_disp+0x6c>
        data_port=y*20+x+0x80;
 4ca:	e8 e3       	ldi	r30, 0x38	; 56
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	9c 01       	movw	r18, r24
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	c9 01       	movw	r24, r18
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	82 0f       	add	r24, r18
 4ea:	93 1f       	adc	r25, r19
 4ec:	98 2f       	mov	r25, r24
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	89 0f       	add	r24, r25
 4f2:	80 58       	subi	r24, 0x80	; 128
 4f4:	80 83       	st	Z, r24
 4f6:	18 c0       	rjmp	.+48     	; 0x528 <lcd_disp+0x9c>
}
else{
        y=2;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	8a 83       	std	Y+2, r24	; 0x02
        data_port=y*20+x+0xc0;
 4fc:	e8 e3       	ldi	r30, 0x38	; 56
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	9c 01       	movw	r18, r24
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	22 0f       	add	r18, r18
 50e:	33 1f       	adc	r19, r19
 510:	c9 01       	movw	r24, r18
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	82 0f       	add	r24, r18
 51c:	93 1f       	adc	r25, r19
 51e:	98 2f       	mov	r25, r24
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	89 0f       	add	r24, r25
 524:	80 54       	subi	r24, 0x40	; 64
 526:	80 83       	st	Z, r24
}
E_Pulse();
 528:	0e 94 41 01 	call	0x282	; 0x282 <E_Pulse>
}
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	cf 91       	pop	r28
 532:	df 91       	pop	r29
 534:	08 95       	ret

00000536 <write_lcd>:

void write_lcd(char x, char y, char *str){
 536:	df 93       	push	r29
 538:	cf 93       	push	r28
 53a:	00 d0       	rcall	.+0      	; 0x53c <write_lcd+0x6>
 53c:	00 d0       	rcall	.+0      	; 0x53e <write_lcd+0x8>
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	6a 83       	std	Y+2, r22	; 0x02
 546:	5c 83       	std	Y+4, r21	; 0x04
 548:	4b 83       	std	Y+3, r20	; 0x03
lcd_disp(x,y);
 54a:	89 81       	ldd	r24, Y+1	; 0x01
 54c:	6a 81       	ldd	r22, Y+2	; 0x02
 54e:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_disp>
 552:	0b c0       	rjmp	.+22     	; 0x56a <write_lcd+0x34>
while(*str) write_char(*str++);
 554:	eb 81       	ldd	r30, Y+3	; 0x03
 556:	fc 81       	ldd	r31, Y+4	; 0x04
 558:	20 81       	ld	r18, Z
 55a:	8b 81       	ldd	r24, Y+3	; 0x03
 55c:	9c 81       	ldd	r25, Y+4	; 0x04
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	9c 83       	std	Y+4, r25	; 0x04
 562:	8b 83       	std	Y+3, r24	; 0x03
 564:	82 2f       	mov	r24, r18
 566:	0e 94 58 01 	call	0x2b0	; 0x2b0 <write_char>
 56a:	eb 81       	ldd	r30, Y+3	; 0x03
 56c:	fc 81       	ldd	r31, Y+4	; 0x04
 56e:	80 81       	ld	r24, Z
 570:	88 23       	and	r24, r24
 572:	81 f7       	brne	.-32     	; 0x554 <write_lcd+0x1e>
}
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	cf 91       	pop	r28
 57e:	df 91       	pop	r29
 580:	08 95       	ret

00000582 <main>:

void main(void){
 582:	df 93       	push	r29
 584:	cf 93       	push	r28
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
     init_devices();
 58a:	0e 94 92 00 	call	0x124	; 0x124 <init_devices>
     returnhome();
 58e:	0e 94 c9 01 	call	0x392	; 0x392 <returnhome>
	 clrscr();
 592:	0e 94 92 01 	call	0x324	; 0x324 <clrscr>
	 
	 
	 while(1){
	    LCDONOFF(ON);
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 00 02 	call	0x400	; 0x400 <LCDONOFF>
		delay(1000);
 59e:	88 ee       	ldi	r24, 0xE8	; 232
 5a0:	93 e0       	ldi	r25, 0x03	; 3
 5a2:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
	 	write_char('s');
 5a6:	83 e7       	ldi	r24, 0x73	; 115
 5a8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <write_char>
		LCDONOFF(OFF);
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 00 02 	call	0x400	; 0x400 <LCDONOFF>
		delay(200);
 5b4:	88 ec       	ldi	r24, 0xC8	; 200
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 b2 00 	call	0x164	; 0x164 <delay>
 5bc:	ec cf       	rjmp	.-40     	; 0x596 <main+0x14>

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>
