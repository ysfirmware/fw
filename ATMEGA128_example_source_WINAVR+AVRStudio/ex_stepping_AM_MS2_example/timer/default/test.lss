
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000390  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006b  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000125  00000000  00000000  0000041b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a3  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000021b  00000000  00000000  000005e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b9  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  c6:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <port_init>:
#define MOTOR_RIGHT_CCW	(MOTOR_PORT = MOTOR_PORT|0x08)

volatile unsigned int ti;

void port_init(void)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
  d6:	eb e3       	ldi	r30, 0x3B	; 59
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
 DDRA  = 0x00;
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
 PORTB = 0x00;
  e2:	e8 e3       	ldi	r30, 0x38	; 56
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
 DDRB  = 0x00;
  e8:	e7 e3       	ldi	r30, 0x37	; 55
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
 PORTC = 0x00; //m103 output only
  ee:	e5 e3       	ldi	r30, 0x35	; 53
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
 DDRC  = 0xff;
  f4:	e4 e3       	ldi	r30, 0x34	; 52
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	80 83       	st	Z, r24
 PORTD = 0x00;
  fc:	e2 e3       	ldi	r30, 0x32	; 50
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
 DDRD  = 0xff;
 102:	e1 e3       	ldi	r30, 0x31	; 49
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	80 83       	st	Z, r24
 PORTE = 0x00;
 10a:	e3 e2       	ldi	r30, 0x23	; 35
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	10 82       	st	Z, r1
 DDRE  = 0x00;
 110:	e2 e2       	ldi	r30, 0x22	; 34
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
 PORTF = 0x00;
 116:	e2 e6       	ldi	r30, 0x62	; 98
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	10 82       	st	Z, r1
 DDRF  = 0x00;
 11c:	e1 e6       	ldi	r30, 0x61	; 97
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
 PORTG = 0x00;
 122:	e5 e6       	ldi	r30, 0x65	; 101
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	10 82       	st	Z, r1
 DDRG  = 0x00;
 128:	e4 e6       	ldi	r30, 0x64	; 100
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	10 82       	st	Z, r1
}
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <timer0_init>:
//TIMER0 initialize - prescale:8
// WGM: Normal
// desired value: 10KHz
// actual value: 10.000KHz (0.0%)
void timer0_init(void)
{
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 TCCR0 = 0x00; //stop
 13c:	e3 e5       	ldi	r30, 0x53	; 83
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	10 82       	st	Z, r1
 ASSR  = 0x00; //set async mode
 142:	e0 e5       	ldi	r30, 0x50	; 80
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 82       	st	Z, r1
 TCNT0 = 0x83; //set count
 148:	e2 e5       	ldi	r30, 0x52	; 82
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	83 e8       	ldi	r24, 0x83	; 131
 14e:	80 83       	st	Z, r24
 OCR0  = 0x7D;
 150:	e1 e5       	ldi	r30, 0x51	; 81
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	8d e7       	ldi	r24, 0x7D	; 125
 156:	80 83       	st	Z, r24
 TCCR0 = 0x03; //start timer
 158:	e3 e5       	ldi	r30, 0x53	; 83
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	80 83       	st	Z, r24
}
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <__vector_16>:


ISR(TIMER0_OVF_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	00 90 5b 00 	lds	r0, 0x005B
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
 184:	df 93       	push	r29
 186:	cf 93       	push	r28
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 TCNT0 = 0x38; //reload counter value
 18c:	e2 e5       	ldi	r30, 0x52	; 82
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	80 83       	st	Z, r24
 MOTOR_LEFT_CLK;
 194:	a5 e3       	ldi	r26, 0x35	; 53
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e5 e3       	ldi	r30, 0x35	; 53
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	90 81       	ld	r25, Z
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	89 27       	eor	r24, r25
 1a2:	8c 93       	st	X, r24
 MOTOR_RIGHT_CLK;
 1a4:	a5 e3       	ldi	r26, 0x35	; 53
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e5 e3       	ldi	r30, 0x35	; 53
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	90 81       	ld	r25, Z
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	89 27       	eor	r24, r25
 1b2:	8c 93       	st	X, r24
if(++ti>=10000)
 1b4:	80 91 00 01 	lds	r24, 0x0100
 1b8:	90 91 01 01 	lds	r25, 0x0101
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	90 93 01 01 	sts	0x0101, r25
 1c2:	80 93 00 01 	sts	0x0100, r24
 1c6:	80 91 00 01 	lds	r24, 0x0100
 1ca:	90 91 01 01 	lds	r25, 0x0101
 1ce:	27 e2       	ldi	r18, 0x27	; 39
 1d0:	80 31       	cpi	r24, 0x10	; 16
 1d2:	92 07       	cpc	r25, r18
 1d4:	60 f0       	brcs	.+24     	; 0x1ee <__vector_16+0x88>
{
 ti=0;
 1d6:	10 92 01 01 	sts	0x0101, r1
 1da:	10 92 00 01 	sts	0x0100, r1
 PORTG^=0x03;
 1de:	a5 e6       	ldi	r26, 0x65	; 101
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	e5 e6       	ldi	r30, 0x65	; 101
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	90 81       	ld	r25, Z
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	89 27       	eor	r24, r25
 1ec:	8c 93       	st	X, r24
}

}
 1ee:	cf 91       	pop	r28
 1f0:	df 91       	pop	r29
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	00 92 5b 00 	sts	0x005B, r0
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 210:	df 93       	push	r29
 212:	cf 93       	push	r28
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 218:	f8 94       	cli
 XMCRA = 0x00; //external memory
 21a:	ed e6       	ldi	r30, 0x6D	; 109
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	10 82       	st	Z, r1
 XMCRB = 0x00; //external memory
 220:	ec e6       	ldi	r30, 0x6C	; 108
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	10 82       	st	Z, r1
 port_init();
 226:	0e 94 67 00 	call	0xce	; 0xce <port_init>
 timer0_init();
 22a:	0e 94 9a 00 	call	0x134	; 0x134 <timer0_init>

 	MCUCR = 0x00;
 22e:	e5 e5       	ldi	r30, 0x55	; 85
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	10 82       	st	Z, r1
	EICRA = 0x00; //extended ext ints
 234:	ea e6       	ldi	r30, 0x6A	; 106
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	10 82       	st	Z, r1
	EICRB = 0x00; //extended ext ints
 23a:	ea e5       	ldi	r30, 0x5A	; 90
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	10 82       	st	Z, r1
	EIMSK = 0x00;
 240:	e9 e5       	ldi	r30, 0x59	; 89
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	10 82       	st	Z, r1
	TIMSK = 0x01; //timer interrupt sources
 246:	e7 e5       	ldi	r30, 0x57	; 87
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 83       	st	Z, r24
	ETIMSK = 0x00; //extended timer interrupt sources
 24e:	ed e7       	ldi	r30, 0x7D	; 125
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	10 82       	st	Z, r1
 
 sei(); //re-enable interrupts
 254:	78 94       	sei
 //all peripherals are now initialized
}
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	08 95       	ret

0000025c <delay>:

void delay(int n)
{
 25c:	df 93       	push	r29
 25e:	cf 93       	push	r28
 260:	00 d0       	rcall	.+0      	; 0x262 <delay+0x6>
 262:	00 d0       	rcall	.+0      	; 0x264 <delay+0x8>
 264:	00 d0       	rcall	.+0      	; 0x266 <delay+0xa>
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	9e 83       	std	Y+6, r25	; 0x06
 26c:	8d 83       	std	Y+5, r24	; 0x05
	volatile int i,j;
	for(i=1;i<n;i++)
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	15 c0       	rjmp	.+42     	; 0x2a2 <delay+0x46>
	{
    	for(j=1;j<600;j++);
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9c 83       	std	Y+4, r25	; 0x04
 27e:	8b 83       	std	Y+3, r24	; 0x03
 280:	05 c0       	rjmp	.+10     	; 0x28c <delay+0x30>
 282:	8b 81       	ldd	r24, Y+3	; 0x03
 284:	9c 81       	ldd	r25, Y+4	; 0x04
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	9c 83       	std	Y+4, r25	; 0x04
 28a:	8b 83       	std	Y+3, r24	; 0x03
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	9c 81       	ldd	r25, Y+4	; 0x04
 290:	22 e0       	ldi	r18, 0x02	; 2
 292:	88 35       	cpi	r24, 0x58	; 88
 294:	92 07       	cpc	r25, r18
 296:	ac f3       	brlt	.-22     	; 0x282 <delay+0x26>
}

void delay(int n)
{
	volatile int i,j;
	for(i=1;i<n;i++)
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	9a 83       	std	Y+2, r25	; 0x02
 2a0:	89 83       	std	Y+1, r24	; 0x01
 2a2:	29 81       	ldd	r18, Y+1	; 0x01
 2a4:	3a 81       	ldd	r19, Y+2	; 0x02
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	9e 81       	ldd	r25, Y+6	; 0x06
 2aa:	28 17       	cp	r18, r24
 2ac:	39 07       	cpc	r19, r25
 2ae:	24 f3       	brlt	.-56     	; 0x278 <delay+0x1c>
	{
    	for(j=1;j<600;j++);
	}
}
 2b0:	26 96       	adiw	r28, 0x06	; 6
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	cf 91       	pop	r28
 2be:	df 91       	pop	r29
 2c0:	08 95       	ret

000002c2 <main>:


int main(void)
{
 2c2:	df 93       	push	r29
 2c4:	cf 93       	push	r28
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 //volatile unsigned char step=0;
 init_devices();
 2ca:	0e 94 08 01 	call	0x210	; 0x210 <init_devices>
 
 MOTOR_PORT_DDR = 0xff;
 2ce:	e4 e3       	ldi	r30, 0x34	; 52
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	80 83       	st	Z, r24

	MOTOR_ENABLE;
 2d6:	a5 e3       	ldi	r26, 0x35	; 53
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e5 e3       	ldi	r30, 0x35	; 53
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	80 68       	ori	r24, 0x80	; 128
 2e2:	8c 93       	st	X, r24
	MOTOR_STEP_M0;
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e3       	ldi	r30, 0x35	; 53
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 7c       	andi	r24, 0xCF	; 207
 2f0:	8c 93       	st	X, r24
    MOTOR_LEFT_CCW;
 2f2:	a5 e3       	ldi	r26, 0x35	; 53
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	e5 e3       	ldi	r30, 0x35	; 53
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	8c 93       	st	X, r24
    MOTOR_RIGHT_CW;
 300:	a5 e3       	ldi	r26, 0x35	; 53
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	e5 e3       	ldi	r30, 0x35	; 53
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	87 7f       	andi	r24, 0xF7	; 247
 30c:	8c 93       	st	X, r24
	PORTG=0x01;
 30e:	e5 e6       	ldi	r30, 0x65	; 101
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
 316:	ff cf       	rjmp	.-2      	; 0x316 <main+0x54>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
