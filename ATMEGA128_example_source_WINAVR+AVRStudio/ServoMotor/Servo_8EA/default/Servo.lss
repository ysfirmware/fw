
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000388  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800108  00800108  00000424  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000078  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000160  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b6  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000dc  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 22 01 	call	0x244	; 0x244 <main>
  c6:	0c 94 c2 01 	jmp	0x384	; 0x384 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <port_init>:

unsigned int Servo[8]={0,};
volatile unsigned int count;

void port_init(void)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
  d6:	eb e3       	ldi	r30, 0x3B	; 59
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
 DDRA  = 0x00;
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
 PORTB = 0x00;
  e2:	e8 e3       	ldi	r30, 0x38	; 56
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
 DDRB  = 0x00;
  e8:	e7 e3       	ldi	r30, 0x37	; 55
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
 PORTC = 0x00; //m103 output only
  ee:	e5 e3       	ldi	r30, 0x35	; 53
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
 DDRC  = 0xFF;
  f4:	e4 e3       	ldi	r30, 0x34	; 52
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	80 83       	st	Z, r24
 PORTD = 0x00;
  fc:	e2 e3       	ldi	r30, 0x32	; 50
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
 DDRD  = 0x00;
 102:	e1 e3       	ldi	r30, 0x31	; 49
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	10 82       	st	Z, r1
 PORTE = 0x00;
 108:	e3 e2       	ldi	r30, 0x23	; 35
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	10 82       	st	Z, r1
 DDRE  = 0x00;
 10e:	e2 e2       	ldi	r30, 0x22	; 34
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
 PORTF = 0x00;
 114:	e2 e6       	ldi	r30, 0x62	; 98
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	10 82       	st	Z, r1
 DDRF  = 0x00;
 11a:	e1 e6       	ldi	r30, 0x61	; 97
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	10 82       	st	Z, r1
 PORTG = 0x00;
 120:	e5 e6       	ldi	r30, 0x65	; 101
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	10 82       	st	Z, r1
 DDRG  = 0x03;
 126:	e4 e6       	ldi	r30, 0x64	; 100
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	80 83       	st	Z, r24
}
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <timer0_init>:
//TIMER0 initialize - prescale:32
// WGM: Normal
// desired value: 4uSec
// actual value:  4.000uSec (0.0%)
void timer0_init(void)
{
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 TCCR0 = 0x00; //stop
 13c:	e3 e5       	ldi	r30, 0x53	; 83
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	10 82       	st	Z, r1
 ASSR  = 0x00; //set async mode
 142:	e0 e5       	ldi	r30, 0x50	; 80
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 82       	st	Z, r1
 TCNT0 = 0xFE; //set count
 148:	e2 e5       	ldi	r30, 0x52	; 82
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	8e ef       	ldi	r24, 0xFE	; 254
 14e:	80 83       	st	Z, r24
 OCR0  = 0x02;
 150:	e1 e5       	ldi	r30, 0x51	; 81
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	80 83       	st	Z, r24
 TCCR0 = 0x03; //start timer
 158:	e3 e5       	ldi	r30, 0x53	; 83
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	80 83       	st	Z, r24
}
 160:	cf 91       	pop	r28
 162:	df 91       	pop	r29
 164:	08 95       	ret

00000166 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	00 90 5b 00 	lds	r0, 0x005B
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 TCNT0 = 0xFF; //reload counter value
 186:	e2 e5       	ldi	r30, 0x52	; 82
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 83       	st	Z, r24
 count++;
 18e:	80 91 18 01 	lds	r24, 0x0118
 192:	90 91 19 01 	lds	r25, 0x0119
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 19 01 	sts	0x0119, r25
 19c:	80 93 18 01 	sts	0x0118, r24
}
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	00 92 5b 00 	sts	0x005B, r0
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 1c4:	f8 94       	cli
 XMCRA = 0x00; //external memory
 1c6:	ed e6       	ldi	r30, 0x6D	; 109
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	10 82       	st	Z, r1
 XMCRB = 0x00; //external memory
 1cc:	ec e6       	ldi	r30, 0x6C	; 108
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	10 82       	st	Z, r1
 port_init();
 1d2:	0e 94 67 00 	call	0xce	; 0xce <port_init>
 timer0_init();
 1d6:	0e 94 9a 00 	call	0x134	; 0x134 <timer0_init>

 MCUCR = 0x00;
 1da:	e5 e5       	ldi	r30, 0x55	; 85
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 1e0:	ea e6       	ldi	r30, 0x6A	; 106
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	10 82       	st	Z, r1
 EICRB = 0x00; //extended ext ints
 1e6:	ea e5       	ldi	r30, 0x5A	; 90
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	10 82       	st	Z, r1
 EIMSK = 0x00;
 1ec:	e9 e5       	ldi	r30, 0x59	; 89
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	10 82       	st	Z, r1
 TIMSK = 0x01; //timer interrupt sources
 1f2:	e7 e5       	ldi	r30, 0x57	; 87
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 83       	st	Z, r24
 ETIMSK = 0x00; //extended timer interrupt sources
 1fa:	ed e7       	ldi	r30, 0x7D	; 125
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	10 82       	st	Z, r1
 
 sei(); //re-enable interrupts
 200:	78 94       	sei
 //all peripherals are now initialized
}
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <delay>:
void delay(unsigned int cnt)
{
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	00 d0       	rcall	.+0      	; 0x20e <delay+0x6>
 20e:	00 d0       	rcall	.+0      	; 0x210 <delay+0x8>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	9c 83       	std	Y+4, r25	; 0x04
 216:	8b 83       	std	Y+3, r24	; 0x03
 unsigned int i;
 for(i=0; i<cnt; i++) ;
 218:	1a 82       	std	Y+2, r1	; 0x02
 21a:	19 82       	std	Y+1, r1	; 0x01
 21c:	05 c0       	rjmp	.+10     	; 0x228 <delay+0x20>
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	9a 83       	std	Y+2, r25	; 0x02
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	29 81       	ldd	r18, Y+1	; 0x01
 22a:	3a 81       	ldd	r19, Y+2	; 0x02
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	28 17       	cp	r18, r24
 232:	39 07       	cpc	r19, r25
 234:	a0 f3       	brcs	.-24     	; 0x21e <delay+0x16>
 }
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	08 95       	ret

00000244 <main>:
//

void main(void)
{
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	2e 97       	sbiw	r28, 0x0e	; 14
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 unsigned char i;
 unsigned char bitreset[8]={0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F}; 
 258:	ce 01       	movw	r24, r28
 25a:	02 96       	adiw	r24, 0x02	; 2
 25c:	9b 87       	std	Y+11, r25	; 0x0b
 25e:	8a 87       	std	Y+10, r24	; 0x0a
 260:	e0 e0       	ldi	r30, 0x00	; 0
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	fd 87       	std	Y+13, r31	; 0x0d
 266:	ec 87       	std	Y+12, r30	; 0x0c
 268:	f8 e0       	ldi	r31, 0x08	; 8
 26a:	fe 87       	std	Y+14, r31	; 0x0e
 26c:	ec 85       	ldd	r30, Y+12	; 0x0c
 26e:	fd 85       	ldd	r31, Y+13	; 0x0d
 270:	00 80       	ld	r0, Z
 272:	8c 85       	ldd	r24, Y+12	; 0x0c
 274:	9d 85       	ldd	r25, Y+13	; 0x0d
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	9d 87       	std	Y+13, r25	; 0x0d
 27a:	8c 87       	std	Y+12, r24	; 0x0c
 27c:	ea 85       	ldd	r30, Y+10	; 0x0a
 27e:	fb 85       	ldd	r31, Y+11	; 0x0b
 280:	00 82       	st	Z, r0
 282:	8a 85       	ldd	r24, Y+10	; 0x0a
 284:	9b 85       	ldd	r25, Y+11	; 0x0b
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	9b 87       	std	Y+11, r25	; 0x0b
 28a:	8a 87       	std	Y+10, r24	; 0x0a
 28c:	9e 85       	ldd	r25, Y+14	; 0x0e
 28e:	91 50       	subi	r25, 0x01	; 1
 290:	9e 87       	std	Y+14, r25	; 0x0e
 292:	ee 85       	ldd	r30, Y+14	; 0x0e
 294:	ee 23       	and	r30, r30
 296:	51 f7       	brne	.-44     	; 0x26c <main+0x28>
 init_devices();
 298:	0e 94 de 00 	call	0x1bc	; 0x1bc <init_devices>
 delay(1000);
 29c:	88 ee       	ldi	r24, 0xE8	; 232
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	0e 94 04 01 	call	0x208	; 0x208 <delay>
 //MIN=80, MAX=315
 Servo[0]= 80;
 2a4:	80 e5       	ldi	r24, 0x50	; 80
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 09 01 	sts	0x0109, r25
 2ac:	80 93 08 01 	sts	0x0108, r24
 Servo[1]= 110;
 2b0:	8e e6       	ldi	r24, 0x6E	; 110
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	90 93 0b 01 	sts	0x010B, r25
 2b8:	80 93 0a 01 	sts	0x010A, r24
 Servo[2]= 145;
 2bc:	81 e9       	ldi	r24, 0x91	; 145
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 0d 01 	sts	0x010D, r25
 2c4:	80 93 0c 01 	sts	0x010C, r24
 Servo[3]= 175;
 2c8:	8f ea       	ldi	r24, 0xAF	; 175
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 0f 01 	sts	0x010F, r25
 2d0:	80 93 0e 01 	sts	0x010E, r24
 Servo[4]= 210;
 2d4:	82 ed       	ldi	r24, 0xD2	; 210
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 11 01 	sts	0x0111, r25
 2dc:	80 93 10 01 	sts	0x0110, r24
 Servo[5]= 240;
 2e0:	80 ef       	ldi	r24, 0xF0	; 240
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 13 01 	sts	0x0113, r25
 2e8:	80 93 12 01 	sts	0x0112, r24
 Servo[6]= 275;
 2ec:	83 e1       	ldi	r24, 0x13	; 19
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	90 93 15 01 	sts	0x0115, r25
 2f4:	80 93 14 01 	sts	0x0114, r24
 Servo[7]= 315;
 2f8:	8b e3       	ldi	r24, 0x3B	; 59
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	90 93 17 01 	sts	0x0117, r25
 300:	80 93 16 01 	sts	0x0116, r24
 delay(1000);
 304:	88 ee       	ldi	r24, 0xE8	; 232
 306:	93 e0       	ldi	r25, 0x03	; 3
 308:	0e 94 04 01 	call	0x208	; 0x208 <delay>

 while(1){
 
	if(count>=4999){
 30c:	80 91 18 01 	lds	r24, 0x0118
 310:	90 91 19 01 	lds	r25, 0x0119
 314:	f3 e1       	ldi	r31, 0x13	; 19
 316:	87 38       	cpi	r24, 0x87	; 135
 318:	9f 07       	cpc	r25, r31
 31a:	40 f0       	brcs	.+16     	; 0x32c <main+0xe8>
 		SERVO_PORT = 0xFF;
 31c:	e5 e3       	ldi	r30, 0x35	; 53
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	80 83       	st	Z, r24
		count = 0;
 324:	10 92 19 01 	sts	0x0119, r1
 328:	10 92 18 01 	sts	0x0118, r1
	}
	cli();
 32c:	f8 94       	cli
	for(i=0; i<8; i++){
 32e:	19 82       	std	Y+1, r1	; 0x01
 330:	24 c0       	rjmp	.+72     	; 0x37a <main+0x136>
		if(Servo[i] < count){SERVO_PORT &= bitreset[i];}
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	fc 01       	movw	r30, r24
 33e:	e8 5f       	subi	r30, 0xF8	; 248
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	20 81       	ld	r18, Z
 344:	31 81       	ldd	r19, Z+1	; 0x01
 346:	80 91 18 01 	lds	r24, 0x0118
 34a:	90 91 19 01 	lds	r25, 0x0119
 34e:	28 17       	cp	r18, r24
 350:	39 07       	cpc	r19, r25
 352:	80 f4       	brcc	.+32     	; 0x374 <main+0x130>
 354:	a5 e3       	ldi	r26, 0x35	; 53
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e5 e3       	ldi	r30, 0x35	; 53
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	40 81       	ld	r20, Z
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	ce 01       	movw	r24, r28
 366:	02 96       	adiw	r24, 0x02	; 2
 368:	fc 01       	movw	r30, r24
 36a:	e2 0f       	add	r30, r18
 36c:	f3 1f       	adc	r31, r19
 36e:	80 81       	ld	r24, Z
 370:	84 23       	and	r24, r20
 372:	8c 93       	st	X, r24
	if(count>=4999){
 		SERVO_PORT = 0xFF;
		count = 0;
	}
	cli();
	for(i=0; i<8; i++){
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	88 30       	cpi	r24, 0x08	; 8
 37e:	c8 f2       	brcs	.-78     	; 0x332 <main+0xee>
		if(Servo[i] < count){SERVO_PORT &= bitreset[i];}
		}
		sei();
 380:	78 94       	sei
 382:	c4 cf       	rjmp	.-120    	; 0x30c <main+0xc8>

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
