
ex_servo_24ea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000986  00000a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800128  00800128  00000a42  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000bf  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002e8  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015e  00000000  00000000  00000e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d8  00000000  00000000  00000f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 36       	cpi	r26, 0x66	; 102
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 be 02 	call	0x57c	; 0x57c <main>
  c6:	0c 94 c1 04 	jmp	0x982	; 0x982 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Putchar>:
void tx0Char(char message);
void tx1Char(char message);


static int Putchar(char c, FILE *stream)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <Putchar+0x6>
  d4:	0f 92       	push	r0
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	89 83       	std	Y+1, r24	; 0x01
  dc:	7b 83       	std	Y+3, r23	; 0x03
  de:	6a 83       	std	Y+2, r22	; 0x02
	tx0Char(c);
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	0e 94 7e 00 	call	0xfc	; 0xfc <tx0Char>
    tx1Char(c);
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	0e 94 98 00 	call	0x130	; 0x130 <tx1Char>
	return 0;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
      
}
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <tx0Char>:

// UART0 을 이용한 출력
void tx0Char(char message)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	0f 92       	push	r0
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	89 83       	std	Y+1, r24	; 0x01
	while (((UCSR0A>>UDRE0)&0x01) == 0) ;  // UDRE, data register empty        
 108:	eb e2       	ldi	r30, 0x2B	; 43
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 95       	swap	r24
 110:	86 95       	lsr	r24
 112:	87 70       	andi	r24, 0x07	; 7
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	81 70       	andi	r24, 0x01	; 1
 11a:	90 70       	andi	r25, 0x00	; 0
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	a1 f3       	breq	.-24     	; 0x108 <tx0Char+0xc>
    UDR0 = message;
 120:	ec e2       	ldi	r30, 0x2C	; 44
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	80 83       	st	Z, r24
}
 128:	0f 90       	pop	r0
 12a:	cf 91       	pop	r28
 12c:	df 91       	pop	r29
 12e:	08 95       	ret

00000130 <tx1Char>:

// UART1 을 이용한 출력
void tx1Char(char message)
{
 130:	df 93       	push	r29
 132:	cf 93       	push	r28
 134:	0f 92       	push	r0
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	89 83       	std	Y+1, r24	; 0x01
	while (((UCSR1A>>UDRE1)&0x01) == 0) ;  // UDRE, data register empty        
 13c:	eb e9       	ldi	r30, 0x9B	; 155
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 95       	swap	r24
 144:	86 95       	lsr	r24
 146:	87 70       	andi	r24, 0x07	; 7
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	81 70       	andi	r24, 0x01	; 1
 14e:	90 70       	andi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	a1 f3       	breq	.-24     	; 0x13c <tx1Char+0xc>
    UDR1 = message;
 154:	ec e9       	ldi	r30, 0x9C	; 156
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	80 83       	st	Z, r24
}
 15c:	0f 90       	pop	r0
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <Getchar>:


// scanf 함수 사용시 추가할 것.
int Getchar(void)
{
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
    while ((UCSR0A & 0x80) == 0);
 16c:	eb e2       	ldi	r30, 0x2B	; 43
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	dc f7       	brge	.-10     	; 0x16c <Getchar+0x8>
    return UDR0;
 176:	ec e2       	ldi	r30, 0x2C	; 44
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
}
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <port_init>:


void port_init(void)
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
 18e:	eb e3       	ldi	r30, 0x3B	; 59
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	10 82       	st	Z, r1
 DDRA  = 0x00;
 194:	ea e3       	ldi	r30, 0x3A	; 58
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	10 82       	st	Z, r1
 PORTB = 0x00;
 19a:	e8 e3       	ldi	r30, 0x38	; 56
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	10 82       	st	Z, r1
 DDRB  = 0x00;
 1a0:	e7 e3       	ldi	r30, 0x37	; 55
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	10 82       	st	Z, r1
 PORTC = 0x00; //m103 output only
 1a6:	e5 e3       	ldi	r30, 0x35	; 53
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	10 82       	st	Z, r1
 DDRC  = 0x00;
 1ac:	e4 e3       	ldi	r30, 0x34	; 52
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	10 82       	st	Z, r1
 PORTD = 0x00;
 1b2:	e2 e3       	ldi	r30, 0x32	; 50
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	10 82       	st	Z, r1
 DDRD  = 0xFF;
 1b8:	e1 e3       	ldi	r30, 0x31	; 49
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	80 83       	st	Z, r24
 PORTE = 0x00;
 1c0:	e3 e2       	ldi	r30, 0x23	; 35
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	10 82       	st	Z, r1
 DDRE  = 0x00;
 1c6:	e2 e2       	ldi	r30, 0x22	; 34
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	10 82       	st	Z, r1
 PORTF = 0x00;
 1cc:	e2 e6       	ldi	r30, 0x62	; 98
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	10 82       	st	Z, r1
 DDRF  = 0x00;
 1d2:	e1 e6       	ldi	r30, 0x61	; 97
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	10 82       	st	Z, r1
 PORTG = 0x00;
 1d8:	e5 e6       	ldi	r30, 0x65	; 101
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	10 82       	st	Z, r1
 DDRG  = 0x00;
 1de:	e4 e6       	ldi	r30, 0x64	; 100
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	10 82       	st	Z, r1
}
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <timer0_init>:
//TIMER0 initialize - prescale:8
// WGM: Normal
// desired value: 1uSec
// actual value:  1.000uSec (0.0%)
void timer0_init(void)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 TCCR0 = 0x00; //stop
 1f2:	e3 e5       	ldi	r30, 0x53	; 83
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	10 82       	st	Z, r1
 ASSR  = 0x00; //set async mode
 1f8:	e0 e5       	ldi	r30, 0x50	; 80
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	10 82       	st	Z, r1
 TCNT0 = 0xFE; //set count
 1fe:	e2 e5       	ldi	r30, 0x52	; 82
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	8e ef       	ldi	r24, 0xFE	; 254
 204:	80 83       	st	Z, r24
 OCR0  = 0x02;
 206:	e1 e5       	ldi	r30, 0x51	; 81
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	80 83       	st	Z, r24
 TCCR0 = 0x02; //start timer
 20e:	e3 e5       	ldi	r30, 0x53	; 83
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
}
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	00 90 5b 00 	lds	r0, 0x005B
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
 23e:	df 93       	push	r29
 240:	cf 93       	push	r28
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 TCNT0 = 0xFE; //reload counter value
 246:	e2 e5       	ldi	r30, 0x52	; 82
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	8e ef       	ldi	r24, 0xFE	; 254
 24c:	80 83       	st	Z, r24
 t100ustimer++;
 24e:	80 91 28 01 	lds	r24, 0x0128
 252:	90 91 29 01 	lds	r25, 0x0129
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	90 93 29 01 	sts	0x0129, r25
 25c:	80 93 28 01 	sts	0x0128, r24
 if(t100ustimer > t20ms){
 260:	80 91 28 01 	lds	r24, 0x0128
 264:	90 91 29 01 	lds	r25, 0x0129
 268:	83 38       	cpi	r24, 0x83	; 131
 26a:	91 05       	cpc	r25, r1
 26c:	24 f0       	brlt	.+8      	; 0x276 <__vector_16+0x5a>
 	t100ustimer = t20mstimer_expired;
 26e:	10 92 29 01 	sts	0x0129, r1
 272:	10 92 28 01 	sts	0x0128, r1
 }
 for(servo_num=0;servo_num<8;servo_num++){
 276:	10 92 5b 01 	sts	0x015B, r1
 27a:	10 92 5a 01 	sts	0x015A, r1
 27e:	45 c0       	rjmp	.+138    	; 0x30a <__vector_16+0xee>
	if(servo[servo_num] > t100ustimer){
 280:	80 91 5a 01 	lds	r24, 0x015A
 284:	90 91 5b 01 	lds	r25, 0x015B
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	fc 01       	movw	r30, r24
 28e:	e6 5d       	subi	r30, 0xD6	; 214
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	20 81       	ld	r18, Z
 294:	31 81       	ldd	r19, Z+1	; 0x01
 296:	80 91 28 01 	lds	r24, 0x0128
 29a:	90 91 29 01 	lds	r25, 0x0129
 29e:	82 17       	cp	r24, r18
 2a0:	93 07       	cpc	r25, r19
 2a2:	ac f4       	brge	.+42     	; 0x2ce <__vector_16+0xb2>
		SERVO_PORT1 = SERVO_PORT1|(0x01<<servo_num);
 2a4:	a2 e3       	ldi	r26, 0x32	; 50
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e2 e3       	ldi	r30, 0x32	; 50
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	20 91 5a 01 	lds	r18, 0x015A
 2b4:	30 91 5b 01 	lds	r19, 0x015B
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__vector_16+0xa8>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <__vector_16+0xa4>
 2c8:	84 2b       	or	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	15 c0       	rjmp	.+42     	; 0x2f8 <__vector_16+0xdc>
 	}else{
		SERVO_PORT1 = SERVO_PORT1&(~(0x01<<servo_num));
 2ce:	a2 e3       	ldi	r26, 0x32	; 50
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	e2 e3       	ldi	r30, 0x32	; 50
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	20 91 5a 01 	lds	r18, 0x015A
 2de:	30 91 5b 01 	lds	r19, 0x015B
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 2e       	mov	r0, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <__vector_16+0xd2>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <__vector_16+0xce>
 2f2:	80 95       	com	r24
 2f4:	84 23       	and	r24, r20
 2f6:	8c 93       	st	X, r24
 TCNT0 = 0xFE; //reload counter value
 t100ustimer++;
 if(t100ustimer > t20ms){
 	t100ustimer = t20mstimer_expired;
 }
 for(servo_num=0;servo_num<8;servo_num++){
 2f8:	80 91 5a 01 	lds	r24, 0x015A
 2fc:	90 91 5b 01 	lds	r25, 0x015B
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 5b 01 	sts	0x015B, r25
 306:	80 93 5a 01 	sts	0x015A, r24
 30a:	80 91 5a 01 	lds	r24, 0x015A
 30e:	90 91 5b 01 	lds	r25, 0x015B
 312:	88 30       	cpi	r24, 0x08	; 8
 314:	91 05       	cpc	r25, r1
 316:	0c f4       	brge	.+2      	; 0x31a <__vector_16+0xfe>
 318:	b3 cf       	rjmp	.-154    	; 0x280 <__vector_16+0x64>
		SERVO_PORT1 = SERVO_PORT1|(0x01<<servo_num);
 	}else{
		SERVO_PORT1 = SERVO_PORT1&(~(0x01<<servo_num));
 	}
 }
 for(servo_num=0;servo_num<8;servo_num++){
 31a:	10 92 5b 01 	sts	0x015B, r1
 31e:	10 92 5a 01 	sts	0x015A, r1
 322:	46 c0       	rjmp	.+140    	; 0x3b0 <__vector_16+0x194>
	if(servo[servo_num+8] > t100ustimer){
 324:	80 91 5a 01 	lds	r24, 0x015A
 328:	90 91 5b 01 	lds	r25, 0x015B
 32c:	08 96       	adiw	r24, 0x08	; 8
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	fc 01       	movw	r30, r24
 334:	e6 5d       	subi	r30, 0xD6	; 214
 336:	fe 4f       	sbci	r31, 0xFE	; 254
 338:	20 81       	ld	r18, Z
 33a:	31 81       	ldd	r19, Z+1	; 0x01
 33c:	80 91 28 01 	lds	r24, 0x0128
 340:	90 91 29 01 	lds	r25, 0x0129
 344:	82 17       	cp	r24, r18
 346:	93 07       	cpc	r25, r19
 348:	ac f4       	brge	.+42     	; 0x374 <__vector_16+0x158>
 		SERVO_PORT2 = SERVO_PORT2|(0x01<<servo_num);
 34a:	a5 e3       	ldi	r26, 0x35	; 53
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	e5 e3       	ldi	r30, 0x35	; 53
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	48 2f       	mov	r20, r24
 356:	20 91 5a 01 	lds	r18, 0x015A
 35a:	30 91 5b 01 	lds	r19, 0x015B
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 2e       	mov	r0, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <__vector_16+0x14e>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <__vector_16+0x14a>
 36e:	84 2b       	or	r24, r20
 370:	8c 93       	st	X, r24
 372:	15 c0       	rjmp	.+42     	; 0x39e <__vector_16+0x182>
	}else{
		SERVO_PORT2 = SERVO_PORT2&(~(0x01<<servo_num));
 374:	a5 e3       	ldi	r26, 0x35	; 53
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e5 e3       	ldi	r30, 0x35	; 53
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	48 2f       	mov	r20, r24
 380:	20 91 5a 01 	lds	r18, 0x015A
 384:	30 91 5b 01 	lds	r19, 0x015B
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <__vector_16+0x178>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <__vector_16+0x174>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
		SERVO_PORT1 = SERVO_PORT1|(0x01<<servo_num);
 	}else{
		SERVO_PORT1 = SERVO_PORT1&(~(0x01<<servo_num));
 	}
 }
 for(servo_num=0;servo_num<8;servo_num++){
 39e:	80 91 5a 01 	lds	r24, 0x015A
 3a2:	90 91 5b 01 	lds	r25, 0x015B
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	90 93 5b 01 	sts	0x015B, r25
 3ac:	80 93 5a 01 	sts	0x015A, r24
 3b0:	80 91 5a 01 	lds	r24, 0x015A
 3b4:	90 91 5b 01 	lds	r25, 0x015B
 3b8:	88 30       	cpi	r24, 0x08	; 8
 3ba:	91 05       	cpc	r25, r1
 3bc:	0c f4       	brge	.+2      	; 0x3c0 <__vector_16+0x1a4>
 3be:	b2 cf       	rjmp	.-156    	; 0x324 <__vector_16+0x108>
 		SERVO_PORT2 = SERVO_PORT2|(0x01<<servo_num);
	}else{
		SERVO_PORT2 = SERVO_PORT2&(~(0x01<<servo_num));
	}
 }
 for(servo_num=0;servo_num<8;servo_num++){
 3c0:	10 92 5b 01 	sts	0x015B, r1
 3c4:	10 92 5a 01 	sts	0x015A, r1
 3c8:	46 c0       	rjmp	.+140    	; 0x456 <__vector_16+0x23a>
	if(servo[servo_num+16] > t100ustimer){
 3ca:	80 91 5a 01 	lds	r24, 0x015A
 3ce:	90 91 5b 01 	lds	r25, 0x015B
 3d2:	40 96       	adiw	r24, 0x10	; 16
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	fc 01       	movw	r30, r24
 3da:	e6 5d       	subi	r30, 0xD6	; 214
 3dc:	fe 4f       	sbci	r31, 0xFE	; 254
 3de:	20 81       	ld	r18, Z
 3e0:	31 81       	ldd	r19, Z+1	; 0x01
 3e2:	80 91 28 01 	lds	r24, 0x0128
 3e6:	90 91 29 01 	lds	r25, 0x0129
 3ea:	82 17       	cp	r24, r18
 3ec:	93 07       	cpc	r25, r19
 3ee:	ac f4       	brge	.+42     	; 0x41a <__vector_16+0x1fe>
 		SERVO_PORT3 = SERVO_PORT3|(0x01<<servo_num);
 3f0:	a8 e3       	ldi	r26, 0x38	; 56
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	e8 e3       	ldi	r30, 0x38	; 56
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	20 91 5a 01 	lds	r18, 0x015A
 400:	30 91 5b 01 	lds	r19, 0x015B
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 2e       	mov	r0, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__vector_16+0x1f4>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <__vector_16+0x1f0>
 414:	84 2b       	or	r24, r20
 416:	8c 93       	st	X, r24
 418:	15 c0       	rjmp	.+42     	; 0x444 <__vector_16+0x228>
	}else{
		SERVO_PORT3 = SERVO_PORT3&(~(0x01<<servo_num));
 41a:	a8 e3       	ldi	r26, 0x38	; 56
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e8 e3       	ldi	r30, 0x38	; 56
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	48 2f       	mov	r20, r24
 426:	20 91 5a 01 	lds	r18, 0x015A
 42a:	30 91 5b 01 	lds	r19, 0x015B
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 2e       	mov	r0, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <__vector_16+0x21e>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__vector_16+0x21a>
 43e:	80 95       	com	r24
 440:	84 23       	and	r24, r20
 442:	8c 93       	st	X, r24
 		SERVO_PORT2 = SERVO_PORT2|(0x01<<servo_num);
	}else{
		SERVO_PORT2 = SERVO_PORT2&(~(0x01<<servo_num));
	}
 }
 for(servo_num=0;servo_num<8;servo_num++){
 444:	80 91 5a 01 	lds	r24, 0x015A
 448:	90 91 5b 01 	lds	r25, 0x015B
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	90 93 5b 01 	sts	0x015B, r25
 452:	80 93 5a 01 	sts	0x015A, r24
 456:	80 91 5a 01 	lds	r24, 0x015A
 45a:	90 91 5b 01 	lds	r25, 0x015B
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	91 05       	cpc	r25, r1
 462:	0c f4       	brge	.+2      	; 0x466 <__vector_16+0x24a>
 464:	b2 cf       	rjmp	.-156    	; 0x3ca <__vector_16+0x1ae>
 		SERVO_PORT3 = SERVO_PORT3|(0x01<<servo_num);
	}else{
		SERVO_PORT3 = SERVO_PORT3&(~(0x01<<servo_num));
	}
 } 
}
 466:	cf 91       	pop	r28
 468:	df 91       	pop	r29
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	00 92 5b 00 	sts	0x005B, r0
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <uart0_init>:
// desired baud rate: 9600
// actual: baud rate:9615 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 48c:	df 93       	push	r29
 48e:	cf 93       	push	r28
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
 494:	ea e2       	ldi	r30, 0x2A	; 42
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	10 82       	st	Z, r1
 UCSR0A = 0x00;
 49a:	eb e2       	ldi	r30, 0x2B	; 43
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	10 82       	st	Z, r1
 UCSR0C = 0x06;
 4a0:	e5 e9       	ldi	r30, 0x95	; 149
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	86 e0       	ldi	r24, 0x06	; 6
 4a6:	80 83       	st	Z, r24
 UBRR0L = 0x67; //set baud rate lo
 4a8:	e9 e2       	ldi	r30, 0x29	; 41
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	87 e6       	ldi	r24, 0x67	; 103
 4ae:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
 4b0:	e0 e9       	ldi	r30, 0x90	; 144
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	10 82       	st	Z, r1
 UCSR0B = 0xF8;
 4b6:	ea e2       	ldi	r30, 0x2A	; 42
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	88 ef       	ldi	r24, 0xF8	; 248
 4bc:	80 83       	st	Z, r24
}
 4be:	cf 91       	pop	r28
 4c0:	df 91       	pop	r29
 4c2:	08 95       	ret

000004c4 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 4c4:	df 93       	push	r29
 4c6:	cf 93       	push	r28
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 4cc:	f8 94       	cli
 XMCRA = 0x00; //external memory
 4ce:	ed e6       	ldi	r30, 0x6D	; 109
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	10 82       	st	Z, r1
 XMCRB = 0x00; //external memory
 4d4:	ec e6       	ldi	r30, 0x6C	; 108
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	10 82       	st	Z, r1
 port_init();
 4da:	0e 94 c3 00 	call	0x186	; 0x186 <port_init>
 timer0_init();
 4de:	0e 94 f5 00 	call	0x1ea	; 0x1ea <timer0_init>
 uart0_init();
 4e2:	0e 94 46 02 	call	0x48c	; 0x48c <uart0_init>
 fdevopen(Putchar,0);
 4e6:	87 e6       	ldi	r24, 0x67	; 103
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	0e 94 18 03 	call	0x630	; 0x630 <fdevopen>

 MCUCR = 0x00;
 4f2:	e5 e5       	ldi	r30, 0x55	; 85
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 4f8:	ea e6       	ldi	r30, 0x6A	; 106
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	10 82       	st	Z, r1
 EICRB = 0x00; //extended ext ints
 4fe:	ea e5       	ldi	r30, 0x5A	; 90
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	10 82       	st	Z, r1
 EIMSK = 0x00;
 504:	e9 e5       	ldi	r30, 0x59	; 89
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	10 82       	st	Z, r1
 TIMSK = 0x01; //timer interrupt sources
 50a:	e7 e5       	ldi	r30, 0x57	; 87
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	80 83       	st	Z, r24
 ETIMSK = 0x00; //extended timer interrupt sources
 512:	ed e7       	ldi	r30, 0x7D	; 125
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	10 82       	st	Z, r1
 
 sei(); //re-enable interrupts
 518:	78 94       	sei
 //all peripherals are now initialized
}
 51a:	cf 91       	pop	r28
 51c:	df 91       	pop	r29
 51e:	08 95       	ret

00000520 <delay>:

void delay(int delaytime){
 520:	df 93       	push	r29
 522:	cf 93       	push	r28
 524:	00 d0       	rcall	.+0      	; 0x526 <delay+0x6>
 526:	00 d0       	rcall	.+0      	; 0x528 <delay+0x8>
 528:	00 d0       	rcall	.+0      	; 0x52a <delay+0xa>
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	9e 83       	std	Y+6, r25	; 0x06
 530:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<delaytime;i++){
 532:	1c 82       	std	Y+4, r1	; 0x04
 534:	1b 82       	std	Y+3, r1	; 0x03
 536:	12 c0       	rjmp	.+36     	; 0x55c <delay+0x3c>
		for(j=0;j<100;j++){
 538:	1a 82       	std	Y+2, r1	; 0x02
 53a:	19 82       	std	Y+1, r1	; 0x01
 53c:	05 c0       	rjmp	.+10     	; 0x548 <delay+0x28>
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	01 96       	adiw	r24, 0x01	; 1
 544:	9a 83       	std	Y+2, r25	; 0x02
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	9a 81       	ldd	r25, Y+2	; 0x02
 54c:	84 36       	cpi	r24, 0x64	; 100
 54e:	91 05       	cpc	r25, r1
 550:	b4 f3       	brlt	.-20     	; 0x53e <delay+0x1e>
 //all peripherals are now initialized
}

void delay(int delaytime){
	int i,j;
	for(i=0;i<delaytime;i++){
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	9c 81       	ldd	r25, Y+4	; 0x04
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	9c 83       	std	Y+4, r25	; 0x04
 55a:	8b 83       	std	Y+3, r24	; 0x03
 55c:	2b 81       	ldd	r18, Y+3	; 0x03
 55e:	3c 81       	ldd	r19, Y+4	; 0x04
 560:	8d 81       	ldd	r24, Y+5	; 0x05
 562:	9e 81       	ldd	r25, Y+6	; 0x06
 564:	28 17       	cp	r18, r24
 566:	39 07       	cpc	r19, r25
 568:	3c f3       	brlt	.-50     	; 0x538 <delay+0x18>
		for(j=0;j<100;j++){
		}
	}
}
 56a:	26 96       	adiw	r28, 0x06	; 6
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	de bf       	out	0x3e, r29	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	cd bf       	out	0x3d, r28	; 61
 576:	cf 91       	pop	r28
 578:	df 91       	pop	r29
 57a:	08 95       	ret

0000057c <main>:

//
void main(void)
{
 57c:	df 93       	push	r29
 57e:	cf 93       	push	r28
 580:	00 d0       	rcall	.+0      	; 0x582 <main+0x6>
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 int i;
 init_devices();
 586:	0e 94 62 02 	call	0x4c4	; 0x4c4 <init_devices>
 
 for(i=0;i<MAX_SERVO;i++){
 58a:	1a 82       	std	Y+2, r1	; 0x02
 58c:	19 82       	std	Y+1, r1	; 0x01
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <main+0x30>
 	servo[i]=0;
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	9a 81       	ldd	r25, Y+2	; 0x02
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	fc 01       	movw	r30, r24
 59a:	e6 5d       	subi	r30, 0xD6	; 214
 59c:	fe 4f       	sbci	r31, 0xFE	; 254
 59e:	11 82       	std	Z+1, r1	; 0x01
 5a0:	10 82       	st	Z, r1
void main(void)
{
 int i;
 init_devices();
 
 for(i=0;i<MAX_SERVO;i++){
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	9a 81       	ldd	r25, Y+2	; 0x02
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	9a 83       	std	Y+2, r25	; 0x02
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
 5ae:	9a 81       	ldd	r25, Y+2	; 0x02
 5b0:	88 31       	cpi	r24, 0x18	; 24
 5b2:	91 05       	cpc	r25, r1
 5b4:	6c f3       	brlt	.-38     	; 0x590 <main+0x14>
 	servo[i]=0;
 } 
 //insert your functional code here...
 printf("\r\n\r\n Testing Servo Motor Ver1.0\r\n");
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	0e 94 64 03 	call	0x6c8	; 0x6c8 <puts>
 
 while(1){
	for(i=0;i<MAX_SERVO;i++){
 5be:	1a 82       	std	Y+2, r1	; 0x02
 5c0:	19 82       	std	Y+1, r1	; 0x01
 5c2:	10 c0       	rjmp	.+32     	; 0x5e4 <main+0x68>
 	servo[i]=5;}
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	9a 81       	ldd	r25, Y+2	; 0x02
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	fc 01       	movw	r30, r24
 5ce:	e6 5d       	subi	r30, 0xD6	; 214
 5d0:	fe 4f       	sbci	r31, 0xFE	; 254
 5d2:	85 e0       	ldi	r24, 0x05	; 5
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	91 83       	std	Z+1, r25	; 0x01
 5d8:	80 83       	st	Z, r24
 } 
 //insert your functional code here...
 printf("\r\n\r\n Testing Servo Motor Ver1.0\r\n");
 
 while(1){
	for(i=0;i<MAX_SERVO;i++){
 5da:	89 81       	ldd	r24, Y+1	; 0x01
 5dc:	9a 81       	ldd	r25, Y+2	; 0x02
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	9a 83       	std	Y+2, r25	; 0x02
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	9a 81       	ldd	r25, Y+2	; 0x02
 5e8:	88 31       	cpi	r24, 0x18	; 24
 5ea:	91 05       	cpc	r25, r1
 5ec:	5c f3       	brlt	.-42     	; 0x5c4 <main+0x48>
 	servo[i]=5;}
	delay(30);
 5ee:	8e e1       	ldi	r24, 0x1E	; 30
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 90 02 	call	0x520	; 0x520 <delay>
	
	for(i=0;i<MAX_SERVO;i++){
 5f6:	1a 82       	std	Y+2, r1	; 0x02
 5f8:	19 82       	std	Y+1, r1	; 0x01
 5fa:	10 c0       	rjmp	.+32     	; 0x61c <main+0xa0>
 	servo[i]=18;}
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	9a 81       	ldd	r25, Y+2	; 0x02
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	fc 01       	movw	r30, r24
 606:	e6 5d       	subi	r30, 0xD6	; 214
 608:	fe 4f       	sbci	r31, 0xFE	; 254
 60a:	82 e1       	ldi	r24, 0x12	; 18
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	91 83       	std	Z+1, r25	; 0x01
 610:	80 83       	st	Z, r24
 while(1){
	for(i=0;i<MAX_SERVO;i++){
 	servo[i]=5;}
	delay(30);
	
	for(i=0;i<MAX_SERVO;i++){
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	9a 81       	ldd	r25, Y+2	; 0x02
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	9a 83       	std	Y+2, r25	; 0x02
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	89 81       	ldd	r24, Y+1	; 0x01
 61e:	9a 81       	ldd	r25, Y+2	; 0x02
 620:	88 31       	cpi	r24, 0x18	; 24
 622:	91 05       	cpc	r25, r1
 624:	5c f3       	brlt	.-42     	; 0x5fc <main+0x80>
 	servo[i]=18;}
	delay(30);
 626:	8e e1       	ldi	r24, 0x1E	; 30
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 90 02 	call	0x520	; 0x520 <delay>
 62e:	c7 cf       	rjmp	.-114    	; 0x5be <main+0x42>

00000630 <fdevopen>:
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	8c 01       	movw	r16, r24
 63a:	eb 01       	movw	r28, r22
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	31 f4       	brne	.+12     	; 0x64c <fdevopen+0x1c>
 640:	61 15       	cp	r22, r1
 642:	71 05       	cpc	r23, r1
 644:	19 f4       	brne	.+6      	; 0x64c <fdevopen+0x1c>
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	38 c0       	rjmp	.+112    	; 0x6bc <fdevopen+0x8c>
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	6e e0       	ldi	r22, 0x0E	; 14
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	0e 94 99 03 	call	0x732	; 0x732 <calloc>
 658:	fc 01       	movw	r30, r24
 65a:	9c 01       	movw	r18, r24
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	71 f1       	breq	.+92     	; 0x6bc <fdevopen+0x8c>
 660:	80 e8       	ldi	r24, 0x80	; 128
 662:	83 83       	std	Z+3, r24	; 0x03
 664:	20 97       	sbiw	r28, 0x00	; 0
 666:	71 f0       	breq	.+28     	; 0x684 <fdevopen+0x54>
 668:	d3 87       	std	Z+11, r29	; 0x0b
 66a:	c2 87       	std	Z+10, r28	; 0x0a
 66c:	81 e8       	ldi	r24, 0x81	; 129
 66e:	83 83       	std	Z+3, r24	; 0x03
 670:	80 91 5c 01 	lds	r24, 0x015C
 674:	90 91 5d 01 	lds	r25, 0x015D
 678:	89 2b       	or	r24, r25
 67a:	21 f4       	brne	.+8      	; 0x684 <fdevopen+0x54>
 67c:	f0 93 5d 01 	sts	0x015D, r31
 680:	e0 93 5c 01 	sts	0x015C, r30
 684:	01 15       	cp	r16, r1
 686:	11 05       	cpc	r17, r1
 688:	c9 f0       	breq	.+50     	; 0x6bc <fdevopen+0x8c>
 68a:	11 87       	std	Z+9, r17	; 0x09
 68c:	00 87       	std	Z+8, r16	; 0x08
 68e:	83 81       	ldd	r24, Z+3	; 0x03
 690:	82 60       	ori	r24, 0x02	; 2
 692:	83 83       	std	Z+3, r24	; 0x03
 694:	80 91 5e 01 	lds	r24, 0x015E
 698:	90 91 5f 01 	lds	r25, 0x015F
 69c:	89 2b       	or	r24, r25
 69e:	71 f4       	brne	.+28     	; 0x6bc <fdevopen+0x8c>
 6a0:	f0 93 5f 01 	sts	0x015F, r31
 6a4:	e0 93 5e 01 	sts	0x015E, r30
 6a8:	80 91 60 01 	lds	r24, 0x0160
 6ac:	90 91 61 01 	lds	r25, 0x0161
 6b0:	89 2b       	or	r24, r25
 6b2:	21 f4       	brne	.+8      	; 0x6bc <fdevopen+0x8c>
 6b4:	f0 93 61 01 	sts	0x0161, r31
 6b8:	e0 93 60 01 	sts	0x0160, r30
 6bc:	c9 01       	movw	r24, r18
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	08 95       	ret

000006c8 <puts>:
 6c8:	0f 93       	push	r16
 6ca:	1f 93       	push	r17
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	8c 01       	movw	r16, r24
 6d2:	e0 91 5e 01 	lds	r30, 0x015E
 6d6:	f0 91 5f 01 	lds	r31, 0x015F
 6da:	83 81       	ldd	r24, Z+3	; 0x03
 6dc:	81 ff       	sbrs	r24, 1
 6de:	21 c0       	rjmp	.+66     	; 0x722 <puts+0x5a>
 6e0:	c0 e0       	ldi	r28, 0x00	; 0
 6e2:	d0 e0       	ldi	r29, 0x00	; 0
 6e4:	0d c0       	rjmp	.+26     	; 0x700 <puts+0x38>
 6e6:	e0 91 5e 01 	lds	r30, 0x015E
 6ea:	f0 91 5f 01 	lds	r31, 0x015F
 6ee:	20 85       	ldd	r18, Z+8	; 0x08
 6f0:	31 85       	ldd	r19, Z+9	; 0x09
 6f2:	bf 01       	movw	r22, r30
 6f4:	f9 01       	movw	r30, r18
 6f6:	09 95       	icall
 6f8:	89 2b       	or	r24, r25
 6fa:	11 f0       	breq	.+4      	; 0x700 <puts+0x38>
 6fc:	cf ef       	ldi	r28, 0xFF	; 255
 6fe:	df ef       	ldi	r29, 0xFF	; 255
 700:	f8 01       	movw	r30, r16
 702:	81 91       	ld	r24, Z+
 704:	8f 01       	movw	r16, r30
 706:	88 23       	and	r24, r24
 708:	71 f7       	brne	.-36     	; 0x6e6 <puts+0x1e>
 70a:	e0 91 5e 01 	lds	r30, 0x015E
 70e:	f0 91 5f 01 	lds	r31, 0x015F
 712:	20 85       	ldd	r18, Z+8	; 0x08
 714:	31 85       	ldd	r19, Z+9	; 0x09
 716:	8a e0       	ldi	r24, 0x0A	; 10
 718:	bf 01       	movw	r22, r30
 71a:	f9 01       	movw	r30, r18
 71c:	09 95       	icall
 71e:	89 2b       	or	r24, r25
 720:	11 f0       	breq	.+4      	; 0x726 <puts+0x5e>
 722:	cf ef       	ldi	r28, 0xFF	; 255
 724:	df ef       	ldi	r29, 0xFF	; 255
 726:	ce 01       	movw	r24, r28
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	08 95       	ret

00000732 <calloc>:
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	68 9f       	mul	r22, r24
 73c:	80 01       	movw	r16, r0
 73e:	69 9f       	mul	r22, r25
 740:	10 0d       	add	r17, r0
 742:	78 9f       	mul	r23, r24
 744:	10 0d       	add	r17, r0
 746:	11 24       	eor	r1, r1
 748:	c8 01       	movw	r24, r16
 74a:	0e 94 b5 03 	call	0x76a	; 0x76a <malloc>
 74e:	ec 01       	movw	r28, r24
 750:	00 97       	sbiw	r24, 0x00	; 0
 752:	29 f0       	breq	.+10     	; 0x75e <calloc+0x2c>
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	a8 01       	movw	r20, r16
 75a:	0e 94 ba 04 	call	0x974	; 0x974 <memset>
 75e:	ce 01       	movw	r24, r28
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	08 95       	ret

0000076a <malloc>:
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	bc 01       	movw	r22, r24
 770:	82 30       	cpi	r24, 0x02	; 2
 772:	91 05       	cpc	r25, r1
 774:	10 f4       	brcc	.+4      	; 0x77a <malloc+0x10>
 776:	62 e0       	ldi	r22, 0x02	; 2
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	a0 91 64 01 	lds	r26, 0x0164
 77e:	b0 91 65 01 	lds	r27, 0x0165
 782:	ed 01       	movw	r28, r26
 784:	e0 e0       	ldi	r30, 0x00	; 0
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	40 e0       	ldi	r20, 0x00	; 0
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	21 c0       	rjmp	.+66     	; 0x7d0 <malloc+0x66>
 78e:	88 81       	ld	r24, Y
 790:	99 81       	ldd	r25, Y+1	; 0x01
 792:	86 17       	cp	r24, r22
 794:	97 07       	cpc	r25, r23
 796:	69 f4       	brne	.+26     	; 0x7b2 <malloc+0x48>
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	9b 81       	ldd	r25, Y+3	; 0x03
 79c:	30 97       	sbiw	r30, 0x00	; 0
 79e:	19 f0       	breq	.+6      	; 0x7a6 <malloc+0x3c>
 7a0:	93 83       	std	Z+3, r25	; 0x03
 7a2:	82 83       	std	Z+2, r24	; 0x02
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <malloc+0x44>
 7a6:	90 93 65 01 	sts	0x0165, r25
 7aa:	80 93 64 01 	sts	0x0164, r24
 7ae:	fe 01       	movw	r30, r28
 7b0:	34 c0       	rjmp	.+104    	; 0x81a <malloc+0xb0>
 7b2:	68 17       	cp	r22, r24
 7b4:	79 07       	cpc	r23, r25
 7b6:	38 f4       	brcc	.+14     	; 0x7c6 <malloc+0x5c>
 7b8:	41 15       	cp	r20, r1
 7ba:	51 05       	cpc	r21, r1
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <malloc+0x5a>
 7be:	84 17       	cp	r24, r20
 7c0:	95 07       	cpc	r25, r21
 7c2:	08 f4       	brcc	.+2      	; 0x7c6 <malloc+0x5c>
 7c4:	ac 01       	movw	r20, r24
 7c6:	fe 01       	movw	r30, r28
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	9b 81       	ldd	r25, Y+3	; 0x03
 7cc:	9c 01       	movw	r18, r24
 7ce:	e9 01       	movw	r28, r18
 7d0:	20 97       	sbiw	r28, 0x00	; 0
 7d2:	e9 f6       	brne	.-70     	; 0x78e <malloc+0x24>
 7d4:	41 15       	cp	r20, r1
 7d6:	51 05       	cpc	r21, r1
 7d8:	a9 f1       	breq	.+106    	; 0x844 <malloc+0xda>
 7da:	ca 01       	movw	r24, r20
 7dc:	86 1b       	sub	r24, r22
 7de:	97 0b       	sbc	r25, r23
 7e0:	04 97       	sbiw	r24, 0x04	; 4
 7e2:	08 f4       	brcc	.+2      	; 0x7e6 <malloc+0x7c>
 7e4:	ba 01       	movw	r22, r20
 7e6:	e0 e0       	ldi	r30, 0x00	; 0
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	2a c0       	rjmp	.+84     	; 0x840 <malloc+0xd6>
 7ec:	8d 91       	ld	r24, X+
 7ee:	9c 91       	ld	r25, X
 7f0:	11 97       	sbiw	r26, 0x01	; 1
 7f2:	84 17       	cp	r24, r20
 7f4:	95 07       	cpc	r25, r21
 7f6:	f9 f4       	brne	.+62     	; 0x836 <malloc+0xcc>
 7f8:	64 17       	cp	r22, r20
 7fa:	75 07       	cpc	r23, r21
 7fc:	81 f4       	brne	.+32     	; 0x81e <malloc+0xb4>
 7fe:	12 96       	adiw	r26, 0x02	; 2
 800:	8d 91       	ld	r24, X+
 802:	9c 91       	ld	r25, X
 804:	13 97       	sbiw	r26, 0x03	; 3
 806:	30 97       	sbiw	r30, 0x00	; 0
 808:	19 f0       	breq	.+6      	; 0x810 <malloc+0xa6>
 80a:	93 83       	std	Z+3, r25	; 0x03
 80c:	82 83       	std	Z+2, r24	; 0x02
 80e:	04 c0       	rjmp	.+8      	; 0x818 <malloc+0xae>
 810:	90 93 65 01 	sts	0x0165, r25
 814:	80 93 64 01 	sts	0x0164, r24
 818:	fd 01       	movw	r30, r26
 81a:	32 96       	adiw	r30, 0x02	; 2
 81c:	4f c0       	rjmp	.+158    	; 0x8bc <malloc+0x152>
 81e:	ca 01       	movw	r24, r20
 820:	86 1b       	sub	r24, r22
 822:	97 0b       	sbc	r25, r23
 824:	fd 01       	movw	r30, r26
 826:	e8 0f       	add	r30, r24
 828:	f9 1f       	adc	r31, r25
 82a:	61 93       	st	Z+, r22
 82c:	71 93       	st	Z+, r23
 82e:	02 97       	sbiw	r24, 0x02	; 2
 830:	8d 93       	st	X+, r24
 832:	9c 93       	st	X, r25
 834:	43 c0       	rjmp	.+134    	; 0x8bc <malloc+0x152>
 836:	fd 01       	movw	r30, r26
 838:	82 81       	ldd	r24, Z+2	; 0x02
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	9c 01       	movw	r18, r24
 83e:	d9 01       	movw	r26, r18
 840:	10 97       	sbiw	r26, 0x00	; 0
 842:	a1 f6       	brne	.-88     	; 0x7ec <malloc+0x82>
 844:	80 91 62 01 	lds	r24, 0x0162
 848:	90 91 63 01 	lds	r25, 0x0163
 84c:	89 2b       	or	r24, r25
 84e:	41 f4       	brne	.+16     	; 0x860 <malloc+0xf6>
 850:	80 91 23 01 	lds	r24, 0x0123
 854:	90 91 24 01 	lds	r25, 0x0124
 858:	90 93 63 01 	sts	0x0163, r25
 85c:	80 93 62 01 	sts	0x0162, r24
 860:	40 91 25 01 	lds	r20, 0x0125
 864:	50 91 26 01 	lds	r21, 0x0126
 868:	41 15       	cp	r20, r1
 86a:	51 05       	cpc	r21, r1
 86c:	41 f4       	brne	.+16     	; 0x87e <malloc+0x114>
 86e:	4d b7       	in	r20, 0x3d	; 61
 870:	5e b7       	in	r21, 0x3e	; 62
 872:	80 91 21 01 	lds	r24, 0x0121
 876:	90 91 22 01 	lds	r25, 0x0122
 87a:	48 1b       	sub	r20, r24
 87c:	59 0b       	sbc	r21, r25
 87e:	20 91 62 01 	lds	r18, 0x0162
 882:	30 91 63 01 	lds	r19, 0x0163
 886:	24 17       	cp	r18, r20
 888:	35 07       	cpc	r19, r21
 88a:	b0 f4       	brcc	.+44     	; 0x8b8 <malloc+0x14e>
 88c:	ca 01       	movw	r24, r20
 88e:	82 1b       	sub	r24, r18
 890:	93 0b       	sbc	r25, r19
 892:	86 17       	cp	r24, r22
 894:	97 07       	cpc	r25, r23
 896:	80 f0       	brcs	.+32     	; 0x8b8 <malloc+0x14e>
 898:	ab 01       	movw	r20, r22
 89a:	4e 5f       	subi	r20, 0xFE	; 254
 89c:	5f 4f       	sbci	r21, 0xFF	; 255
 89e:	84 17       	cp	r24, r20
 8a0:	95 07       	cpc	r25, r21
 8a2:	50 f0       	brcs	.+20     	; 0x8b8 <malloc+0x14e>
 8a4:	42 0f       	add	r20, r18
 8a6:	53 1f       	adc	r21, r19
 8a8:	50 93 63 01 	sts	0x0163, r21
 8ac:	40 93 62 01 	sts	0x0162, r20
 8b0:	f9 01       	movw	r30, r18
 8b2:	61 93       	st	Z+, r22
 8b4:	71 93       	st	Z+, r23
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <malloc+0x152>
 8b8:	e0 e0       	ldi	r30, 0x00	; 0
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	cf 01       	movw	r24, r30
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	08 95       	ret

000008c4 <free>:
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	09 f4       	brne	.+2      	; 0x8ce <free+0xa>
 8cc:	50 c0       	rjmp	.+160    	; 0x96e <free+0xaa>
 8ce:	ec 01       	movw	r28, r24
 8d0:	22 97       	sbiw	r28, 0x02	; 2
 8d2:	1b 82       	std	Y+3, r1	; 0x03
 8d4:	1a 82       	std	Y+2, r1	; 0x02
 8d6:	a0 91 64 01 	lds	r26, 0x0164
 8da:	b0 91 65 01 	lds	r27, 0x0165
 8de:	10 97       	sbiw	r26, 0x00	; 0
 8e0:	09 f1       	breq	.+66     	; 0x924 <free+0x60>
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	ac 17       	cp	r26, r28
 8e8:	bd 07       	cpc	r27, r29
 8ea:	08 f1       	brcs	.+66     	; 0x92e <free+0x6a>
 8ec:	bb 83       	std	Y+3, r27	; 0x03
 8ee:	aa 83       	std	Y+2, r26	; 0x02
 8f0:	fe 01       	movw	r30, r28
 8f2:	21 91       	ld	r18, Z+
 8f4:	31 91       	ld	r19, Z+
 8f6:	e2 0f       	add	r30, r18
 8f8:	f3 1f       	adc	r31, r19
 8fa:	ae 17       	cp	r26, r30
 8fc:	bf 07       	cpc	r27, r31
 8fe:	79 f4       	brne	.+30     	; 0x91e <free+0x5a>
 900:	8d 91       	ld	r24, X+
 902:	9c 91       	ld	r25, X
 904:	11 97       	sbiw	r26, 0x01	; 1
 906:	28 0f       	add	r18, r24
 908:	39 1f       	adc	r19, r25
 90a:	2e 5f       	subi	r18, 0xFE	; 254
 90c:	3f 4f       	sbci	r19, 0xFF	; 255
 90e:	39 83       	std	Y+1, r19	; 0x01
 910:	28 83       	st	Y, r18
 912:	12 96       	adiw	r26, 0x02	; 2
 914:	8d 91       	ld	r24, X+
 916:	9c 91       	ld	r25, X
 918:	13 97       	sbiw	r26, 0x03	; 3
 91a:	9b 83       	std	Y+3, r25	; 0x03
 91c:	8a 83       	std	Y+2, r24	; 0x02
 91e:	41 15       	cp	r20, r1
 920:	51 05       	cpc	r21, r1
 922:	71 f4       	brne	.+28     	; 0x940 <free+0x7c>
 924:	d0 93 65 01 	sts	0x0165, r29
 928:	c0 93 64 01 	sts	0x0164, r28
 92c:	20 c0       	rjmp	.+64     	; 0x96e <free+0xaa>
 92e:	12 96       	adiw	r26, 0x02	; 2
 930:	8d 91       	ld	r24, X+
 932:	9c 91       	ld	r25, X
 934:	13 97       	sbiw	r26, 0x03	; 3
 936:	ad 01       	movw	r20, r26
 938:	00 97       	sbiw	r24, 0x00	; 0
 93a:	11 f0       	breq	.+4      	; 0x940 <free+0x7c>
 93c:	dc 01       	movw	r26, r24
 93e:	d3 cf       	rjmp	.-90     	; 0x8e6 <free+0x22>
 940:	fa 01       	movw	r30, r20
 942:	d3 83       	std	Z+3, r29	; 0x03
 944:	c2 83       	std	Z+2, r28	; 0x02
 946:	21 91       	ld	r18, Z+
 948:	31 91       	ld	r19, Z+
 94a:	e2 0f       	add	r30, r18
 94c:	f3 1f       	adc	r31, r19
 94e:	ce 17       	cp	r28, r30
 950:	df 07       	cpc	r29, r31
 952:	69 f4       	brne	.+26     	; 0x96e <free+0xaa>
 954:	88 81       	ld	r24, Y
 956:	99 81       	ldd	r25, Y+1	; 0x01
 958:	28 0f       	add	r18, r24
 95a:	39 1f       	adc	r19, r25
 95c:	2e 5f       	subi	r18, 0xFE	; 254
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	fa 01       	movw	r30, r20
 962:	31 83       	std	Z+1, r19	; 0x01
 964:	20 83       	st	Z, r18
 966:	8a 81       	ldd	r24, Y+2	; 0x02
 968:	9b 81       	ldd	r25, Y+3	; 0x03
 96a:	93 83       	std	Z+3, r25	; 0x03
 96c:	82 83       	std	Z+2, r24	; 0x02
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	08 95       	ret

00000974 <memset>:
 974:	dc 01       	movw	r26, r24
 976:	01 c0       	rjmp	.+2      	; 0x97a <memset+0x6>
 978:	6d 93       	st	X+, r22
 97a:	41 50       	subi	r20, 0x01	; 1
 97c:	50 40       	sbci	r21, 0x00	; 0
 97e:	e0 f7       	brcc	.-8      	; 0x978 <memset+0x4>
 980:	08 95       	ret

00000982 <_exit>:
 982:	f8 94       	cli

00000984 <__stop_program>:
 984:	ff cf       	rjmp	.-2      	; 0x984 <__stop_program>
