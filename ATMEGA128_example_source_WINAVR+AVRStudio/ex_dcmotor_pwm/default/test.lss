
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005ae  00000642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800102  00800102  00000644  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e9  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ed  00000000  00000000  0000074d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000cf  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000373  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000100  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  c6:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <port_init>:

volatile unsigned char T20ms=0, num=PWM_PORT, motor_state=LEFT;
volatile unsigned int DCMOTOR[8], Tcount=0, motor_speed,sw_state[8]={0,0,0,0,0,0,0,0};

void port_init(void)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
 PORTA = 0x00;
  d6:	eb e3       	ldi	r30, 0x3B	; 59
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
 DDRA  = 0x00;
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
 PORTB = 0x00;
  e2:	e8 e3       	ldi	r30, 0x38	; 56
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
 DDRB  = 0x00;
  e8:	e7 e3       	ldi	r30, 0x37	; 55
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	10 82       	st	Z, r1
 PORTC = 0x00; //m103 output only
  ee:	e5 e3       	ldi	r30, 0x35	; 53
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
 DDRC  = 0xff;
  f4:	e4 e3       	ldi	r30, 0x34	; 52
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	80 83       	st	Z, r24
 PORTD = 0x00;
  fc:	e2 e3       	ldi	r30, 0x32	; 50
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
 DDRD  = 0x00;
 102:	e1 e3       	ldi	r30, 0x31	; 49
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	10 82       	st	Z, r1
 PORTE = 0x00;
 108:	e3 e2       	ldi	r30, 0x23	; 35
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	10 82       	st	Z, r1
 DDRE  = 0x00;
 10e:	e2 e2       	ldi	r30, 0x22	; 34
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
 PORTF = 0x00;
 114:	e2 e6       	ldi	r30, 0x62	; 98
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	10 82       	st	Z, r1
 DDRF  = 0x00;
 11a:	e1 e6       	ldi	r30, 0x61	; 97
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	10 82       	st	Z, r1
 PORTG = 0x00;
 120:	e5 e6       	ldi	r30, 0x65	; 101
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	10 82       	st	Z, r1
 DDRG  = 0x00;
 126:	e4 e6       	ldi	r30, 0x64	; 100
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	10 82       	st	Z, r1
}
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	08 95       	ret

00000132 <timer0_init>:
//TIMER0 initialize - prescale:64
// WGM: Normal
// desired value: 1mSec
// actual value:  1.000mSec (0.0%)
void timer0_init(void)
{
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 TCCR0 = 0x00; //stop
 13a:	e3 e5       	ldi	r30, 0x53	; 83
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	10 82       	st	Z, r1
 ASSR  = 0x00; //set async mode
 140:	e0 e5       	ldi	r30, 0x50	; 80
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	10 82       	st	Z, r1
 TCNT0 = 0x06; //set count
 146:	e2 e5       	ldi	r30, 0x52	; 82
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	80 83       	st	Z, r24
 OCR0  = 0xFA;
 14e:	e1 e5       	ldi	r30, 0x51	; 81
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8a ef       	ldi	r24, 0xFA	; 250
 154:	80 83       	st	Z, r24
 TCCR0 = 0x04; //start timer
 156:	e3 e5       	ldi	r30, 0x53	; 83
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24
}
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	00 90 5b 00 	lds	r0, 0x005B
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 TCNT0 = 0x06; //reload counter value
 182:	e2 e5       	ldi	r30, 0x52	; 82
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 83       	st	Z, r24
 T20ms++;
 18a:	80 91 02 01 	lds	r24, 0x0102
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 02 01 	sts	0x0102, r24
 if(T20ms >= 20)
 194:	80 91 02 01 	lds	r24, 0x0102
 198:	84 31       	cpi	r24, 0x14	; 20
 19a:	30 f0       	brcs	.+12     	; 0x1a8 <__vector_16+0x44>
 {
	T20ms = 0;
 19c:	10 92 02 01 	sts	0x0102, r1
	Tcount = 0;
 1a0:	10 92 05 01 	sts	0x0105, r1
 1a4:	10 92 04 01 	sts	0x0104, r1
 }
}
 1a8:	cf 91       	pop	r28
 1aa:	df 91       	pop	r29
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	00 92 5b 00 	sts	0x005B, r0
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <timer2_init>:
//TIMER2 initialize - prescale:64
// WGM: Normal
// desired value: 100uSec
// actual value: 100.000uSec (0.0%)
void timer2_init(void)
{
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 TCCR2 = 0x00; //stop
 1ca:	e5 e4       	ldi	r30, 0x45	; 69
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	10 82       	st	Z, r1
 TCNT2 = 0xEC; //setup
 1d0:	e4 e4       	ldi	r30, 0x44	; 68
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	8c ee       	ldi	r24, 0xEC	; 236
 1d6:	80 83       	st	Z, r24
 OCR2  = 0x14;
 1d8:	e3 e4       	ldi	r30, 0x43	; 67
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	84 e1       	ldi	r24, 0x14	; 20
 1de:	80 83       	st	Z, r24
 TCCR2 = 0x02; //start
 1e0:	e5 e4       	ldi	r30, 0x45	; 69
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	80 83       	st	Z, r24
}
 1e8:	cf 91       	pop	r28
 1ea:	df 91       	pop	r29
 1ec:	08 95       	ret

000001ee <__vector_10>:

ISR(TIMER2_OVF_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	00 90 5b 00 	lds	r0, 0x005B
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
 210:	df 93       	push	r29
 212:	cf 93       	push	r28
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 TCNT2 = 0xE7; //reload counter value
 218:	e4 e4       	ldi	r30, 0x44	; 68
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	87 ee       	ldi	r24, 0xE7	; 231
 21e:	80 83       	st	Z, r24
 Tcount++;
 220:	80 91 04 01 	lds	r24, 0x0104
 224:	90 91 05 01 	lds	r25, 0x0105
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	90 93 05 01 	sts	0x0105, r25
 22e:	80 93 04 01 	sts	0x0104, r24
  
 if(DCMOTOR[num]>Tcount)
 232:	80 91 03 01 	lds	r24, 0x0103
 236:	88 2f       	mov	r24, r24
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	fc 01       	movw	r30, r24
 240:	e8 5e       	subi	r30, 0xE8	; 232
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	20 81       	ld	r18, Z
 246:	31 81       	ldd	r19, Z+1	; 0x01
 248:	80 91 04 01 	lds	r24, 0x0104
 24c:	90 91 05 01 	lds	r25, 0x0105
 250:	82 17       	cp	r24, r18
 252:	93 07       	cpc	r25, r19
 254:	a8 f4       	brcc	.+42     	; 0x280 <__vector_10+0x92>
    MOTOR_PORT |= (0x01<<num);
 256:	a5 e3       	ldi	r26, 0x35	; 53
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e5 e3       	ldi	r30, 0x35	; 53
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	80 91 03 01 	lds	r24, 0x0103
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 2e       	mov	r0, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <__vector_10+0x88>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <__vector_10+0x84>
 27a:	84 2b       	or	r24, r20
 27c:	8c 93       	st	X, r24
 27e:	14 c0       	rjmp	.+40     	; 0x2a8 <__vector_10+0xba>
 else	
 	MOTOR_PORT &= (~(0x01<<num));
 280:	a5 e3       	ldi	r26, 0x35	; 53
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	e5 e3       	ldi	r30, 0x35	; 53
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	48 2f       	mov	r20, r24
 28c:	80 91 03 01 	lds	r24, 0x0103
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <__vector_10+0xb0>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	2a 95       	dec	r18
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <__vector_10+0xac>
 2a2:	80 95       	com	r24
 2a4:	84 23       	and	r24, r20
 2a6:	8c 93       	st	X, r24
}
 2a8:	cf 91       	pop	r28
 2aa:	df 91       	pop	r29
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	00 92 5b 00 	sts	0x005B, r0
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 2d6:	f8 94       	cli
 XMCRA = 0x00; //external memory
 2d8:	ed e6       	ldi	r30, 0x6D	; 109
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	10 82       	st	Z, r1
 XMCRB = 0x00; //external memory
 2de:	ec e6       	ldi	r30, 0x6C	; 108
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	10 82       	st	Z, r1
 port_init();
 2e4:	0e 94 67 00 	call	0xce	; 0xce <port_init>
 timer0_init();
 2e8:	0e 94 99 00 	call	0x132	; 0x132 <timer0_init>
 timer2_init();
 2ec:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <timer2_init>

 MCUCR = 0x00;
 2f0:	e5 e5       	ldi	r30, 0x55	; 85
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	10 82       	st	Z, r1
 EICRA = 0x00; //extended ext ints
 2f6:	ea e6       	ldi	r30, 0x6A	; 106
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	10 82       	st	Z, r1
 EICRB = 0x00; //extended ext ints
 2fc:	ea e5       	ldi	r30, 0x5A	; 90
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	10 82       	st	Z, r1
 EIMSK = 0x00;
 302:	e9 e5       	ldi	r30, 0x59	; 89
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	10 82       	st	Z, r1
 TIMSK = 0x41; //timer interrupt sources
 308:	e7 e5       	ldi	r30, 0x57	; 87
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	81 e4       	ldi	r24, 0x41	; 65
 30e:	80 83       	st	Z, r24
 ETIMSK = 0x00; //extended timer interrupt sources
 310:	ed e7       	ldi	r30, 0x7D	; 125
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	10 82       	st	Z, r1
 sei(); //re-enable interrupts
 316:	78 94       	sei
 //all peripherals are now initialized
}
 318:	cf 91       	pop	r28
 31a:	df 91       	pop	r29
 31c:	08 95       	ret

0000031e <delay>:


void delay(int cnt)
{
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	00 d0       	rcall	.+0      	; 0x324 <delay+0x6>
 324:	00 d0       	rcall	.+0      	; 0x326 <delay+0x8>
 326:	00 d0       	rcall	.+0      	; 0x328 <delay+0xa>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	9e 83       	std	Y+6, r25	; 0x06
 32e:	8d 83       	std	Y+5, r24	; 0x05
	 unsigned int i, j;
	 for(i=0;i<cnt;i++){
 330:	1c 82       	std	Y+4, r1	; 0x04
 332:	1b 82       	std	Y+3, r1	; 0x03
 334:	13 c0       	rjmp	.+38     	; 0x35c <delay+0x3e>
		for(j=0;j<1000;j++)
 336:	1a 82       	std	Y+2, r1	; 0x02
 338:	19 82       	std	Y+1, r1	; 0x01
 33a:	05 c0       	rjmp	.+10     	; 0x346 <delay+0x28>
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	9a 81       	ldd	r25, Y+2	; 0x02
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	9a 83       	std	Y+2, r25	; 0x02
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	23 e0       	ldi	r18, 0x03	; 3
 34c:	88 3e       	cpi	r24, 0xE8	; 232
 34e:	92 07       	cpc	r25, r18
 350:	a8 f3       	brcs	.-22     	; 0x33c <delay+0x1e>


void delay(int cnt)
{
	 unsigned int i, j;
	 for(i=0;i<cnt;i++){
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	9c 81       	ldd	r25, Y+4	; 0x04
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	9c 83       	std	Y+4, r25	; 0x04
 35a:	8b 83       	std	Y+3, r24	; 0x03
 35c:	2d 81       	ldd	r18, Y+5	; 0x05
 35e:	3e 81       	ldd	r19, Y+6	; 0x06
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	9c 81       	ldd	r25, Y+4	; 0x04
 364:	82 17       	cp	r24, r18
 366:	93 07       	cpc	r25, r19
 368:	30 f3       	brcs	.-52     	; 0x336 <delay+0x18>
		for(j=0;j<1000;j++)
		{
		}
	}
}
 36a:	26 96       	adiw	r28, 0x06	; 6
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	08 95       	ret

0000037c <motor_init>:

void motor_init(void){
 37c:	df 93       	push	r29
 37e:	cf 93       	push	r28
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
	 ENABLE1_ON;
 384:	a5 e3       	ldi	r26, 0x35	; 53
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e5 e3       	ldi	r30, 0x35	; 53
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	8b 7f       	andi	r24, 0xFB	; 251
 390:	8c 93       	st	X, r24
 	 PWM1_ON;
 392:	a5 e3       	ldi	r26, 0x35	; 53
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	e5 e3       	ldi	r30, 0x35	; 53
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	8c 93       	st	X, r24
 	 BREAK1_OFF; 
 3a0:	a5 e3       	ldi	r26, 0x35	; 53
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	e5 e3       	ldi	r30, 0x35	; 53
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	87 7f       	andi	r24, 0xF7	; 247
 3ac:	8c 93       	st	X, r24
	 DIR1_ON;
 3ae:	a5 e3       	ldi	r26, 0x35	; 53
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e5 e3       	ldi	r30, 0x35	; 53
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	8c 93       	st	X, r24
 	 //printf("Motor Control V01W\r\n");
}
 3bc:	cf 91       	pop	r28
 3be:	df 91       	pop	r29
 3c0:	08 95       	ret

000003c2 <main>:

//
int main(void)
{
 3c2:	df 93       	push	r29
 3c4:	cf 93       	push	r28
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <main+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x8>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 
 init_devices();
 3ce:	0e 94 67 01 	call	0x2ce	; 0x2ce <init_devices>
 //insert your functional code here...
 motor_init();
 3d2:	0e 94 be 01 	call	0x37c	; 0x37c <motor_init>
 SW_PORT_DDR = 0x00;
 3d6:	ea e3       	ldi	r30, 0x3A	; 58
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	10 82       	st	Z, r1
 DCMOTOR[PWM_PORT] = motor_speed = 800;   
 3dc:	80 e2       	ldi	r24, 0x20	; 32
 3de:	93 e0       	ldi	r25, 0x03	; 3
 3e0:	90 93 17 01 	sts	0x0117, r25
 3e4:	80 93 16 01 	sts	0x0116, r24
 3e8:	80 91 16 01 	lds	r24, 0x0116
 3ec:	90 91 17 01 	lds	r25, 0x0117
 3f0:	90 93 19 01 	sts	0x0119, r25
 3f4:	80 93 18 01 	sts	0x0118, r24
  
 while(1){ 		
	
	switch(SW_PORT&0x0f){
 3f8:	e9 e3       	ldi	r30, 0x39	; 57
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	9c 01       	movw	r18, r24
 404:	2f 70       	andi	r18, 0x0F	; 15
 406:	30 70       	andi	r19, 0x00	; 0
 408:	3c 83       	std	Y+4, r19	; 0x04
 40a:	2b 83       	std	Y+3, r18	; 0x03
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	9c 81       	ldd	r25, Y+4	; 0x04
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	91 05       	cpc	r25, r1
 414:	21 f1       	breq	.+72     	; 0x45e <main+0x9c>
 416:	2b 81       	ldd	r18, Y+3	; 0x03
 418:	3c 81       	ldd	r19, Y+4	; 0x04
 41a:	23 30       	cpi	r18, 0x03	; 3
 41c:	31 05       	cpc	r19, r1
 41e:	54 f4       	brge	.+20     	; 0x434 <main+0x72>
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	9c 81       	ldd	r25, Y+4	; 0x04
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	99 f1       	breq	.+102    	; 0x48e <main+0xcc>
 428:	2b 81       	ldd	r18, Y+3	; 0x03
 42a:	3c 81       	ldd	r19, Y+4	; 0x04
 42c:	21 30       	cpi	r18, 0x01	; 1
 42e:	31 05       	cpc	r19, r1
 430:	61 f0       	breq	.+24     	; 0x44a <main+0x88>
 432:	59 c0       	rjmp	.+178    	; 0x4e6 <main+0x124>
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	9c 81       	ldd	r25, Y+4	; 0x04
 438:	84 30       	cpi	r24, 0x04	; 4
 43a:	91 05       	cpc	r25, r1
 43c:	d1 f0       	breq	.+52     	; 0x472 <main+0xb0>
 43e:	2b 81       	ldd	r18, Y+3	; 0x03
 440:	3c 81       	ldd	r19, Y+4	; 0x04
 442:	28 30       	cpi	r18, 0x08	; 8
 444:	31 05       	cpc	r19, r1
 446:	e1 f0       	breq	.+56     	; 0x480 <main+0xbe>
 448:	4e c0       	rjmp	.+156    	; 0x4e6 <main+0x124>
		case 0x01 :  motor_speed+=SPEED_UP;
 44a:	80 91 16 01 	lds	r24, 0x0116
 44e:	90 91 17 01 	lds	r25, 0x0117
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	90 93 17 01 	sts	0x0117, r25
 458:	80 93 16 01 	sts	0x0116, r24
 45c:	44 c0       	rjmp	.+136    	; 0x4e6 <main+0x124>
			 	  	 break;
		case 0x02 :  motor_speed-=SPEED_UP;
 45e:	80 91 16 01 	lds	r24, 0x0116
 462:	90 91 17 01 	lds	r25, 0x0117
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	90 93 17 01 	sts	0x0117, r25
 46c:	80 93 16 01 	sts	0x0116, r24
 470:	3a c0       	rjmp	.+116    	; 0x4e6 <main+0x124>
			 	  	 break;
		case 0x04 :  sw_state[2] = PRESSED;			 	  	 		 	  	 	
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	90 93 0b 01 	sts	0x010B, r25
 47a:	80 93 0a 01 	sts	0x010A, r24
 47e:	33 c0       	rjmp	.+102    	; 0x4e6 <main+0x124>
			 	  	 break; 
		case 0x08 :  sw_state[3] = PRESSED;			 	  	
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	90 93 0d 01 	sts	0x010D, r25
 488:	80 93 0c 01 	sts	0x010C, r24
 48c:	2c c0       	rjmp	.+88     	; 0x4e6 <main+0x124>
			 	  	 break;
		case 0x00 : if(sw_state[2] == PRESSED){
 48e:	80 91 0a 01 	lds	r24, 0x010A
 492:	90 91 0b 01 	lds	r25, 0x010B
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	91 05       	cpc	r25, r1
 49a:	79 f4       	brne	.+30     	; 0x4ba <main+0xf8>
			 	  		if(motor_state == STOP){
 49c:	80 91 00 01 	lds	r24, 0x0100
 4a0:	83 30       	cpi	r24, 0x03	; 3
 4a2:	21 f4       	brne	.+8      	; 0x4ac <main+0xea>
					 		motor_state = LEFT;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 00 01 	sts	0x0100, r24
 4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <main+0xf0>
					 	}else{
			 	  	 		motor_state = STOP;
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	80 93 00 01 	sts	0x0100, r24
					 	}
						sw_state[2] = OPEN;
 4b2:	10 92 0b 01 	sts	0x010B, r1
 4b6:	10 92 0a 01 	sts	0x010A, r1
					}
					if(sw_state[3] == PRESSED){
 4ba:	80 91 0c 01 	lds	r24, 0x010C
 4be:	90 91 0d 01 	lds	r25, 0x010D
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	91 05       	cpc	r25, r1
 4c6:	79 f4       	brne	.+30     	; 0x4e6 <main+0x124>
			 	  		if(motor_state == STOP){
 4c8:	80 91 00 01 	lds	r24, 0x0100
 4cc:	83 30       	cpi	r24, 0x03	; 3
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <main+0x116>
					 		motor_state = RIGHT;
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	80 93 00 01 	sts	0x0100, r24
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <main+0x11c>
					 	}else{
			 	  	 		motor_state = STOP;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	80 93 00 01 	sts	0x0100, r24
					 	}
						sw_state[3] = OPEN;
 4de:	10 92 0d 01 	sts	0x010D, r1
 4e2:	10 92 0c 01 	sts	0x010C, r1
					break;
		
		default : break;
	}
	
	if(motor_speed >= MAX_SPEED){
 4e6:	80 91 16 01 	lds	r24, 0x0116
 4ea:	90 91 17 01 	lds	r25, 0x0117
 4ee:	36 e0       	ldi	r19, 0x06	; 6
 4f0:	84 3a       	cpi	r24, 0xA4	; 164
 4f2:	93 07       	cpc	r25, r19
 4f4:	30 f0       	brcs	.+12     	; 0x502 <main+0x140>
		motor_speed = MAX_SPEED;  
 4f6:	84 ea       	ldi	r24, 0xA4	; 164
 4f8:	96 e0       	ldi	r25, 0x06	; 6
 4fa:	90 93 17 01 	sts	0x0117, r25
 4fe:	80 93 16 01 	sts	0x0116, r24
	}
	if(motor_speed <= MIN_SPEED){
 502:	80 91 16 01 	lds	r24, 0x0116
 506:	90 91 17 01 	lds	r25, 0x0117
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	91 05       	cpc	r25, r1
 50e:	30 f4       	brcc	.+12     	; 0x51c <main+0x15a>
		motor_speed = MIN_SPEED;  
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	90 93 17 01 	sts	0x0117, r25
 518:	80 93 16 01 	sts	0x0116, r24
	}

	switch(motor_state){
 51c:	80 91 00 01 	lds	r24, 0x0100
 520:	28 2f       	mov	r18, r24
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	3a 83       	std	Y+2, r19	; 0x02
 526:	29 83       	std	Y+1, r18	; 0x01
 528:	89 81       	ldd	r24, Y+1	; 0x01
 52a:	9a 81       	ldd	r25, Y+2	; 0x02
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	91 05       	cpc	r25, r1
 530:	c9 f0       	breq	.+50     	; 0x564 <main+0x1a2>
 532:	29 81       	ldd	r18, Y+1	; 0x01
 534:	3a 81       	ldd	r19, Y+2	; 0x02
 536:	23 30       	cpi	r18, 0x03	; 3
 538:	31 05       	cpc	r19, r1
 53a:	19 f1       	breq	.+70     	; 0x582 <main+0x1c0>
 53c:	89 81       	ldd	r24, Y+1	; 0x01
 53e:	9a 81       	ldd	r25, Y+2	; 0x02
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	91 05       	cpc	r25, r1
 544:	29 f5       	brne	.+74     	; 0x590 <main+0x1ce>
		case LEFT  : BREAK1_OFF;
 546:	a5 e3       	ldi	r26, 0x35	; 53
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e5 e3       	ldi	r30, 0x35	; 53
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	87 7f       	andi	r24, 0xF7	; 247
 552:	8c 93       	st	X, r24
			 	   	 DIR1_ON;
 554:	a5 e3       	ldi	r26, 0x35	; 53
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	e5 e3       	ldi	r30, 0x35	; 53
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	8c 93       	st	X, r24
 562:	16 c0       	rjmp	.+44     	; 0x590 <main+0x1ce>
			 	   	 break; 
		case RIGHT : BREAK1_OFF;
 564:	a5 e3       	ldi	r26, 0x35	; 53
 566:	b0 e0       	ldi	r27, 0x00	; 0
 568:	e5 e3       	ldi	r30, 0x35	; 53
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	87 7f       	andi	r24, 0xF7	; 247
 570:	8c 93       	st	X, r24
			 	   	 DIR1_OFF;
 572:	a5 e3       	ldi	r26, 0x35	; 53
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	e5 e3       	ldi	r30, 0x35	; 53
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	8d 7f       	andi	r24, 0xFD	; 253
 57e:	8c 93       	st	X, r24
 580:	07 c0       	rjmp	.+14     	; 0x590 <main+0x1ce>
			 	   	 break;
		case STOP  : BREAK1_ON;
 582:	a5 e3       	ldi	r26, 0x35	; 53
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e5 e3       	ldi	r30, 0x35	; 53
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	88 60       	ori	r24, 0x08	; 8
 58e:	8c 93       	st	X, r24
			 	   	 break;
		default : break;
	}
	
	
	DCMOTOR[PWM_PORT] = motor_speed;
 590:	80 91 16 01 	lds	r24, 0x0116
 594:	90 91 17 01 	lds	r25, 0x0117
 598:	90 93 19 01 	sts	0x0119, r25
 59c:	80 93 18 01 	sts	0x0118, r24
	delay(5);
 5a0:	85 e0       	ldi	r24, 0x05	; 5
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 8f 01 	call	0x31e	; 0x31e <delay>
 5a8:	27 cf       	rjmp	.-434    	; 0x3f8 <main+0x36>

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
