
AVRASM ver. 2.1.9  C:\Atmel\OK2561asm\kit_test.asm Tue Aug 15 16:47:29 2006

C:\Atmel\OK2561asm\kit_test.asm(13): Including file 'C:\Atmel\AVR Tools\AvrAssembler2\Appnotes\m2561def.inc'
C:\Atmel\OK2561asm\kit_test.asm(1168): Including file 'C:\Atmel\OK2561asm\OK2561.INC'
C:\Atmel\OK2561asm\kit_test.asm(1169): Including file 'C:\Atmel\OK2561asm\MUSIC2561.INC'
                 
                 
                 ;[]								   []
                 ;[]	   System Diagnostic Program for "OK-2561" Kit V1.0	   []
                 ;[]								   []
                 ;[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
                 ;
                 ;		Designed and programmed by Duck-Yong Yoon in 2006.
                 ;
                 ;------------------------------------------------
                 ;	Include Header File
                 ;------------------------------------------------
                 .list
                 
                 .dseg
                 	.org	0x0200
                 ;------------------------------------------------
                 ;	Variables for Graphic LCD Module
                 ;------------------------------------------------
000200           Xcharacter:	.byte	1		; X character(0-7) of graphic LCD module
000201           Ycharacter:	.byte	1		; Y character(0-19) of graphic LCD module
000202           CURSOR_FLAG:	.byte	1		; cursor on/off flag(0=off, 1=on)
000203           Xcursor:	.byte	1		; X cursor position of graphic LCD module
000204           Ycursor:	.byte	1		; Y cursor position of graphic LCD module
                 
                 ;====================================================================
                 ;	Main Program
                 ;====================================================================
                 .cseg
                 	.org	0x0000
000000 940c 0034 	JMP	RESET			; power-on reset entry point
                 
                 	.org	0x0032
000032 940c 0838 	JMP	USART0_RXC		; USART0 Rx Complete
                 
000034 e211      RESET:	LDI	AH,high(RAMEND)		; initialize SP
000035 ef0f      	LDI	AL,low(RAMEND)
000036 bf1e      	OUT	SPH,AH
000037 bf0d      	OUT	SPL,AL
                 
000038 940e 0841 	CALL	INIT_MCU		; initialize MCU and kit
00003a 940e 0998 	CALL	D50MS			; wait for system stabilization
00003c 940e 0863 	CALL	INIT_LCD		; initialize text LCD
                 
00003e 940e 05ca 	CALL	CLEAR_SCREEN		; clear graphic LCD screen
000040 2700      	CLR	AL			; cursor off
000041 9300 0202 	STS	CURSOR_FLAG,AL
                 
                 ;------------------------------------------------
                 ;	Boot and Display Logo
                 ;------------------------------------------------
000043 940e 086e 	CALL	LCD_HOME1		; display logo 1 on text LCD
000045 940e 0896 	CALL	LCD_STRING
000047 2020
000048 4b4f
000049 322d
00004a 3635
00004b 2031
00004c 3156
00004d 302e
00004e 2020
00004f 0000      	.db	"  OK-2561 V1.0  ",0,0
000050 940e 0870 	CALL	LCD_HOME2
000052 940e 0896 	CALL	LCD_STRING
000054 4120
000055 6d54
000056 6765
000057 3261
000058 3635
000059 2d31
00005a 3631
00005b 5541
00005c 0000      	.db	" ATmega2561-16AU",0,0
                 
00005d 940e 0961 	CALL	BUZZER_ON		; buzzer on
00005f e100      	LDI	AL,0b00010000		; LED1 on
000060 b905      	OUT	PORTB,AL
000061 940e 099e 	CALL	D200MS
000063 e200      	LDI	AL,0b00100000		; LED2 on
000064 b905      	OUT	PORTB,AL
000065 940e 099e 	CALL	D200MS
000067 e400      	LDI	AL,0b01000000		; LED3 on
000068 b905      	OUT	PORTB,AL
000069 940e 099e 	CALL	D200MS
00006b e800      	LDI	AL,0b10000000		; LED4 on
00006c b905      	OUT	PORTB,AL
00006d 940e 099e 	CALL	D200MS
00006f e000      	LDI	AL,0b00000000		; all LED off
000070 b905      	OUT	PORTB,AL
000071 940e 0963 	CALL	BUZZER_OFF		; buzzer off
000073 940e 09a8 	CALL	D2SEC
                 
000075 940e 0870 	CALL	LCD_HOME2		; display logo 2
000077 940e 0896 	CALL	LCD_STRING
000079 2e44
00007a 2e59
00007b 6f59
00007c 6e6f
00007d 6920
00007e 206e
00007f 3032
000080 3630
000081 0000      	.db	"D.Y.Yoon in 2006",0,0
000082 940e 09a8 	CALL	D2SEC
                 
                 ;------------------------------------------------
                 ;	TEST 1 : Test Graphic LCD Module
                 ;------------------------------------------------
000084 940e 086e TEST1:	CALL	LCD_HOME1		; display test
000086 940e 0896 	CALL	LCD_STRING
000088 7247
000089 7061
00008a 6968
00008b 2063
00008c 434c
00008d 2044
00008e 4554
00008f 5453
000090 0000      	.db	"Graphic LCD TEST",0,0
000091 940e 0870 	CALL	LCD_HOME2
000093 940e 0896 	CALL	LCD_STRING
000095 5341
000096 4943
000097 2049
000098 6863
000099 7261
00009a 6361
00009b 6574
00009c 7372
00009d 0000      	.db	"ASCII characters",0,0
00009e 940e 0965 	CALL	BEEP
                 
0000a0 940e 05eb 	CALL	GLCD_HOME0		; display screen 1
0000a2 940e 06d2 	CALL	GLCD_STRING
0000a4 2020
0000a5 4b4f
0000a6 322d
0000a7 3635
0000a8 2031
0000a9 694b
0000aa 2074
0000ab 3156
0000ac 302e
0000ad 2020
0000ae 0000      	.db	"  OK-2561 Kit V1.0  ",0,0
0000af 940e 05f2 	CALL	GLCD_HOME1
0000b1 940e 06d2 	CALL	GLCD_STRING
0000b3 2020
0000b4 2020
0000b5 3220
0000b6 3030
0000b7 2f36
0000b8 3031
0000b9 302f
0000ba 2031
0000bb 2020
0000bc 2020
0000bd 0000      	.db	"     2006/10/01     ",0,0
0000be 940e 05f9 	CALL	GLCD_HOME2
0000c0 940e 06d2 	CALL	GLCD_STRING
0000c2 2020
0000c3 2020
0000c4 2020
0000c5 2020
0000c6 2020
0000c7 2020
0000c8 2020
0000c9 2020
0000ca 2020
0000cb 2020
0000cc 0000      	.db	"                    ",0,0
0000cd 940e 0600 	CALL	GLCD_HOME3
0000cf 940e 06d2 	CALL	GLCD_STRING
0000d1 2020
0000d2 2020
0000d3 4420
0000d4 7365
0000d5 6769
0000d6 656e
0000d7 2064
0000d8 7962
0000d9 2020
0000da 2020
0000db 0000      	.db	"     Designed by    ",0,0
0000dc 940e 0607 	CALL	GLCD_HOME4
0000de 940e 06d2 	CALL	GLCD_STRING
0000e0 2020
0000e1 4420
0000e2 6375
0000e3 2d6b
0000e4 6f59
0000e5 676e
0000e6 5920
0000e7 6f6f
0000e8 2e6e
0000e9 2020
0000ea 0000      	.db	"   Duck-Yong Yoon.  ",0,0
0000eb 940e 060e 	CALL	GLCD_HOME5
0000ed 940e 06d2 	CALL	GLCD_STRING
0000ef 2020
0000f0 2020
0000f1 2020
0000f2 2020
0000f3 2020
0000f4 2020
0000f5 2020
0000f6 2020
0000f7 2020
0000f8 2020
0000f9 0000      	.db	"                    ",0,0
0000fa 940e 0615 	CALL	GLCD_HOME6
0000fc 940e 06d2 	CALL	GLCD_STRING
0000fe 2020
0000ff 2020
000100 2020
000101 614d
000102 6564
000103 6220
000104 2079
000105 2020
000106 2020
000107 2020
000108 0000      	.db	"      Made by       ",0,0
000109 940e 061c 	CALL	GLCD_HOME7
00010b 940e 06d2 	CALL	GLCD_STRING
00010d 4f20
00010e 6d68
00010f 5020
000110 6275
000111 696c
000112 6873
000113 6e69
000114 2067
000115 6f43
000116 202e
000117 0000      	.db	" Ohm Publishing Co. ",0,0
000118 940e 09ab 	CALL	D5SEC
                 
00011a 940e 05eb 	CALL	GLCD_HOME0		; display screen 2
00011c 940e 06d2 	CALL	GLCD_STRING
00011e 2020
00011f 2020
000120 4820
000121 7579
000122 646e
000123 6961
000124 4c20
000125 4443
000126 2020
000127 2020
000128 0000      	.db	"     Hyundai LCD    ",0,0
000129 940e 05f2 	CALL	GLCD_HOME1
00012b 940e 06d2 	CALL	GLCD_STRING
00012d 2020
00012e 2020
00012f 4748
000130 3231
000131 3036
000132 4e35
000133 2d59
000134 594c
000135 2020
000136 2020
000137 0000      	.db	"    HG12605NY-LY    ",0,0
000138 940e 05f9 	CALL	GLCD_HOME2
00013a 940e 06d2 	CALL	GLCD_STRING
00013c 2020
00013d 2020
00013e 2020
00013f 2020
000140 2020
000141 2020
000142 2020
000143 2020
000144 2020
000145 2020
000146 0000      	.db	"                    ",0,0
000147 940e 0600 	CALL	GLCD_HOME3
000149 940e 06d2 	CALL	GLCD_STRING
00014b 2020
00014c 2020
00014d 6559
00014e 6c6c
00014f 776f
000150 472f
000151 6572
000152 6e65
000153 2020
000154 2020
000155 0000      	.db	"    Yellow/Green    ",0,0
000156 940e 0607 	CALL	GLCD_HOME4
000158 940e 06d2 	CALL	GLCD_STRING
00015a 2020
00015b 4c20
00015c 4445
00015d 4220
00015e 6361
00015f 6c6b
000160 6769
000161 7468
000162 2020
000163 2020
000164 0000      	.db	"   LED Backlight    ",0,0
000165 940e 060e 	CALL	GLCD_HOME5
000167 940e 06d2 	CALL	GLCD_STRING
000169 2020
00016a 2020
00016b 2020
00016c 2020
00016d 2020
00016e 2020
00016f 2020
000170 2020
000171 2020
000172 2020
000173 0000      	.db	"                    ",0,0
000174 940e 0615 	CALL	GLCD_HOME6
000176 940e 06d2 	CALL	GLCD_STRING
000178 3231
000179 2038
00017a 2078
00017b 3436
00017c 4720
00017d 6172
00017e 6870
00017f 6369
000180 4c20
000181 4443
000182 0000      	.db	"128 x 64 Graphic LCD",0,0
000183 940e 061c 	CALL	GLCD_HOME7
000185 940e 06d2 	CALL	GLCD_STRING
000187 3620
000188 3878
000189 4220
00018a 786f
00018b 202c
00018c 7835
00018d 2037
00018e 5341
00018f 4943
000190 2049
000191 0000      	.db	" 6x8 Box, 5x7 ASCII ",0,0
000192 940e 09ab 	CALL	D5SEC
                 
000194 940e 05eb 	CALL	GLCD_HOME0		; display screen 3
000196 940e 06d2 	CALL	GLCD_STRING
000198 3d3d
000199 3d3d
00019a 3d3d
00019b 3d3d
00019c 3d3d
00019d 3d3d
00019e 3d3d
00019f 3d3d
0001a0 3d3d
0001a1 3d3d
0001a2 0000      	.db	"====================",0,0
0001a3 940e 05f2 	CALL	GLCD_HOME1
0001a5 940e 06d2 	CALL	GLCD_STRING
0001a7 2020
0001a8 5341
0001a9 4943
0001aa 2049
0001ab 6843
0001ac 7261
0001ad 6361
0001ae 6574
0001af 7372
0001b0 2020
0001b1 0000      	.db	"  ASCII Characters  ",0,0
0001b2 940e 05f9 	CALL	GLCD_HOME2
0001b4 940e 06d2 	CALL	GLCD_STRING
0001b6 3d3d
0001b7 3d3d
0001b8 3d3d
0001b9 3d3d
0001ba 3d3d
0001bb 3d3d
0001bc 3d3d
0001bd 3d3d
0001be 3d3d
0001bf 3d3d
0001c0 0000      	.db	"====================",0,0
0001c1 940e 061c 	CALL	GLCD_HOME7
0001c3 940e 06d2 	CALL	GLCD_STRING
0001c5 2020
0001c6 2020
0001c7 2020
0001c8 2020
0001c9 2020
0001ca 2020
0001cb 2020
0001cc 2020
0001cd 2020
0001ce 2020
0001cf 0000      	.db	"                    ",0,0
                 
0001d0 940e 0600 	CALL	GLCD_HOME3		; from 0x20 to 0x7E
0001d2 e54f      	LDI	CL,95
0001d3 e260      	LDI	DL,0x20
0001d4 2f86      TEST1A:	MOV	LCD_BUFFER,DL
0001d5 940e 067f 	CALL	GLCD_CHARACTER
0001d7 9563      	INC	DL
0001d8 954a      	DEC	CL
0001d9 f7d1      	BRNE	TEST1A
0001da 940e 09ab 	CALL	D5SEC
0001dc 940e 05ca 	CALL	CLEAR_SCREEN		; clear graphic LCD screen
                 
                 ;------------------------------------------------
                 ;	TEST 2 : Test Key Input
                 ;------------------------------------------------
0001de 940e 086e TEST2:	CALL	LCD_HOME1		; display test
0001e0 940e 0896 	CALL	LCD_STRING
0001e2 4b20
0001e3 5945
0001e4 4920
0001e5 504e
0001e6 5455
0001e7 5420
0001e8 5345
0001e9 2054
0001ea 0000      	.db	" KEY INPUT TEST ",0,0
0001eb 940e 0870 	CALL	LCD_HOME2
0001ed 940e 0896 	CALL	LCD_STRING
0001ef 5020
0001f0 6572
0001f1 7373
0001f2 4b20
0001f3 5945
0001f4 2d31
0001f5 2034
0001f6 2021
0001f7 0000      	.db	" Press KEY1-4 ! ",0,0
0001f8 940e 0965 	CALL	BEEP
                 
0001fa e946      	LDI	CL,150			; loop = 150 times
0001fb 940e 095e READ_KEY:CALL	KEY_CHECK		; input key
0001fd 3e00      	CPI	AL,0b11100000		; if KEY1, display KEY1 message
0001fe f479      	BRNE	CK_KEY2
0001ff 940e 0870 	CALL	LCD_HOME2
000201 940e 0896 	CALL	LCD_STRING
000203 2020
000204 4b20
000205 5945
000206 2031
000207 7369
000208 4f20
000209 2e4b
00020a 2020
00020b 0000      	.db	"   KEY1 is OK.  ",0,0
00020c 940c 023f 	JMP	TEST2X
                 
00020e 3d00      CK_KEY2:CPI	AL,0b11010000		; if KEY2, display KEY2 message
00020f f479      	BRNE	CK_KEY3
000210 940e 0870 	CALL	LCD_HOME2
000212 940e 0896 	CALL	LCD_STRING
000214 2020
000215 4b20
000216 5945
000217 2032
000218 7369
000219 4f20
00021a 2e4b
00021b 2020
00021c 0000      	.db	"   KEY2 is OK.  ",0,0
00021d 940c 023f 	JMP	TEST2X
                 
00021f 3b00      CK_KEY3:CPI	AL,0b10110000		; if KEY3, display KEY3 message
000220 f479      	BRNE	CK_KEY4
000221 940e 0870 	CALL	LCD_HOME2
000223 940e 0896 	CALL	LCD_STRING
000225 2020
000226 4b20
000227 5945
000228 2033
000229 7369
00022a 4f20
00022b 2e4b
00022c 2020
00022d 0000      	.db	"   KEY3 is OK.  ",0,0
00022e 940c 023f 	JMP	TEST2X
                 
000230 3700      CK_KEY4:CPI	AL,0b01110000		; if KEY4, display KEY4 message
000231 f469      	BRNE	TEST2X
000232 940e 0870 	CALL	LCD_HOME2
000234 940e 0896 	CALL	LCD_STRING
000236 2020
000237 4b20
000238 5945
000239 2034
00023a 7369
00023b 4f20
00023c 2e4b
00023d 2020
00023e 0000      	.db	"   KEY4 is OK.  ",0,0
                 
00023f 9500      TEST2X:	COM	AL			; display LED
000240 7f00      	ANDI	AL,0b11110000
000241 b905      	OUT	PORTB,AL
000242 940e 0998 	CALL	D50MS
000244 954a      	DEC	CL
000245 f009      	BREQ	TEST2Y
000246 cfb4      	RJMP	READ_KEY
                 
000247 e000      TEST2Y: LDI	AL,0b00000000		; clear LED
000248 b905      	OUT	PORTB,AL
                 
                 ;------------------------------------------------
                 ;	TEST 3 : Speaker Sound
                 ;------------------------------------------------
000249 940e 086e TEST3:	CALL	LCD_HOME1		; display test
00024b 940e 0896 	CALL	LCD_STRING
00024d 2020
00024e 5053
00024f 4145
000250 454b
000251 2052
000252 4554
000253 5453
000254 2020
000255 0000      	.db	"  SPEAKER TEST  ",0,0
000256 940e 0870 	CALL	LCD_HOME2
000258 940e 0896 	CALL	LCD_STRING
00025a 4420
00025b 206f
00025c 6552
00025d 4d20
00025e 2069
00025f 6146
000260 2e20
000261 2e2e
000262 0000      	.db	" Do Re Mi Fa ...",0,0
000263 940e 09a5 	CALL	D1SEC
                 
000265 e004      	LDI	AL,4			; tempo = 4
000266 940e 0a3f 	CALL	SET_TEMPO
000268 940e 0a95 	CALL	MIC
00026a 940e 0b5d 	CALL	NOTE4
00026c 940e 0a9f 	CALL	MID
00026e 940e 0b5d 	CALL	NOTE4
000270 940e 0aa9 	CALL	MIE
000272 940e 0b5d 	CALL	NOTE4
000274 940e 0aae 	CALL	MIF
000276 940e 0b5d 	CALL	NOTE4
000278 940e 0ab8 	CALL	MIG
00027a 940e 0b5d 	CALL	NOTE4
00027c 940e 0ac2 	CALL	MIA
00027e 940e 0b5d 	CALL	NOTE4
000280 940e 0acc 	CALL	MIB
000282 940e 0b5d 	CALL	NOTE4
000284 940e 0ad1 	CALL	HIC
000286 940e 0b6f 	CALL	NOTE2
000288 940e 0b5d 	CALL	REST4
                 
00028a 940e 0870 	CALL	LCD_HOME2
00028c 940e 0896 	CALL	LCD_STRING
00028e 4420
00028f 206f
000290 6953
000291 5220
000292 2061
000293 6f53
000294 2e6c
000295 2e2e
000296 0000      	.db	" Do Si Ra Sol...",0,0
000297 940e 0ad1 	CALL	HIC
000299 940e 0b5d 	CALL	NOTE4
00029b 940e 0acc 	CALL	MIB
00029d 940e 0b5d 	CALL	NOTE4
00029f 940e 0ac2 	CALL	MIA
0002a1 940e 0b5d 	CALL	NOTE4
0002a3 940e 0ab8 	CALL	MIG
0002a5 940e 0b5d 	CALL	NOTE4
0002a7 940e 0aae 	CALL	MIF
0002a9 940e 0b5d 	CALL	NOTE4
0002ab 940e 0aa9 	CALL	MIE
0002ad 940e 0b5d 	CALL	NOTE4
0002af 940e 0a9f 	CALL	MID
0002b1 940e 0b5d 	CALL	NOTE4
0002b3 940e 0a95 	CALL	MIC
0002b5 940e 0b6f 	CALL	NOTE2
0002b7 940e 0b5d 	CALL	REST4
                 
                 ;------------------------------------------------
                 ;	TEST 4 : Test A/D Converter
                 ;------------------------------------------------
0002b9 940e 086e TEST4:	CALL	LCD_HOME1		; display test
0002bb 940e 0896 	CALL	LCD_STRING
0002bd 2f41
0002be 2844
0002bf 4d4c
0002c0 3533
0002c1 5a44
0002c2 2029
0002c3 4554
0002c4 5453
0002c5 0000      	.db	"A/D(LM35DZ) TEST",0,0
0002c6 940e 0870 	CALL	LCD_HOME2
0002c8 940e 0896 	CALL	LCD_STRING
0002ca 4441
0002cb 3243
0002cc 303d
0002cd 3030
0002ce 3d48
0002cf 3030
0002d0 302e
0002d1 43df
0002d2 0000      	.db	"ADC2=000H=00.0",0xDF,"C",0,0
0002d3 940e 0965 	CALL	BEEP
                 
0002d5 e805      	LDI	AL,0b10000101		; ADC enable, 500kHz
0002d6 9300 007a 	STS	ADCSRA,AL
0002d8 e000      	LDI	AL,0b00000000
0002d9 9300 007b 	STS	ADCSRB,AL
0002db e402      	LDI	AL,0b01000010		; select ADC2 with AVCC
0002dc 9300 007c 	STS	ADMUX,AL		; (single ended)
0002de 940e 097c 	CALL	D50US
0002e0 940e 097f 	CALL	D100US
                 
0002e2 e154      	LDI	CH,20			; display 10 sec
0002e3 e140      TEST4A1:LDI	CL,16			; read ADC by 16 times
0002e4 2733      	CLR	BH			; clear sum
0002e5 2722      	CLR	BL
0002e6 ed05      TEST4A2:LDI	AL,0b11010101		; start conversion and clear ADIF
0002e7 9300 007a 	STS	ADCSRA,AL
0002e9 0000      	NOP
0002ea 9100 007a TEST4A3:LDS	AL,ADCSRA		; conversion complete ?
0002ec ff04      	SBRS	AL,ADIF
0002ed 940c 02ea 	JMP	TEST4A3
0002ef 9100 0078 	LDS	AL,ADCL			; ADCL must be read first, then ADCH
0002f1 9110 0079 	LDS	AH,ADCH
0002f3 0f20      	ADD	BL,AL			; add A/D result 16 times
0002f4 1f31      	ADC	BH,AH
0002f5 940e 0989 	CALL	D1MS
0002f7 954a      	DEC	CL
0002f8 f769      	BRNE	TEST4A2
0002f9 9536      	LSR	BH			; divide sum by 16
0002fa 9527      	ROR	BL
0002fb 9536      	LSR	BH
0002fc 9527      	ROR	BL
0002fd 9536      	LSR	BH
0002fe 9527      	ROR	BL
0002ff 9536      	LSR	BH
000300 9527      	ROR	BL
000301 ec84      	LDI	LCD_BUFFER,0xC4		; display in HEX
000302 940e 0872 	CALL	LCD_COMMAND
000304 2f13      	MOV	AH,BH
000305 2f02      	MOV	AL,BL
000306 940e 08b5 	CALL	LCD_4HEX
000308 ec84      	LDI	LCD_BUFFER,0xC4
000309 940e 0872 	CALL	LCD_COMMAND
00030b e38d      	LDI	LCD_BUFFER,'='
00030c 940e 0884 	CALL	LCD_DATA
00030e ec8a      	LDI	LCD_BUFFER,0xCA		; display in temperature(XX.X)
00030f 940e 0872 	CALL	LCD_COMMAND
000311 e013      	LDI	AH,high(1000)		; Temp = ADC2*100/1024
000312 ee08      	LDI	AL,low(1000)
000313 940e 09c9 	CALL	MUL16
000315 e074      	LDI	DH,high(1024)
000316 e060      	LDI	DL,low(1024)
000317 940e 09e7 	CALL	DIV16
000319 e624      	LDI	BL,100
00031a 940e 0a1e 	CALL	DIV8
00031c 2f80      	MOV	LCD_BUFFER,AL
00031d 6380      	ORI	LCD_BUFFER,'0'
00031e 940e 0884 	CALL	LCD_DATA
000320 2f01      	MOV	AL,AH
000321 2711      	CLR	AH
000322 e02a      	LDI	BL,10
000323 940e 0a1e 	CALL	DIV8
000325 2f80      	MOV	LCD_BUFFER,AL
000326 6380      	ORI	LCD_BUFFER,'0'
000327 940e 0884 	CALL	LCD_DATA
000329 e28e      	LDI	LCD_BUFFER,'.'
00032a 940e 0884 	CALL	LCD_DATA
00032c 2f81      	MOV	LCD_BUFFER,AH
00032d 6380      	ORI	LCD_BUFFER,'0'
00032e 940e 0884 	CALL	LCD_DATA
000330 940e 09a1 	CALL	D500MS
000332 955a      	DEC	CH
000333 f011      	BREQ	TEST4B
000334 940c 02e3 	JMP	TEST4A1
                 
000336 940e 086e TEST4B:	CALL	LCD_HOME1		; display test
000338 940e 0896 	CALL	LCD_STRING
00033a 4120
00033b 442f
00033c 5628
00033d 3152
00033e 2029
00033f 5420
000340 5345
000341 2054
000342 0000      	.db	" A/D(VR1)  TEST ",0,0
000343 940e 0870 	CALL	LCD_HOME2
000345 940e 0896 	CALL	LCD_STRING
000347 4441
000348 3343
000349 303d
00034a 3030
00034b 3d48
00034c 2e30
00034d 5b30
00034e 5d56
00034f 0000      	.db	"ADC3=000H=0.0[V]",0,0
000350 940e 0965 	CALL	BEEP
                 
000352 e403      	LDI	AL,0b01000011		; select ADC3 with AVCC
000353 9300 007c 	STS	ADMUX,AL		; (single ended)
000355 940e 097c 	CALL	D50US
000357 940e 097f 	CALL	D100US
                 
000359 e154      	LDI	CH,20			; display 10 sec
00035a e140      TEST4B1:LDI	CL,16			; read ADC by 16 times
00035b 2733      	CLR	BH			; clear sum
00035c 2722      	CLR	BL
00035d ed05      TEST4B2:LDI	AL,0b11010101		; start conversion and clear ADIF
00035e 9300 007a 	STS	ADCSRA,AL
000360 0000      	NOP
000361 9100 007a TEST4B3:LDS	AL,ADCSRA		; conversion complete ?
000363 ff04      	SBRS	AL,ADIF
000364 940c 0361 	JMP	TEST4B3
000366 9100 0078 	LDS	AL,ADCL			; ADCL must be read first, then ADCH
000368 9110 0079 	LDS	AH,ADCH
00036a 0f20      	ADD	BL,AL			; add A/D result 16 times
00036b 1f31      	ADC	BH,AH
00036c 940e 0989 	CALL	D1MS
00036e 954a      	DEC	CL
00036f f769      	BRNE	TEST4B2
000370 9536      	LSR	BH			; divide sum by 16
000371 9527      	ROR	BL
000372 9536      	LSR	BH
000373 9527      	ROR	BL
000374 9536      	LSR	BH
000375 9527      	ROR	BL
000376 9536      	LSR	BH
000377 9527      	ROR	BL
000378 ec84      	LDI	LCD_BUFFER,0xC4		; display in HEX
000379 940e 0872 	CALL	LCD_COMMAND
00037b 2f13      	MOV	AH,BH
00037c 2f02      	MOV	AL,BL
00037d 940e 08b5 	CALL	LCD_4HEX
00037f ec84      	LDI	LCD_BUFFER,0xC4
000380 940e 0872 	CALL	LCD_COMMAND
000382 e38d      	LDI	LCD_BUFFER,'='
000383 940e 0884 	CALL	LCD_DATA
000385 ec8a      	LDI	LCD_BUFFER,0xCA		; display in voltage(X.X)
000386 940e 0872 	CALL	LCD_COMMAND
000388 e010      	LDI	AH,high(50)		; Volt = ADC3*5/1024
000389 e302      	LDI	AL,low(50)
00038a 940e 09c9 	CALL	MUL16
00038c e074      	LDI	DH,high(1024)
00038d e060      	LDI	DL,low(1024)
00038e 940e 09e7 	CALL	DIV16
000390 e02a      	LDI	BL,10			; calculate X.X
000391 940e 0a1e 	CALL	DIV8
000393 6300      	ORI	AL,'0'
000394 2f80      	MOV	LCD_BUFFER,AL
000395 940e 0884 	CALL	LCD_DATA
000397 e28e      	LDI	LCD_BUFFER,'.'
000398 940e 0884 	CALL	LCD_DATA
00039a 2f81      	MOV	LCD_BUFFER,AH
00039b 6380      	ORI	LCD_BUFFER,'0'
00039c 940e 0884 	CALL	LCD_DATA
00039e 940e 09a1 	CALL	D500MS
0003a0 955a      	DEC	CH
0003a1 f011      	BREQ	TEST5
0003a2 940c 035a 	JMP	TEST4B1
                 
                 ;------------------------------------------------
                 ;	TEST 5 : Test D/A Converter
                 ;------------------------------------------------
0003a4 940e 086e TEST5:	CALL	LCD_HOME1		; display test
0003a6 940e 0896 	CALL	LCD_STRING
0003a8 4144
0003a9 3043
0003aa 3038
0003ab 2030
0003ac 2f44
0003ad 2041
0003ae 4554
0003af 5453
0003b0 0000      	.db	"DAC0800 D/A TEST",0,0
                 
0003b1 940e 0870 TEST5A:	CALL	LCD_HOME2		; triangular wave
0003b3 940e 0896 	CALL	LCD_STRING
0003b5 7254
0003b6 6169
0003b7 676e
0003b8 6c75
0003b9 7261
0003ba 5720
0003bb 7661
0003bc 2065
0003bd 0000      	.db	"Triangular Wave ",0,0
0003be 940e 0965 	CALL	BEEP
                 
0003c0 e05a      	LDI	CH,10			; output for 10 sec(about 200 Hz)
0003c1 ec48      TEST5A1:LDI	CL,200
0003c2 e0e0      TEST5A2:LDI	ZL,byte3(TRI_TABLE << 1); start address of triangular table
0003c3 bfeb      	OUT	RAMPZ,ZL
0003c4 e0f7      	LDI	ZH,high(TRI_TABLE << 1)
0003c5 eeea      	LDI	ZL,low(TRI_TABLE << 1)
0003c6 e624      	LDI	BL,100
0003c7 9107      TEST5A3:ELPM	AL,Z+			; read data
0003c8 b905      	OUT	PORTB,AL		; output D/A
0003c9 940e 097c 	CALL	D50US
0003cb 952a      	DEC	BL
0003cc f7d1      	BRNE	TEST5A3
0003cd 954a      	DEC	CL
0003ce f799      	BRNE	TEST5A2
0003cf 955a      	DEC	CH
0003d0 f781      	BRNE	TEST5A1
                 
0003d1 940e 0870 TEST5B:	CALL	LCD_HOME2		; sine wave
0003d3 940e 0896 	CALL	LCD_STRING
0003d5 2020
0003d6 5320
0003d7 6e69
0003d8 2065
0003d9 6157
0003da 6576
0003db 2020
0003dc 2020
0003dd 0000      	.db	"   Sine Wave    ",0,0
0003de 940e 0965 	CALL	BEEP
                 
0003e0 e05a      	LDI	CH,10			; output for 10 sec(about 200 Hz)
0003e1 ec48      TEST5B1:LDI	CL,200
0003e2 e0e0      TEST5B2:LDI	ZL,byte3(SIN_TABLE << 1); start address of sine table
0003e3 bfeb      	OUT	RAMPZ,ZL
0003e4 e0f8      	LDI	ZH,high(SIN_TABLE << 1)
0003e5 e4ee      	LDI	ZL,low(SIN_TABLE << 1)
0003e6 e624      	LDI	BL,100
0003e7 9107      TEST5B3:ELPM	AL,Z+			; read data
0003e8 b905      	OUT	PORTB,AL		; output D/A
0003e9 940e 097c 	CALL	D50US
0003eb 952a      	DEC	BL
0003ec f7d1      	BRNE	TEST5B3
0003ed 954a      	DEC	CL
0003ee f799      	BRNE	TEST5B2
0003ef 955a      	DEC	CH
0003f0 f781      	BRNE	TEST5B1
                 
0003f1 e000      	LDI	AL,0x00			; output 0x00 to D/A
0003f2 b905      	OUT	PORTB,AL
                 
0003f3 940c 0459 	JMP	TEST6
                 
                 TRI_TABLE:				; triangular wave data table
0003f5 8480
0003f6 8c88
0003f7 9490
0003f8 9c98
0003f9 a4a0      	.db	$80,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4
0003fa aca8
0003fb b4b0
0003fc bcb8
0003fd c4c0
0003fe ccc8      	.db	$A8,$AC,$B0,$B4,$B8,$BC,$C0,$C4,$C8,$CC
0003ff d4d0
000400 dcd8
000401 e4e0
000402 dce0
000403 d4d8      	.db	$D0,$D4,$D8,$DC,$E0,$E4,$E0,$DC,$D8,$D4
000404 ccd0
000405 c4c8
000406 bcc0
000407 b4b8
000408 acb0      	.db	$D0,$CC,$C8,$C4,$C0,$BC,$B8,$B4,$B0,$AC
000409 a4a8
00040a 9ca0
00040b 9498
00040c 8c90
00040d 8488      	.db	$A8,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84
00040e 7c80
00040f 7478
000410 6c70
000411 6468
000412 5c60      	.db	$80,$7C,$78,$74,$70,$6C,$68,$64,$60,$5C
000413 5458
000414 4c50
000415 4448
000416 3c40
000417 3438      	.db	$58,$54,$50,$4C,$48,$44,$40,$3C,$38,$34
000418 2c30
000419 2428
00041a 1c20
00041b 2420
00041c 2c28      	.db	$30,$2C,$28,$24,$20,$1C,$20,$24,$28,$2C
00041d 3430
00041e 3c38
00041f 4440
000420 4c48
000421 5450      	.db	$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$54
000422 5c58
000423 6460
000424 6c68
000425 7470
000426 7c78      	.db	$58,$5C,$60,$64,$68,$6C,$70,$74,$78,$7C
                 
                 SIN_TABLE:				; sine wave data table
000427 8880
000428 9890
000429 a7a0
00042a b6af
00042b c4bd      	.db	$80,$88,$90,$98,$A0,$A7,$AF,$B6,$BD,$C4
00042c d1cb
00042d ddd7
00042e e7e2
00042f efeb
000430 f6f3      	.db	$CB,$D1,$D7,$DD,$E2,$E7,$EB,$EF,$F3,$F6
000431 fbf9
000432 fefd
000433 ffff
000434 feff
000435 fbfd      	.db	$F9,$FB,$FD,$FE,$FF,$FF,$FF,$FE,$FD,$FB
000436 f6f9
000437 eff3
000438 e7eb
000439 dde2
00043a d1d7      	.db	$F9,$F6,$F3,$EF,$EB,$E7,$E2,$DD,$D7,$D1
00043b c4cb
00043c b6bd
00043d a7af
00043e 98a0
00043f 8890      	.db	$CB,$C4,$BD,$B6,$AF,$A7,$A0,$98,$90,$88
000440 7880
000441 6870
000442 5960
000443 4a51
000444 3c43      	.db	$80,$78,$70,$68,$60,$59,$51,$4A,$43,$3C
000445 2f35
000446 2329
000447 191e
000448 1115
000449 0a0d      	.db	$35,$2F,$29,$23,$1E,$19,$15,$11,$0D,$0A
00044a 0507
00044b 0203
00044c 0101
00044d 0201
00044e 0503      	.db	$07,$05,$03,$02,$01,$01,$01,$02,$03,$05
00044f 0a07
000450 110d
000451 1915
000452 231e
000453 2f29      	.db	$07,$0A,$0D,$11,$15,$19,$1E,$23,$29,$2F
000454 3c35
000455 4a43
000456 5951
000457 6860
000458 7870      	.db	$35,$3C,$43,$4A,$51,$59,$60,$68,$70,$78
                 
                 ;------------------------------------------------
                 ;	TEST 6 : Test RS-232C by USART0
                 ;------------------------------------------------
000459 940e 086e TEST6:	CALL	LCD_HOME1		; display test
00045b 940e 0896 	CALL	LCD_STRING
00045d 2020
00045e 5352
00045f 322d
000460 3233
000461 2043
000462 4554
000463 5453
000464 2020
000465 0000      	.db	"  RS-232C TEST  ",0,0
000466 940e 0870 	CALL	LCD_HOME2
000468 940e 0896 	CALL	LCD_STRING
00046a 5355
00046b 5241
00046c 3054
00046d 7420
00046e 7365
00046f 6974
000470 676e
000471 2e2e
000472 0000      	.db	"USART0 testing..",0,0
000473 940e 0965 	CALL	BEEP
000475 940e 09a8 	CALL	D2SEC
                 
000477 940e 0870 	CALL	LCD_HOME2
000479 940e 0896 	CALL	LCD_STRING
00047b 5355
00047c 5241
00047d 3054
00047e 2020
00047f 6f6e
000480 2074
000481 4b4f
000482 2120
000483 0000      	.db	"USART0  not OK !",0,0
                 
000484 e010      	LDI	AH,high(51)		; 19200 baud
000485 e303      	LDI	AL,low(51)
000486 9310 00c5 	STS	UBRR0H,AH
000488 9300 00c4 	STS	UBRR0L,AL
00048a e000      	LDI	AL,0b00000000		; asynchronous normal mode
00048b 9300 00c0 	STS	UCSR0A,AL
00048d e908      	LDI	AL,0b10011000		; receiver/transmitter enable, 8 data
00048e 9300 00c1 	STS	UCSR0B,AL		; Rx interrupt enable
000490 e006      	LDI	AL,0b00000110		; no parity, 1 stop, 8 data
000491 9300 00c2 	STS	UCSR0C,AL
000493 0000      	NOP
000494 9100 00c6 	LDS	AL,UDR0			; dummy read
000496 9478      	SEI				; global interrupt enable
                 
000497 ec80      	LDI	LCD_BUFFER,0xC0		; cursor home 2
000498 940e 0872 	CALL	LCD_COMMAND
00049a 940e 080e 	CALL	TX0_STRING		; transmit test message
00049c 5355
00049d 5241
00049e 3054
00049f 7420
0004a0 7365
0004a1 2074
0004a2 4b4f
0004a3 2120
0004a4 0000              .db     "USART0 test OK !",0,0
0004a5 940e 09a8 	CALL	D2SEC			; wait for receiving and displaying data
0004a7 94f8      	CLI				; global interrupt disable
                 
                 ;------------------------------------------------
                 ;	TEST 7 : Test 7-Segment LED
                 ;------------------------------------------------
0004a8 940e 086e TEST7:	CALL	LCD_HOME1		; display test
0004aa 940e 0896 	CALL	LCD_STRING
0004ac 3720
0004ad 532d
0004ae 4745
0004af 4c20
0004b0 4445
0004b1 5420
0004b2 5345
0004b3 2054
0004b4 0000      	.db	" 7-SEG LED TEST ",0,0
0004b5 940e 0870 	CALL	LCD_HOME2
0004b7 940e 0896 	CALL	LCD_STRING
0004b9 2020
0004ba 6173
0004bb 656d
0004bc 6e20
0004bd 6d75
0004be 6562
0004bf 7372
0004c0 2020
0004c1 0000      	.db	"  same numbers  ",0,0
0004c2 940e 0965 	CALL	BEEP
                 
0004c4 ef0f      	LDI	AL,0b11111111		; select all digits
0004c5 9300 4200 	STS	DIG_SELECT,AL
0004c7 ef0c      	LDI	AL,0b11111100		; 0
0004c8 9300 4000 	STS	LCD_DATABUS,AL
0004ca 940e 09a1 	CALL	D500MS
0004cc e600      	LDI	AL,0b01100000		; 1
0004cd 9300 4000 	STS	LCD_DATABUS,AL
0004cf 940e 09a1 	CALL	D500MS
0004d1 ed0a      	LDI	AL,0b11011010		; 2
0004d2 9300 4000 	STS	LCD_DATABUS,AL
0004d4 940e 09a1 	CALL	D500MS
0004d6 ef02      	LDI	AL,0b11110010		; 3
0004d7 9300 4000 	STS	LCD_DATABUS,AL
0004d9 940e 09a1 	CALL	D500MS
0004db e606      	LDI	AL,0b01100110		; 4
0004dc 9300 4000 	STS	LCD_DATABUS,AL
0004de 940e 09a1 	CALL	D500MS
0004e0 eb06      	LDI	AL,0b10110110		; 5
0004e1 9300 4000 	STS	LCD_DATABUS,AL
0004e3 940e 09a1 	CALL	D500MS
0004e5 eb0e      	LDI	AL,0b10111110		; 6
0004e6 9300 4000 	STS	LCD_DATABUS,AL
0004e8 940e 09a1 	CALL	D500MS
0004ea ee04      	LDI	AL,0b11100100		; 7
0004eb 9300 4000 	STS	LCD_DATABUS,AL
0004ed 940e 09a1 	CALL	D500MS
0004ef ef0e      	LDI	AL,0b11111110		; 8
0004f0 9300 4000 	STS	LCD_DATABUS,AL
0004f2 940e 09a1 	CALL	D500MS
0004f4 ef06      	LDI	AL,0b11110110		; 9
0004f5 9300 4000 	STS	LCD_DATABUS,AL
0004f7 940e 09a1 	CALL	D500MS
0004f9 e001      	LDI	AL,0b00000001		; .
0004fa 9300 4000 	STS	LCD_DATABUS,AL
0004fc 940e 09a5 	CALL	D1SEC
                 
0004fe 940e 0870 	CALL	LCD_HOME2
000500 940e 0896 	CALL	LCD_STRING
000502 6964
000503 6666
000504 7265
000505 6e65
000506 2074
000507 756e
000508 626d
000509 7265
00050a 0000      	.db	"different number",0,0
                 
00050b e055      	LDI	CH,5			; display 4 sec = 5*100*8 ms
00050c e644      TEST7A:	LDI	CL,100
00050d e600      TEST7B:	LDI	AL,0b01100000		; digit8 = 1
00050e 9300 4000 	STS	LCD_DATABUS,AL
000510 e800      	LDI	AL,0b10000000
000511 9300 4200 	STS	DIG_SELECT,AL
000513 940e 0989 	CALL	D1MS
000515 ed0a      	LDI	AL,0b11011010		; digit7 = 2
000516 9300 4000 	STS	LCD_DATABUS,AL
000518 e400      	LDI	AL,0b01000000
000519 9300 4200 	STS	DIG_SELECT,AL
00051b 940e 0989 	CALL	D1MS
00051d ef02      	LDI	AL,0b11110010		; digit6 = 3
00051e 9300 4000 	STS	LCD_DATABUS,AL
000520 e200      	LDI	AL,0b00100000
000521 9300 4200 	STS	DIG_SELECT,AL
000523 940e 0989 	CALL	D1MS
000525 e606      	LDI	AL,0b01100110		; digit5 = 4
000526 9300 4000 	STS	LCD_DATABUS,AL
000528 e100      	LDI	AL,0b00010000
000529 9300 4200 	STS	DIG_SELECT,AL
00052b 940e 0989 	CALL	D1MS
00052d eb06      	LDI	AL,0b10110110		; digit4 = 5
00052e 9300 4000 	STS	LCD_DATABUS,AL
000530 e008      	LDI	AL,0b00001000
000531 9300 4200 	STS	DIG_SELECT,AL
000533 940e 0989 	CALL	D1MS
000535 eb0e      	LDI	AL,0b10111110		; digit3 = 6
000536 9300 4000 	STS	LCD_DATABUS,AL
000538 e004      	LDI	AL,0b00000100
000539 9300 4200 	STS	DIG_SELECT,AL
00053b 940e 0989 	CALL	D1MS
00053d ee04      	LDI	AL,0b11100100		; digit2 = 7
00053e 9300 4000 	STS	LCD_DATABUS,AL
000540 e002      	LDI	AL,0b00000010
000541 9300 4200 	STS	DIG_SELECT,AL
000543 940e 0989 	CALL	D1MS
000545 ef0e      	LDI	AL,0b11111110		; digit1 = 8
000546 9300 4000 	STS	LCD_DATABUS,AL
000548 e001      	LDI	AL,0b00000001
000549 9300 4200 	STS	DIG_SELECT,AL
00054b 940e 0989 	CALL	D1MS
00054d 954a      	DEC	CL
00054e f011      	BREQ	TEST7C
00054f 940c 050d 	JMP	TEST7B
000551 955a      TEST7C:	DEC	CH
000552 f011      	BREQ	TEST7D
000553 940c 050c 	JMP	TEST7A
000555 e000      TEST7D:	LDI	AL,0b00000000		; clear 7-segment LED
000556 9300 4200 	STS	DIG_SELECT,AL
                 
                 ;------------------------------------------------
                 ;	TEST 8 : Test 62256 External SRAM
                 ;------------------------------------------------
000558 940e 086e TEST8:	CALL	LCD_HOME1		; display test
00055a 940e 0896 	CALL	LCD_STRING
00055c 3236
00055d 3532
00055e 2036
00055f 5253
000560 4d41
000561 2020
000562 4554
000563 5453
000564 0000      	.db	"62256 SRAM  TEST",0,0
000565 940e 0870 	CALL	LCD_HOME2
000567 940e 0896 	CALL	LCD_STRING
000569 3020
00056a 3030
00056b 4830
00056c 7420
00056d 7365
00056e 2074
00056f 4b4f
000570 2021
000571 0000      	.db	" 0000H test OK! ",0,0
000572 940e 0965 	CALL	BEEP
                 
000574 e8b0      	LDI	XH,high(0x8000)		; SRAM start address
000575 e0a0      	LDI	XL,low(0x8000)
                 
000576 ec81      TEST8A:	LDI	LCD_BUFFER,0xC1		; display test address
000577 940e 0872 	CALL	LCD_COMMAND
000579 2f1b      	MOV	AH,XH
00057a 2f0a      	MOV	AL,XL
00057b 940e 08b5 	CALL	LCD_4HEX
00057d e515      	LDI	AH,0x55			; test data 0x55
00057e 931c      	ST	X,AH
00057f 0000      	NOP
000580 910c      	LD	AL,X
000581 1701      	CP	AL,AH
000582 f471      	BRNE	RAM_ERR
000583 ea1a      	LDI	AH,0xAA			; test data 0xAA
000584 931c      	ST	X,AH
000585 0000      	NOP
000586 910d      	LD	AL,X+
000587 1701      	CP	AL,AH
000588 f441      	BRNE	RAM_ERR
000589 2f0a      	MOV	AL,XL
00058a 2b0b      	OR	AL,XH
00058b 3000      	CPI	AL,0x00
00058c f749      	BRNE	TEST8A
00058d 940e 09a5 	CALL	D1SEC
00058f 940c 05ac 	JMP	TEST_END
                 
000591 ec86      RAM_ERR:LDI	LCD_BUFFER,0xC6		; display error message
000592 940e 0872 	CALL	LCD_COMMAND
000594 940e 0896 	CALL	LCD_STRING
000596 2020
000597 3030
000598 2f48
000599 3030
00059a 2048
00059b 0000      	.db	"  00H/00H ",0,0
00059c ec88      	LDI	LCD_BUFFER,0xC8
00059d 940e 0872 	CALL	LCD_COMMAND
00059f 2f81      	MOV	LCD_BUFFER,AH
0005a0 940e 08ba 	CALL	LCD_2HEX
0005a2 ec8c      	LDI	LCD_BUFFER,0xCC
0005a3 940e 0872 	CALL	LCD_COMMAND
0005a5 2f80      	MOV	LCD_BUFFER,AL
0005a6 940e 08ba 	CALL	LCD_2HEX
0005a8 940e 0969 	CALL	ERROR			; error beep
0005aa 940e 09ab 	CALL	D5SEC
                 
0005ac 940e 086e TEST_END:CALL	LCD_HOME1		; display test end message
0005ae 940e 0896 	CALL	LCD_STRING
0005b0 2020
0005b1 6c41
0005b2 206c
0005b3 6574
0005b4 7473
0005b5 6520
0005b6 646e
0005b7 202e
0005b8 0000      	.db	"  All test end. ",0,0
0005b9 940e 0870 	CALL	LCD_HOME2
0005bb 940e 0896 	CALL	LCD_STRING
0005bd 2020
0005be 2020
0005bf 2020
0005c0 2020
0005c1 2020
0005c2 2020
0005c3 2020
0005c4 2020
0005c5 0000      	.db	"                ",0,0
0005c6 940e 09a8 	CALL	D2SEC
                 
0005c8 940c 0084 	JMP	TEST1
                 
                 ;====================================================================
                 ;	Graphic LCD Display Subroutine
                 ;====================================================================
                 ;------------------------------------------------
                 ;	Clear Graphic LCD Screen
                 ;------------------------------------------------
                 CLEAR_SCREEN:
0005ca e000      	LDI	AL,0b00000000		; clear all control signals
0005cb 9300 4100 	STS	LCD_CONTROL,AL
0005cd ec00      	LDI	AL,0b11000000		; CS1,CS2 display ON
0005ce e38f      	LDI	LCD_BUFFER,0b00111111
0005cf 940e 0648 	CALL	GLCD_COMMAND
0005d1 ec00      	LDI	AL,0b11000000		; CS1,CS2 display start line
0005d2 ec80      	LDI	LCD_BUFFER,0b11000000
0005d3 940e 0648 	CALL	GLCD_COMMAND
                 
0005d5 eb28      	LDI	BL,0b10111000		; X start address
0005d6 e058      	LDI	CH,8
0005d7 e430      CLEAR_S1:LDI	BH,0b01000000		; Y start address
0005d8 ec00      	LDI	AL,0b11000000		; CS1,CS2 X address
0005d9 2f82      	MOV	LCD_BUFFER,BL
0005da 940e 0648 	CALL	GLCD_COMMAND
0005dc ec00      	LDI	AL,0b11000000		; CS1,CS2 Y address
0005dd 2f83      	MOV	LCD_BUFFER,BH
0005de 940e 0648 	CALL	GLCD_COMMAND
0005e0 e440      	LDI	CL,64
0005e1 ec00      CLEAR_S2:LDI	AL,0b11000000		; clear CS1 and CS2
0005e2 e080      	LDI	LCD_BUFFER,0x00
0005e3 940e 0663 	CALL	GLCD_DATA
0005e5 954a      	DEC	CL
0005e6 f7d1      	BRNE	CLEAR_S2
0005e7 9523      	INC	BL
0005e8 955a      	DEC	CH
0005e9 f769      	BRNE	CLEAR_S1
0005ea 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Set Graphic LCD Display Position
                 ;------------------------------------------------
0005eb e000      GLCD_HOME0:LDI	AL,0
0005ec 9300 0200 	STS	Xcharacter,AL
0005ee e000      	LDI	AL,0
0005ef 9300 0201 	STS	Ycharacter,AL
0005f1 c030      	RJMP	GLCD_XY
0005f2 e001      GLCD_HOME1:LDI	AL,1
0005f3 9300 0200 	STS	Xcharacter,AL
0005f5 e000      	LDI	AL,0
0005f6 9300 0201 	STS	Ycharacter,AL
0005f8 c029      	RJMP	GLCD_XY
0005f9 e002      GLCD_HOME2:LDI	AL,2
0005fa 9300 0200 	STS	Xcharacter,AL
0005fc e000      	LDI	AL,0
0005fd 9300 0201 	STS	Ycharacter,AL
0005ff c022      	RJMP	GLCD_XY
000600 e003      GLCD_HOME3:LDI	AL,3
000601 9300 0200 	STS	Xcharacter,AL
000603 e000      	LDI	AL,0
000604 9300 0201 	STS	Ycharacter,AL
000606 c01b      	RJMP	GLCD_XY
000607 e004      GLCD_HOME4:LDI	AL,4
000608 9300 0200 	STS	Xcharacter,AL
00060a e000      	LDI	AL,0
00060b 9300 0201 	STS	Ycharacter,AL
00060d c014      	RJMP	GLCD_XY
00060e e005      GLCD_HOME5:LDI	AL,5
00060f 9300 0200 	STS	Xcharacter,AL
000611 e000      	LDI	AL,0
000612 9300 0201 	STS	Ycharacter,AL
000614 c00d      	RJMP	GLCD_XY
000615 e006      GLCD_HOME6:LDI	AL,6
000616 9300 0200 	STS	Xcharacter,AL
000618 e000      	LDI	AL,0
000619 9300 0201 	STS	Ycharacter,AL
00061b c006      	RJMP	GLCD_XY
00061c e007      GLCD_HOME7:LDI	AL,7
00061d 9300 0200 	STS	Xcharacter,AL
00061f e000      	LDI	AL,0
000620 9300 0201 	STS	Ycharacter,AL
                 
000622 9100 0200 GLCD_XY:LDS	AL,Xcharacter		; Xcharacter (0-7)
000624 eb88      	LDI	LCD_BUFFER,0b10111000
000625 0f80      	ADD	LCD_BUFFER,AL
000626 ec00      	LDI	AL,0b11000000
000627 940e 0648 	CALL	GLCD_COMMAND
000629 9100 0201 	LDS	AL,Ycharacter		; Ycharacter (0-19)
00062b 300a      	CPI	AL,10
00062c f470      	BRSH	GLCD_XY1
00062d 920f      	PUSH	R0
00062e 921f      	PUSH	R1
00062f e016      	LDI	AH,6			; if Ycharacter =< 9, CS1 Ycharacter
000630 9f01      	MUL	AL,AH
000631 e480      	LDI	LCD_BUFFER,0b01000000
000632 0d80      	ADD	LCD_BUFFER,R0
000633 e004      	LDI	AL,4
000634 0f80      	ADD	LCD_BUFFER,AL
000635 e400      	LDI	AL,0b01000000
000636 940e 0648 	CALL	GLCD_COMMAND
000638 901f      	POP	R1
000639 900f      	POP	R0
00063a 9508      	RET
00063b 920f      GLCD_XY1:PUSH	R0
00063c 921f      	PUSH	R1
00063d 500a      	SUBI	AL,10			; if Ycharacter >= 10, CS2 Ycharacter
00063e e016      	LDI	AH,6
00063f 9f01      	MUL	AL,AH
000640 e480      	LDI	LCD_BUFFER,0b01000000
000641 0d80      	ADD	LCD_BUFFER,R0
000642 e800      	LDI	AL,0b10000000
000643 940e 0648 	CALL	GLCD_COMMAND
000645 901f      	POP	R1
000646 900f      	POP	R0
000647 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Write a Command (AL, LCD_BUFFER)
                 ;------------------------------------------------
                 GLCD_COMMAND:
000648 930f      	PUSH	AL
000649 7c00      	ANDI	AL,0b11000000		; clear all signals except CS1, CS2
00064a 9300 4100 	STS	LCD_CONTROL,AL		; D/-I = 0
00064c 920f      	PUSH	R0			; delay for 500 ns
00064d 900f      	POP	R0
00064e 920f      	PUSH	R0
00064f 900f      	POP	R0
000650 9380 4000 	STS	LCD_DATABUS,LCD_BUFFER	; write command
000652 6200      	ORI	AL,0b00100000		; E = 1
000653 9300 4100 	STS	LCD_CONTROL,AL
000655 920f      	PUSH	R0			; delay for 500 ns
000656 900f      	POP	R0
000657 920f      	PUSH	R0
000658 900f      	POP	R0
000659 7d0f      	ANDI	AL,0b11011111		; E = 0
00065a 9300 4100 	STS	LCD_CONTROL,AL
00065c e000      	LDI	AL,0b00000000		; clear all control signals
00065d 9300 4100 	STS	LCD_CONTROL,AL
00065f 940e 0976 	CALL	D10US			; wait for GLCD busy
000661 910f      	POP	AL
000662 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Write a Data (AL, LCD_BUFFER)
                 ;------------------------------------------------
000663 930f      GLCD_DATA:PUSH	AL
000664 7c00      	ANDI	AL,0b11000000		; clear all signals except CS1, CS2
000665 6100      	ORI	AL,0b00010000		; D/-I = 1
000666 9300 4100 	STS	LCD_CONTROL,AL
000668 920f      	PUSH	R0			; delay for 500 ns
000669 900f      	POP	R0
00066a 920f      	PUSH	R0
00066b 900f      	POP	R0
00066c 9380 4000 	STS	LCD_DATABUS,LCD_BUFFER	; write data
00066e 6200      	ORI	AL,0b00100000		; E = 1
00066f 9300 4100 	STS	LCD_CONTROL,AL
000671 920f      	PUSH	R0			; delay for 500 ns
000672 900f      	POP	R0
000673 920f      	PUSH	R0
000674 900f      	POP	R0
000675 7d0f      	ANDI	AL,0b11011111		; E = 0
000676 9300 4100 	STS	LCD_CONTROL,AL
000678 e000      	LDI	AL,0b00000000		; clear all control signals
000679 9300 4100 	STS	LCD_CONTROL,AL
00067b 940e 0976 	CALL	D10US			; wait for GLCD busy
00067d 910f      	POP	AL
00067e 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Display a 6x8 Dot ASCII Character(LCD_BUFFER)
                 ;------------------------------------------------
                 GLCD_CHARACTER:
00067f 920f      	PUSH	R0			; store registers
000680 921f      	PUSH	R1
000681 930f      	PUSH	AL
000682 931f      	PUSH	AH
000683 932f      	PUSH	BL
000684 933f      	PUSH	BH
000685 93ef      	PUSH	ZL
000686 93ff      	PUSH	ZH
                 
000687 938f      	PUSH	LCD_BUFFER
000688 940e 0622 	CALL	GLCD_XY			; go display position
00068a 918f      	POP	LCD_BUFFER
                 
00068b 378f      	CPI	LCD_BUFFER,0x7F		; if ASCII >= 0x7F, space character
00068c f410      	BRSH	GLCD_CH1
00068d 3280      	CPI	LCD_BUFFER,0x20		; if ASCII < 0x20, space character
00068e f408      	BRSH	GLCD_CH2
00068f e280      GLCD_CH1:LDI	LCD_BUFFER,0x20
000690 e010      GLCD_CH2:LDI	AH,byte3(FONT << 1)	; start address of character font
000691 e0fd      	LDI	ZH,high(FONT << 1)
000692 eee2      	LDI	ZL,low(FONT << 1)
000693 5280      	SUBI	LCD_BUFFER,0x20		; from 0x20 to 0x7E
000694 e006      	LDI	AL,6
000695 9f08      	MUL	AL,LCD_BUFFER
000696 0de0      	ADD	ZL,R0
000697 1df1      	ADC	ZH,R1
000698 2700      	CLR	AL
000699 1f10      	ADC	AH,AL
00069a bf1b      	OUT	RAMPZ,AH
                 
00069b e025      	LDI	BL,5			; display 5-byte font
00069c 9100 0201 	LDS	AL,Ycharacter		; CS1 or CS2 ?
00069e 300a      	CPI	AL,10
00069f f410      	BRSH	GLCD_CH3
0006a0 e400      	LDI	AL,0b01000000
0006a1 c001      	RJMP	GLCD_CH4
0006a2 e800      GLCD_CH3:LDI	AL,0b10000000
0006a3 9187      GLCD_CH4:ELPM	LCD_BUFFER,Z+
0006a4 9110 0202 	LDS	AH,CURSOR_FLAG		; cursor on ?
0006a6 3010      	CPI	AH,0
0006a7 f069      	BREQ	GLCD_CH5
0006a8 9110 0200 	LDS	AH,Xcharacter		; Xcharacter = Xcursor ?
0006aa 9130 0203 	LDS	BH,Xcursor
0006ac 1713      	CP	AH,BH
0006ad f439      	BRNE	GLCD_CH5
0006ae 9110 0201 	LDS	AH,Ycharacter		; Ycharacter = Ycursor ?
0006b0 9130 0204 	LDS	BH,Ycursor
0006b2 1713      	CP	AH,BH
0006b3 f409      	BRNE	GLCD_CH5
0006b4 6880      	ORI	LCD_BUFFER,0b10000000	; if yes, display cursor
0006b5 940e 0663 GLCD_CH5:CALL	GLCD_DATA
0006b7 952a      	DEC	BL
0006b8 f751      	BRNE	GLCD_CH4
0006b9 e080      	LDI	LCD_BUFFER,0b00000000	; last byte 0x00
0006ba 940e 0663 	CALL	GLCD_DATA
                 
0006bc 9100 0201 	LDS	AL,Ycharacter		; go next character position
0006be 9503      	INC	AL
0006bf 3104      	CPI	AL,20
0006c0 f431      	BRNE	GLCD_CH6
0006c1 9100 0200 	LDS	AL,Xcharacter
0006c3 9503      	INC	AL
0006c4 9300 0200 	STS	Xcharacter,AL
0006c6 2700      	CLR	AL
0006c7 9300 0201 GLCD_CH6:STS	Ycharacter,AL
                 
0006c9 91ff      	POP	ZH			; restore registers
0006ca 91ef      	POP	ZL
0006cb 913f      	POP	BH
0006cc 912f      	POP	BL
0006cd 911f      	POP	AH
0006ce 910f      	POP	AL
0006cf 901f      	POP	R1
0006d0 900f      	POP	R0
0006d1 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Display a String on Graphic LCD
                 ;------------------------------------------------
                 GLCD_STRING:
0006d2 bbee      	OUT	GPIOR0,ZL		; store RAMPZ:ZH:ZL
0006d3 bdfa      	OUT	GPIOR1,ZH
0006d4 b7eb      	IN	ZL,RAMPZ
0006d5 bdeb      	OUT	GPIOR2,ZL
                 #if(defined(__ATmega2560__) || defined(__ATmega2561__))
0006d6 90bf      	POP	RAMPZ_BUFFER		; get start address of string(3-byte PC)
                 #else
                 #endif
0006d7 91ff      	POP	ZH
0006d8 91ef      	POP	ZL
0006d9 0fee      	LSL	ZL			; convert into byte address
0006da 1fff      	ROL	ZH
0006db 1cbb      	ROL	RAMPZ_BUFFER
0006dc bebb      	OUT	RAMPZ,RAMPZ_BUFFER
0006dd 9187      GLCD_ST1:ELPM	LCD_BUFFER,Z+		; read a character. end string ?
0006de 3080      	CPI	LCD_BUFFER,0
0006df f019      	BREQ	GLCD_ST2		; if yes, return
0006e0 940e 067f 	CALL	GLCD_CHARACTER		; if no, display a character
0006e2 cffa      	RJMP	GLCD_ST1
0006e3 fde0      GLCD_ST2:SBRC	ZL,0			; if odd address, skip 1 address
0006e4 9187      	ELPM	LCD_BUFFER,Z+
0006e5 b6bb      	IN	RAMPZ_BUFFER,RAMPZ	; convert into word address
0006e6 94b6      	LSR	RAMPZ_BUFFER
0006e7 95f7      	ROR	ZH
0006e8 95e7      	ROR	ZL
0006e9 93ef      	PUSH	ZL			; store new return address
0006ea 93ff      	PUSH	ZH
                 #if(defined(__ATmega2560__) || defined(__ATmega2561__))
0006eb 92bf      	PUSH	RAMPZ_BUFFER
                 #endif
0006ec b5eb      	IN	ZL,GPIOR2		; restore RAMPZ:ZH:ZL
0006ed bfeb      	OUT	RAMPZ,ZL
0006ee b5fa      	IN	ZH,GPIOR1
0006ef b3ee      	IN	ZL,GPIOR0
0006f0 9508      	RET
                 
                 ;====================================================================
                 ;	5x7 ASCII Character Font Data (6x8 Character Box)
                 ;====================================================================
0006f1 0000
0006f2 0000
0006f3 0000      FONT:	.db	0x00,0x00,0x00,0x00,0x00,0	; 0x20 space
0006f4 0000
0006f5 004f
0006f6 0000      	.db	0x00,0x00,0x4F,0x00,0x00,0	; 0x21 !
0006f7 0700
0006f8 0700
0006f9 0000      	.db	0x00,0x07,0x00,0x07,0x00,0	; 0x22 "
0006fa 7f14
0006fb 7f14
0006fc 0014      	.db	0x14,0x7F,0x14,0x7F,0x14,0	; 0x23 #
0006fd 2a24
0006fe 2a7f
0006ff 0012      	.db	0x24,0x2A,0x7F,0x2A,0x12,0	; 0x24 $
000700 1323
000701 6408
000702 0062      	.db	0x23,0x13,0x08,0x64,0x62,0	; 0x25 %
000703 4936
000704 2255
000705 0050      	.db	0x36,0x49,0x55,0x22,0x50,0	; 0x26 &
000706 0500
000707 0003
000708 0000      	.db	0x00,0x05,0x03,0x00,0x00,0	; 0x27 '
000709 1c00
00070a 4122
00070b 0000      	.db	0x00,0x1C,0x22,0x41,0x00,0	; 0x28 (
00070c 4100
00070d 1c22
00070e 0000      	.db	0x00,0x41,0x22,0x1C,0x00,0	; 0x29 )
00070f 0814
000710 083e
000711 0014      	.db	0x14,0x08,0x3E,0x08,0x14,0	; 0x2A *
000712 0808
000713 083e
000714 0008      	.db	0x08,0x08,0x3E,0x08,0x08,0	; 0x2B +
000715 5000
000716 0030
000717 0000      	.db	0x00,0x50,0x30,0x00,0x00,0	; 0x2C ,
000718 0808
000719 0808
00071a 0008      	.db	0x08,0x08,0x08,0x08,0x08,0	; 0x2D -
00071b 6000
00071c 0060
00071d 0000      	.db	0x00,0x60,0x60,0x00,0x00,0	; 0x2E .
00071e 1020
00071f 0408
000720 0002      	.db	0x20,0x10,0x08,0x04,0x02,0	; 0x2F /
000721 513e
000722 4549
000723 003e      	.db	0x3E,0x51,0x49,0x45,0x3E,0	; 0x30 0
000724 4200
000725 407f
000726 0000      	.db	0x00,0x42,0x7F,0x40,0x00,0	; 0x31 1
000727 6142
000728 4951
000729 0046      	.db	0x42,0x61,0x51,0x49,0x46,0	; 0x32 2
00072a 4121
00072b 4b45
00072c 0031      	.db	0x21,0x41,0x45,0x4B,0x31,0	; 0x33 3
00072d 1418
00072e 7f12
00072f 0010      	.db	0x18,0x14,0x12,0x7F,0x10,0	; 0x34 4
000730 4527
000731 4545
000732 0039      	.db	0x27,0x45,0x45,0x45,0x39,0	; 0x35 5
000733 4a3c
000734 4949
000735 0030      	.db	0x3C,0x4A,0x49,0x49,0x30,0	; 0x36 6
000736 7101
000737 0509
000738 0003      	.db	0x01,0x71,0x09,0x05,0x03,0	; 0x37 7
000739 4936
00073a 4949
00073b 0036      	.db	0x36,0x49,0x49,0x49,0x36,0	; 0x38 8
00073c 4906
00073d 2949
00073e 001e      	.db	0x06,0x49,0x49,0x29,0x1E,0	; 0x39 9
00073f 3600
000740 0036
000741 0000      	.db	0x00,0x36,0x36,0x00,0x00,0	; 0x3A :
000742 5600
000743 0036
000744 0000      	.db	0x00,0x56,0x36,0x00,0x00,0	; 0x3B ;
000745 1408
000746 4122
000747 0000      	.db	0x08,0x14,0x22,0x41,0x00,0	; 0x3C <
000748 1414
000749 1414
00074a 0014      	.db	0x14,0x14,0x14,0x14,0x14,0	; 0x3D =
00074b 4100
00074c 1422
00074d 0008      	.db	0x00,0x41,0x22,0x14,0x08,0	; 0x3E >
00074e 0102
00074f 0951
000750 0006      	.db	0x02,0x01,0x51,0x09,0x06,0	; 0x3F ?
000751 4932
000752 4179
000753 003e      	.db	0x32,0x49,0x79,0x41,0x3E,0	; 0x40 @
000754 117e
000755 1111
000756 007e      	.db	0x7E,0x11,0x11,0x11,0x7E,0	; 0x41 A
000757 497f
000758 4949
000759 0036      	.db	0x7F,0x49,0x49,0x49,0x36,0	; 0x42 B
00075a 413e
00075b 4141
00075c 0022      	.db	0x3E,0x41,0x41,0x41,0x22,0	; 0x43 C
00075d 417f
00075e 2241
00075f 001c      	.db	0x7F,0x41,0x41,0x22,0x1C,0	; 0x44 D
000760 497f
000761 4949
000762 0041      	.db	0x7F,0x49,0x49,0x49,0x41,0	; 0x45 E
000763 097f
000764 0909
000765 0001      	.db	0x7F,0x09,0x09,0x09,0x01,0	; 0x46 F
000766 413e
000767 4949
000768 007a      	.db	0x3E,0x41,0x49,0x49,0x7A,0	; 0x47 G
000769 087f
00076a 0808
00076b 007f      	.db	0x7F,0x08,0x08,0x08,0x7F,0	; 0x48 H
00076c 4100
00076d 417f
00076e 0000      	.db	0x00,0x41,0x7F,0x41,0x00,0	; 0x49 I
00076f 4020
000770 3f41
000771 0001      	.db	0x20,0x40,0x41,0x3F,0x01,0	; 0x4A J
000772 087f
000773 2214
000774 0041      	.db	0x7F,0x08,0x14,0x22,0x41,0	; 0x4B K
000775 407f
000776 4040
000777 0040      	.db	0x7F,0x40,0x40,0x40,0x40,0	; 0x4C L
000778 027f
000779 020c
00077a 007f      	.db	0x7F,0x02,0x0C,0x02,0x7F,0	; 0x4D M
00077b 047f
00077c 1008
00077d 007f      	.db	0x7F,0x04,0x08,0x10,0x7F,0	; 0x4E N
00077e 413e
00077f 4141
000780 003e      	.db	0x3E,0x41,0x41,0x41,0x3E,0	; 0x4F O
000781 097f
000782 0909
000783 0006      	.db	0x7F,0x09,0x09,0x09,0x06,0	; 0x50 P
000784 413e
000785 2151
000786 005e      	.db	0x3E,0x41,0x51,0x21,0x5E,0	; 0x51 Q
000787 097f
000788 2919
000789 0046      	.db	0x7F,0x09,0x19,0x29,0x46,0	; 0x52 R
00078a 4926
00078b 4949
00078c 0032      	.db	0x26,0x49,0x49,0x49,0x32,0	; 0x53 S
00078d 0101
00078e 017f
00078f 0001      	.db	0x01,0x01,0x7F,0x01,0x01,0	; 0x54 T
000790 403f
000791 4040
000792 003f      	.db	0x3F,0x40,0x40,0x40,0x3F,0	; 0x55 U
000793 201f
000794 2040
000795 001f      	.db	0x1F,0x20,0x40,0x20,0x1F,0	; 0x56 V
000796 403f
000797 4038
000798 003f      	.db	0x3F,0x40,0x38,0x40,0x3F,0	; 0x57 W
000799 1463
00079a 1408
00079b 0063      	.db	0x63,0x14,0x08,0x14,0x63,0	; 0x58 X
00079c 0807
00079d 0870
00079e 0007      	.db	0x07,0x08,0x70,0x08,0x07,0	; 0x59 Y
00079f 5161
0007a0 4549
0007a1 0043      	.db	0x61,0x51,0x49,0x45,0x43,0	; 0x5A Z
0007a2 7f00
0007a3 4141
0007a4 0000      	.db	0x00,0x7F,0x41,0x41,0x00,0	; 0x5B [
0007a5 0402
0007a6 1008
0007a7 0020      	.db	0x02,0x04,0x08,0x10,0x20,0	; 0x5C \
0007a8 4100
0007a9 7f41
0007aa 0000      	.db	0x00,0x41,0x41,0x7F,0x00,0	; 0x5D ]
0007ab 0204
0007ac 0201
0007ad 0004      	.db	0x04,0x02,0x01,0x02,0x04,0	; 0x5E ^
0007ae 4040
0007af 4040
0007b0 0040      	.db	0x40,0x40,0x40,0x40,0x40,0	; 0x5F _
0007b1 0100
0007b2 0402
0007b3 0000      	.db	0x00,0x01,0x02,0x04,0x00,0	; 0x60 `
0007b4 5420
0007b5 5454
0007b6 0078      	.db	0x20,0x54,0x54,0x54,0x78,0	; 0x61 a
0007b7 487f
0007b8 4444
0007b9 0038      	.db	0x7F,0x48,0x44,0x44,0x38,0	; 0x62 b
0007ba 4438
0007bb 4444
0007bc 0020      	.db	0x38,0x44,0x44,0x44,0x20,0	; 0x63 c
0007bd 4438
0007be 4844
0007bf 007f      	.db	0x38,0x44,0x44,0x48,0x7F,0	; 0x64 d
0007c0 5438
0007c1 5454
0007c2 0018      	.db	0x38,0x54,0x54,0x54,0x18,0	; 0x65 e
0007c3 7e08
0007c4 0109
0007c5 0002      	.db	0x08,0x7E,0x09,0x01,0x02,0	; 0x66 f
0007c6 520c
0007c7 5252
0007c8 003e      	.db	0x0C,0x52,0x52,0x52,0x3E,0	; 0x67 g
0007c9 087f
0007ca 0404
0007cb 0078      	.db	0x7F,0x08,0x04,0x04,0x78,0	; 0x68 h
0007cc 0400
0007cd 007d
0007ce 0000      	.db	0x00,0x04,0x7D,0x00,0x00,0	; 0x69 i
0007cf 4020
0007d0 3d44
0007d1 0000      	.db	0x20,0x40,0x44,0x3D,0x00,0	; 0x6A j
0007d2 107f
0007d3 4428
0007d4 0000      	.db	0x7F,0x10,0x28,0x44,0x00,0	; 0x6B k
0007d5 4100
0007d6 407f
0007d7 0000      	.db	0x00,0x41,0x7F,0x40,0x00,0	; 0x6C l
0007d8 047c
0007d9 0418
0007da 007c      	.db	0x7C,0x04,0x18,0x04,0x7C,0	; 0x6D m
0007db 087c
0007dc 0404
0007dd 0078      	.db	0x7C,0x08,0x04,0x04,0x78,0	; 0x6E n
0007de 4438
0007df 4444
0007e0 0038      	.db	0x38,0x44,0x44,0x44,0x38,0	; 0x6F o
0007e1 147c
0007e2 1414
0007e3 0008      	.db	0x7C,0x14,0x14,0x14,0x08,0	; 0x70 p
0007e4 1408
0007e5 1814
0007e6 007c      	.db	0x08,0x14,0x14,0x18,0x7C,0	; 0x71 q
0007e7 087c
0007e8 0404
0007e9 0008      	.db	0x7C,0x08,0x04,0x04,0x08,0	; 0x72 r
0007ea 5448
0007eb 5454
0007ec 0020      	.db	0x48,0x54,0x54,0x54,0x20,0	; 0x73 s
0007ed 3f04
0007ee 4044
0007ef 0020      	.db	0x04,0x3F,0x44,0x40,0x20,0	; 0x74 t
0007f0 403c
0007f1 2040
0007f2 007c      	.db	0x3C,0x40,0x40,0x20,0x7C,0	; 0x75 u
0007f3 201c
0007f4 2040
0007f5 001c      	.db	0x1C,0x20,0x40,0x20,0x1C,0	; 0x76 v
0007f6 403c
0007f7 4030
0007f8 003c      	.db	0x3C,0x40,0x30,0x40,0x3C,0	; 0x77 w
0007f9 2844
0007fa 2810
0007fb 0044      	.db	0x44,0x28,0x10,0x28,0x44,0	; 0x78 x
0007fc 500c
0007fd 5050
0007fe 003c      	.db	0x0C,0x50,0x50,0x50,0x3C,0	; 0x79 y
0007ff 6444
000800 4c54
000801 0044      	.db	0x44,0x64,0x54,0x4C,0x44,0	; 0x7A z
000802 0800
000803 4136
000804 0000      	.db	0x00,0x08,0x36,0x41,0x00,0	; 0x7B {
000805 0000
000806 0077
000807 0000      	.db	0x00,0x00,0x77,0x00,0x00,0	; 0x7C |
000808 4100
000809 0836
00080a 0000      	.db	0x00,0x41,0x36,0x08,0x00,0	; 0x7D }
00080b 0408
00080c 1008
00080d 0008      	.db	0x08,0x04,0x08,0x10,0x08,0	; 0x7E ~
                 
                 ;====================================================================
                 ;	USART0 Serial Communication Subroutine
                 ;====================================================================
                 ;------------------------------------------------
                 ;	Transmit String by USART0
                 ;------------------------------------------------
00080e bbee      TX0_STRING:OUT	GPIOR0,ZL		; store RAMPZ:ZH:ZL
00080f bdfa      	OUT	GPIOR1,ZH
000810 b7eb      	IN	ZL,RAMPZ
000811 bdeb      	OUT	GPIOR2,ZL
                 #if(defined(__ATmega2560__) || defined(__ATmega2561__))
000812 90bf      	POP	RAMPZ_BUFFER		; get start address of string(3-byte PC)
                 #else
                 #endif
000813 91ff      	POP	ZH
000814 91ef      	POP	ZL
000815 0fee      	LSL	ZL			; convert into byte address
000816 1fff      	ROL	ZH
000817 1cbb      	ROL	RAMPZ_BUFFER
000818 bebb      	OUT	RAMPZ,RAMPZ_BUFFER
000819 90e7      TX0_STR1:ELPM	TXD_BUFFER,Z+		; read a character. end string ?
00081a 2d0e      	MOV	AL,TXD_BUFFER
00081b 3000      	CPI	AL,0
00081c f019      	BREQ	TX0_STR2		; if yes, return
00081d 940e 082e 	CALL	TX0_CHAR		; if no, transmit a character
00081f cff9      	RJMP	TX0_STR1
000820 fde0      TX0_STR2:SBRC	ZL,0			; if odd address, skip 1 address
000821 90e7      	ELPM	TXD_BUFFER,Z+
000822 b6bb      	IN	RAMPZ_BUFFER,RAMPZ	; convert into word address
000823 94b6      	LSR	RAMPZ_BUFFER
000824 95f7      	ROR	ZH
000825 95e7      	ROR	ZL
000826 93ef      	PUSH	ZL			; store new return address
000827 93ff      	PUSH	ZH
                 #if(defined(__ATmega2560__) || defined(__ATmega2561__))
000828 92bf      	PUSH	RAMPZ_BUFFER
                 #endif
000829 b5eb      	IN	ZL,GPIOR2		; restore RAMPZ:ZH:ZL
00082a bfeb      	OUT	RAMPZ,ZL
00082b b5fa      	IN	ZH,GPIOR1
00082c b3ee      	IN	ZL,GPIOR0
00082d 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Transmit a Character(TX0_BUFFER) by USART0
                 ;------------------------------------------------
00082e 930f      TX0_CHAR:PUSH	AL
                 
00082f 9100 00c0 TX0_CHAR1:LDS	AL,UCSR0A		; data register empty ?
000831 ff05      	SBRS	AL,UDRE0
000832 940c 082f 	JMP	TX0_CHAR1
000834 92e0 00c6 	STS	UDR0,TXD_BUFFER
                 
000836 910f      	POP	AL
000837 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Interrupt Service Routine of USART0
                 ;------------------------------------------------
                 USART0_RXC:
000838 930f      	PUSH	AL                      ; store registers
000839 b70f              IN      AL,SREG
                 
00083a 9180 00c6 	LDS	LCD_BUFFER,UDR0		; if yes, display a character
00083c 940e 0884 	CALL	LCD_DATA
                 
00083e bf0f              OUT     SREG,AL			; restore registers
00083f 910f              POP     AL
000840 9518              RETI
                 
                 ;====================================================================
                 ;	Include User Subroutine File
                 ;====================================================================
                 .include "OK2561.INC"			; OK-2561 I/O and subroutine file
                 
                 ;	User Register Definitions in OK-2561 V1.0 Training Kit
                 ;====================================================================
                 .def	RAMPZ_BUFFER	= r11		; can't use immediate addressing
                 .def	KEY_FLAG	= r12
                 .def	ZERO_FLAG	= r13
                 .def	TXD_BUFFER	= r14
                 .def	RXD_BUFFER	= r15
                 
                 .def	AL		= r16		; can use immediate addressing
                 .def	AH		= r17
                 .def	BL		= r18
                 .def	BH		= r19
                 .def	CL		= r20
                 .def	CH		= r21
                 .def	DL		= r22
                 .def	DH		= r23
                 
                 .def	LCD_BUFFER	= r24
                 .def	DELAY_COUNT	= r25
                 
                 ;====================================================================
                 ;	External I/O Address in OK-2561 V1.0 Training Kit
                 ;====================================================================
                 ;------------------------------------------------
                 ;	LCD, GLCD, and 7-Segment LED
                 ;------------------------------------------------
                 .equ	LCD_DATABUS	= 0x4000	; LCD/GLCD data
                 					; 7-segment LED pattern
                 .equ	LCD_CONTROL	= 0x4100	; LCD/GLCD control signal
                 .equ	DIG_SELECT	= 0x4200	; 7-segment LED digit select
                 					; 8-bit parallel data
                 
                 ;------------------------------------------------
                 ;	DS12C887 RTC
                 ;------------------------------------------------
                 .equ	RTC_SECOND	= 0x4300	; second   (00-59, BCD)
                 .equ	RTC_SEC_ALM	= 0x4301	; second alarm  
                 .equ	RTC_MINUTE	= 0x4302	; minute   (00-59, BCD)
                 .equ	RTC_MIN_ALM	= 0x4303	; minute alarm
                 .equ	RTC_HOUR	= 0x4304	; hour     (AM = 01-12, PM = 81-92, BCD)
                 .equ	RTC_HOUR_ALM	= 0x4305	; hour alarm
                 .equ	RTC_WEEKDAY	= 0x4306	; week day (SUN = 1, SAT = 7)
                 .equ	RTC_DATE	= 0x4307	; date     (01-31, BCD)
                 .equ	RTC_MONTH	= 0x4308	; month    (01-12, BCD)
                 .equ	RTC_YEAR	= 0x4309	; year     (00-99, BCD)
                 .equ	RTC_A		= 0x430A	; Reg. A : b7 = UIP flag(read only)
                 					;	   b6-4 = 010   oscillator on
                 					;	   b3-0 = 0000  no SQW frequency
                 					;		  0011  8192 Hz
                 					;		  1111  2 Hz
                 .equ	RTC_B		= 0x430B	; Reg. B : b7 = set UIP transfer
                 					;	   b6 = PIE(periodic interrupt enable)
                 					;	   b5 = AIE(alarm interrupt enable)
                 					;	   b4 = UIE(update ended interrupt enable)
                 					;	   b3 = square wave enable(SQW)
                 					;	   b2 = data mode(0=BCD, 1=binary)
                 					;	   b1 = 12/24 bit control(0=12, 1=24)
                 					;	   b0 = daylight saving enable
                 .equ	RTC_C		= 0x430C	; Reg. C : b7 = interrupt request flag
                 					;	   b6 = PF(periodic interrupt flag)
                 					;	   b5 = AF(alarm interrupt flag)
                 					;	   b4 = UF(update ended interrupt flag)
                 					;	   b3-0 = not used
                 .equ	RTC_D		= 0x430D	; Reg. D : b7 = VRT(valid RAM and time, read only)
                 					;	   b6-0 = not used
                 .equ	RTC_FLAG	= 0x430F	; battery backup and time OK("G") flag
                 
                 ;********************************************************************
                 ;*	Common Subroutines for OK-2561 V1.0 Training Kit	    *
                 ;********************************************************************
                 ;====================================================================
                 ;	Initialize ATmega2561 MCU and OK-2561 Kit
                 ;====================================================================
000841 ec01      INIT_MCU:LDI	AL,0b11000001		; 0x2200-0x7FFF = 1 wait
000842 9300 0074 	STS	XMCRA,AL		; 0x8000-0xFFFF = 0 wait
000844 e800      	LDI	AL,0b10000000		; enable bus keeper
000845 9300 0075 	STS	XMCRB,AL		; use PC0-PC7 as high byte of address bus
                 
000847 ef0f      	LDI	AL,0xFF			; PORTB = output (D/A, LED1-4, matrix LED)
000848 b904      	OUT	DDRB,AL
000849 e000      	LDI	AL,0x00
00084a b905      	OUT	PORTB,AL
00084b ef0f      	LDI	AL,0xFF			; PORTD = output (matrix LED)
00084c b90a      	OUT	DDRD,AL
00084d e000      	LDI	AL,0x00
00084e b90b      	OUT	PORTD,AL
00084f e00c      	LDI	AL,0x0C			; PORTE = output for PE3, PE2
000850 b90d      	OUT	DDRE,AL
000851 e000      	LDI	AL,0x00
000852 b90e      	OUT	PORTE,AL
000853 e000      	LDI	AL,0x00			; PORTF = input (KEY1-4)
000854 9300 0010 	STS	DDRF,AL
000856 e000      	LDI	AL,0x00
000857 9300 0011 	STS	PORTF,AL
                 
000859 e000      	LDI	AL,0b00000000		; clear LCD/GLCD control signal
00085a 9300 4100 	STS	LCD_CONTROL,AL
                 
00085c e000      	LDI	AL,0b00000000		; clear 7-segment LED
00085d 9300 4200 	STS	DIG_SELECT,AL
                 
00085f 2700      	CLR	AL			; initialize system variables
000860 2ed0      	MOV	ZERO_FLAG,AL
000861 2ec0      	MOV	KEY_FLAG,AL
000862 9508      	RET
                 
                 ;====================================================================
                 ;	Text LCD Display
                 ;====================================================================
                 ;------------------------------------------------
                 ;	Initialize LCD Module
                 ;------------------------------------------------
000863 e388      INIT_LCD:LDI	LCD_BUFFER,0x38		; function set(8 bit, 2 line, 5x7 dot)
000864 d00d      	RCALL	LCD_COMMAND
000865 e08c      	LDI	LCD_BUFFER,0x0C		; display control(display ON, cursor OFF)
000866 d00b      	RCALL	LCD_COMMAND
000867 e086      	LDI	LCD_BUFFER,0x06		; entry mode set(increment, not shift)
000868 d009      	RCALL	LCD_COMMAND
000869 e081      	LDI	LCD_BUFFER,0x01		; clear display
00086a d007      	RCALL	LCD_COMMAND
00086b 940e 098c 	CALL	D2MS
00086d 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Set LCD Cursor Position
                 ;------------------------------------------------
00086e e880      LCD_HOME1:LDI	LCD_BUFFER,0x80		; go home 1 (line 1, column 1)
00086f c002      	RJMP	LCD_COMMAND
000870 ec80      LCD_HOME2:LDI	LCD_BUFFER,0xC0		; go home 2 (line 2, column 1)
000871 c000      	RJMP	LCD_COMMAND
                 
                 ;------------------------------------------------
                 ;	Write a Command to LCD(LCD_BUFFER)
                 ;------------------------------------------------
                 LCD_COMMAND:
000872 930f      	PUSH	AL
000873 e000      	LDI	AL,0b00000000		; E = 0, Rs = 0
000874 9300 4100 	STS	LCD_CONTROL,AL
000876 9380 4000 	STS	LCD_DATABUS,LCD_BUFFER	; output command
000878 e001      	LDI	AL,0b00000001		; E = 1
000879 9300 4100 	STS	LCD_CONTROL,AL
00087b 920f      	PUSH	R0			; delay 4 cycles(about 250 ns)
00087c 900f      	POP	R0
00087d e000      	LDI	AL,0b00000000		; E = 0
00087e 9300 4100 	STS	LCD_CONTROL,AL
000880 940e 097c 	CALL	D50US
000882 910f      	POP	AL
000883 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Display a Character on LCD(LCD_BUFFER)
                 ;------------------------------------------------
000884 930f      LCD_DATA:PUSH	AL
000885 e002      	LDI	AL,0b00000010		; E = 0, Rs = 1
000886 9300 4100 	STS	LCD_CONTROL,AL
000888 9380 4000 	STS	LCD_DATABUS,LCD_BUFFER	; output data
00088a e003      	LDI	AL,0b00000011		; E = 1
00088b 9300 4100 	STS	LCD_CONTROL,AL
00088d 920f      	PUSH	R0			; delay 4 cycles(about 250 ns)
00088e 900f      	POP	R0
00088f e002      	LDI	AL,0b00000010		; E = 0
000890 9300 4100 	STS	LCD_CONTROL,AL
000892 940e 097c 	CALL	D50US
000894 910f      	POP	AL
000895 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Display String on LCD
                 ;------------------------------------------------
000896 bbee      LCD_STRING:OUT	GPIOR0,ZL		; store RAMPZ:ZH:ZL
000897 bdfa      	OUT	GPIOR1,ZH
000898 b7eb      	IN	ZL,RAMPZ
000899 bdeb      	OUT	GPIOR2,ZL
                 #if(defined(__ATmega2560__) || defined(__ATmega2561__))
00089a 90bf      	POP	RAMPZ_BUFFER		; get start address of string(3-byte PC)
                 #else
                 #endif
00089b 91ff      	POP	ZH
00089c 91ef      	POP	ZL
00089d 0fee      	LSL	ZL			; convert into byte address
00089e 1fff      	ROL	ZH
00089f 1cbb      	ROL	RAMPZ_BUFFER
0008a0 bebb      	OUT	RAMPZ,RAMPZ_BUFFER
0008a1 9187      LCD_STR1:ELPM	LCD_BUFFER,Z+		; read a character. end string ?
0008a2 3080      	CPI	LCD_BUFFER,0
0008a3 f019      	BREQ	LCD_STR2		; if yes, return
0008a4 940e 0884 	CALL	LCD_DATA		; if no, display a character
0008a6 cffa      	RJMP	LCD_STR1
0008a7 fde0      LCD_STR2:SBRC	ZL,0			; if odd address, skip 1 address
0008a8 9187      	ELPM	LCD_BUFFER,Z+
0008a9 b6bb      	IN	RAMPZ_BUFFER,RAMPZ	; convert into word address
0008aa 94b6      	LSR	RAMPZ_BUFFER
0008ab 95f7      	ROR	ZH
0008ac 95e7      	ROR	ZL
0008ad 93ef      	PUSH	ZL			; store new return address
0008ae 93ff      	PUSH	ZH
                 #if(defined(__ATmega2560__) || defined(__ATmega2561__))
0008af 92bf      	PUSH	RAMPZ_BUFFER
                 #endif
0008b0 b5eb      	IN	ZL,GPIOR2		; restore RAMPZ:ZH:ZL
0008b1 bfeb      	OUT	RAMPZ,ZL
0008b2 b5fa      	IN	ZH,GPIOR1
0008b3 b3ee      	IN	ZL,GPIOR0
0008b4 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Display 4 Digit HEX Data(AH:AL)
                 ;------------------------------------------------
0008b5 2f81      LCD_4HEX:MOV	LCD_BUFFER,AH		; high byte
0008b6 d003      	RCALL	LCD_2HEX
0008b7 2f80      	MOV	LCD_BUFFER,AL		; low byte
0008b8 d001      	RCALL	LCD_2HEX
0008b9 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Display 2 Digit HEX Data(LCD_BUFFER)
                 ;------------------------------------------------
0008ba 938f      LCD_2HEX:PUSH	LCD_BUFFER
0008bb 9586      	LSR	LCD_BUFFER		; upper digit
0008bc 9586      	LSR	LCD_BUFFER
0008bd 9586      	LSR	LCD_BUFFER
0008be 9586      	LSR	LCD_BUFFER
0008bf 308a      	CPI	LCD_BUFFER,0x0A
0008c0 f410      	BRSH	LCD_2HEX1
0008c1 6380      	ORI	LCD_BUFFER,'0'
0008c2 c005      	RJMP	LCD_2HEX2
0008c3 508a      LCD_2HEX1:SUBI	LCD_BUFFER,0x0A
0008c4 930f      	PUSH	AL
0008c5 e401      	LDI	AL,'A'
0008c6 0f80      	ADD	LCD_BUFFER,AL
0008c7 910f      	POP	AL
0008c8 940e 0884 LCD_2HEX2:CALL	LCD_DATA
0008ca 918f      	POP	LCD_BUFFER		; lower digit
0008cb 708f      	ANDI	LCD_BUFFER,0x0F
0008cc 308a      	CPI	LCD_BUFFER,0x0A
0008cd f410      	BRSH	LCD_2HEX3
0008ce 6380      	ORI	LCD_BUFFER,'0'
0008cf c005      	RJMP	LCD_2HEX4
0008d0 508a      LCD_2HEX3:SUBI	LCD_BUFFER,0x0A
0008d1 930f      	PUSH	AL
0008d2 e401      	LDI	AL,'A'
0008d3 0f80      	ADD	LCD_BUFFER,AL
0008d4 910f      	POP	AL
0008d5 940e 0884 LCD_2HEX4:CALL	LCD_DATA
0008d7 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Display 5/4/3-Digit Decimal Number(AH:AL)
                 ;	Display     2-Digit Decimal Number(AL)
                 ;------------------------------------------------
0008d8 937f      LCD_5DEC:PUSH	DH			; push registers
0008d9 936f      	PUSH	DL
0008da 933f      	PUSH	BH
0008db 932f      	PUSH	BL
0008dc 24dd      	CLR	ZERO_FLAG		; clear zero zone flag
0008dd 2733      	CLR	BH
0008de 2722      	CLR	BL
0008df e277      	LDI	DH,high(10000)		; display 10^4 digit
0008e0 e160      	LDI	DL,low(10000)
0008e1 d105      	RCALL	DIV16
0008e2 2f80      	MOV	LCD_BUFFER,AL
0008e3 6380      	ORI	LCD_BUFFER,'0'
0008e4 3380      	CPI	LCD_BUFFER,'0'
0008e5 f411      	BRNE	LCD_5DEC1
0008e6 e280      	LDI	LCD_BUFFER,' '
0008e7 c002      	RJMP	LCD_5DEC2
0008e8 24dd      LCD_5DEC1:CLR	ZERO_FLAG
0008e9 94d0      	COM	ZERO_FLAG
0008ea df99      LCD_5DEC2:RCALL	LCD_DATA
0008eb 0189      	MOVW	AH:AL,BH:BL
0008ec c005      	RJMP	LCD_4DEC1
                 
0008ed 937f      LCD_4DEC:PUSH	DH			; push registers
0008ee 936f      	PUSH	DL
0008ef 933f      	PUSH	BH
0008f0 932f      	PUSH	BL
0008f1 24dd      	CLR	ZERO_FLAG		; clear zero zone flag
0008f2 2733      LCD_4DEC1:CLR	BH
0008f3 2722      	CLR	BL
0008f4 e073      	LDI	DH,high(1000)		; display 10^3 digit
0008f5 ee68      	LDI	DL,low(1000)
0008f6 d0f0      	RCALL	DIV16
0008f7 2f80      	MOV	LCD_BUFFER,AL
0008f8 6380      	ORI	LCD_BUFFER,'0'
0008f9 2711      	CLR	AH
0008fa 16d1      	CP	ZERO_FLAG,AH
0008fb f431      	BRNE	LCD_4DEC3
0008fc 3380      	CPI	LCD_BUFFER,'0'
0008fd f411      	BRNE	LCD_4DEC2
0008fe e280      	LDI	LCD_BUFFER,' '
0008ff c002      	RJMP	LCD_4DEC3
000900 24dd      LCD_4DEC2:CLR	ZERO_FLAG
000901 94d0      	COM	ZERO_FLAG
000902 df81      LCD_4DEC3:RCALL	LCD_DATA
000903 0189      	MOVW	AH:AL,BH:BL
000904 c005      	RJMP	LCD_3DEC1
                 
000905 937f      LCD_3DEC:PUSH	DH			; push registers
000906 936f      	PUSH	DL
000907 933f      	PUSH	BH
000908 932f      	PUSH	BL
000909 24dd      	CLR	ZERO_FLAG		; clear zero zone flag
00090a e624      LCD_3DEC1:LDI	BL,100			; display 10^2 digit
00090b d112      	RCALL	DIV8
00090c 2f80      	MOV	LCD_BUFFER,AL
00090d 6380      	ORI	LCD_BUFFER,'0'
00090e 2733      	CLR	BH
00090f 16d3      	CP	ZERO_FLAG,BH
000910 f431      	BRNE	LCD_3DEC3
000911 3380      	CPI	LCD_BUFFER,'0'
000912 f411      	BRNE	LCD_3DEC2
000913 e280      	LDI	LCD_BUFFER,' '
000914 c002      	RJMP	LCD_3DEC3
000915 24dd      LCD_3DEC2:CLR	ZERO_FLAG
000916 94d0      	COM	ZERO_FLAG
000917 df6c      LCD_3DEC3:RCALL	LCD_DATA
000918 2f01      	MOV	AL,AH
000919 c005      	RJMP	LCD_2DEC1
                 
00091a 937f      LCD_2DEC:PUSH	DH			; push registers
00091b 936f      	PUSH	DL
00091c 933f      	PUSH	BH
00091d 932f      	PUSH	BL
00091e 24dd      	CLR	ZERO_FLAG		; clear zero zone flag
00091f 2711      LCD_2DEC1:CLR	AH
000920 e02a      	LDI	BL,10			; display 10^1 digit
000921 d0fc      	RCALL	DIV8
000922 2f80      	MOV	LCD_BUFFER,AL
000923 6380      	ORI	LCD_BUFFER,'0'
000924 2733      	CLR	BH
000925 16d3      	CP	ZERO_FLAG,BH
000926 f419      	BRNE	LCD_2DEC2
000927 3380      	CPI	LCD_BUFFER,'0'
000928 f409      	BRNE	LCD_2DEC2
000929 e280      	LDI	LCD_BUFFER,' '
00092a df59      LCD_2DEC2:RCALL	LCD_DATA
00092b 2f81      	MOV	LCD_BUFFER,AH		; display 10^0 digit
00092c 6380      	ORI	LCD_BUFFER,'0'
00092d df56      	RCALL	LCD_DATA
00092e 912f      	POP	BL
00092f 913f      	POP	BH
000930 916f      	POP	DL
000931 917f      	POP	DH
000932 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Display 8-Bit Binary Data(LCD_BUFFER)
                 ;------------------------------------------------
000933 931f      LCD_8BIN:PUSH	AH
000934 930f      	PUSH	AL
000935 e018      	LDI	AH,8
000936 2f08      	MOV	AL,LCD_BUFFER
000937 2f80      LCD_8B1:MOV	LCD_BUFFER,AL
000938 1f88      	ROL	LCD_BUFFER
000939 2f08      	MOV	AL,LCD_BUFFER
00093a 1f88      	ROL	LCD_BUFFER
00093b 7081      	ANDI	LCD_BUFFER,0b00000001
00093c 6380      	ORI	LCD_BUFFER,'0'
00093d 940e 0884 	CALL	LCD_DATA
00093f 951a      	DEC	AH
000940 f7b1      	BRNE	LCD_8B1
000941 910f      	POP	AL
000942 911f      	POP	AH
000943 9508      	RET
                 
                 ;====================================================================
                 ;	Input Key Switch with Beep & Debounce(AL=key value)
                 ;====================================================================
000944 d019      KEY_IN:	RCALL	KEY_CHECK		; read 1st
000945 2f10      	MOV	AH,AL
000946 940e 0989 	CALL	D1MS
000948 940e 095e 	CALL	KEY_CHECK		; read 2nd
00094a 1310      	CPSE	AH,AL
00094b cff8      	RJMP	KEY_IN
00094c 3f00      	CPI	AL,0b11110000		; if no key, check key off
00094d f439      	BRNE	KEY_IN2
00094e 2711      	CLR	AH
00094f 16c1      	CP	KEY_FLAG,AH
000950 f019      	BREQ	KEY_IN1
000951 940e 0995 	CALL	D20MS
000953 24cc      	CLR	KEY_FLAG
000954 9508      KEY_IN1:RET
000955 2711      KEY_IN2:CLR	AH			; if key input, check continuous key
000956 16c1      	CP	KEY_FLAG,AH
000957 f011      	BREQ	KEY_IN3
000958 ef00      	LDI	AL,0b11110000		; if continuous, treat as no key input
000959 9508      	RET
00095a 94c0      KEY_IN3:COM	KEY_FLAG		; if new key, beep & delay for debounce
00095b 940e 0965 	CALL	BEEP
00095d 9508      	RET
                 
00095e b10f      KEY_CHECK:IN	AL,PINF			; read key input
00095f 7f00      	ANDI	AL,0b11110000
000960 9508      	RET
                 
                 ;====================================================================
                 ;	Buzzer Sound
                 ;====================================================================
                 ;------------------------------------------------
                 ;	Buzzer ON or OFF
                 ;------------------------------------------------
                 BUZZER_ON:
000961 9a72      	SBI	PORTE,2
000962 9508      	RET
                 
                 BUZZER_OFF:
000963 9872      	CBI	PORTE,2
000964 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Sound Beep
                 ;------------------------------------------------
000965 dffb      BEEP:	RCALL	BUZZER_ON
000966 d031      	RCALL	D50MS
000967 dffb      	RCALL	BUZZER_OFF
000968 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Sound Error
                 ;------------------------------------------------
000969 dffb      ERROR:	RCALL	BEEP			; beep 2 times
00096a d030      	RCALL	D100MS
00096b dff9      	RCALL	BEEP
00096c 9508      	RET
                 
                 ;====================================================================
                 ;	Time Delay (for 16MHz clock)
                 ;====================================================================
00096d 939f      D1US:	PUSH	DELAY_COUNT
00096e e091      	LDI	DELAY_COUNT,1
00096f c03f      	RJMP	BASE1US
                 
000970 939f      D2US:	PUSH	DELAY_COUNT
000971 e092      	LDI	DELAY_COUNT,2
000972 c03c      	RJMP	BASE1US
                 
000973 939f      D5US:	PUSH	DELAY_COUNT
000974 e095      	LDI	DELAY_COUNT,5
000975 c039      	RJMP	BASE1US
                 
000976 939f      D10US:	PUSH	DELAY_COUNT
000977 e09a      	LDI	DELAY_COUNT,10
000978 c036      	RJMP	BASE1US
                 
000979 939f      D20US:	PUSH	DELAY_COUNT
00097a e194      	LDI	DELAY_COUNT,20
00097b c033      	RJMP	BASE1US
                 
00097c 939f      D50US:	PUSH	DELAY_COUNT
00097d e392      	LDI	DELAY_COUNT,50
00097e c030      	RJMP	BASE1US
                 
00097f 939f      D100US: PUSH	DELAY_COUNT
000980 e694      	LDI	DELAY_COUNT,100
000981 c02d      	RJMP	BASE1US
                 
000982 939f      D200US: PUSH	DELAY_COUNT
000983 ec98      	LDI	DELAY_COUNT,200
000984 c02a      	RJMP	BASE1US
                 
000985 dff9      D500US: RCALL	D100US
000986 dffb      	RCALL	D200US
000987 dffa      	RCALL	D200US
000988 9508      	RET
                 
000989 939f      D1MS:	PUSH	DELAY_COUNT
00098a e091      	LDI	DELAY_COUNT,1
00098b c02e      	RJMP	BASE1MS
                 
00098c 939f      D2MS:	PUSH	DELAY_COUNT
00098d e092      	LDI	DELAY_COUNT,2
00098e c02b      	RJMP	BASE1MS
                 
00098f 939f      D5MS:	PUSH	DELAY_COUNT
000990 e095      	LDI	DELAY_COUNT,5
000991 c028      	RJMP	BASE1MS
                 
000992 939f      D10MS:	PUSH	DELAY_COUNT
000993 e09a      	LDI	DELAY_COUNT,10
000994 c025      	RJMP	BASE1MS
                 
000995 939f      D20MS:	PUSH	DELAY_COUNT
000996 e194      	LDI	DELAY_COUNT,20
000997 c022      	RJMP	BASE1MS
                 
000998 939f      D50MS:	PUSH	DELAY_COUNT
000999 e392      	LDI	DELAY_COUNT,50
00099a c01f      	RJMP	BASE1MS
                 
00099b 939f      D100MS: PUSH	DELAY_COUNT
00099c e694      	LDI	DELAY_COUNT,100
00099d c01c      	RJMP	BASE1MS
                 
00099e 939f      D200MS: PUSH	DELAY_COUNT
00099f ec98      	LDI	DELAY_COUNT,200
0009a0 c019      	RJMP	BASE1MS
                 
0009a1 dff9      D500MS: RCALL	D100MS
0009a2 dffb      	RCALL	D200MS
0009a3 dffa      	RCALL	D200MS
0009a4 9508      	RET
                 
0009a5 dffb      D1SEC:	RCALL	D500MS
0009a6 dffa      	RCALL	D500MS
0009a7 9508      	RET
                 
0009a8 dffc      D2SEC:	RCALL	D1SEC
0009a9 dffb      	RCALL	D1SEC
0009aa 9508      	RET
                 
0009ab dff9      D5SEC:	RCALL	D1SEC
0009ac dffb      	RCALL	D2SEC
0009ad dffa      	RCALL	D2SEC
0009ae 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Basic 1 us Delay
                 ;------------------------------------------------
0009af 0000      BASE1US:NOP				; 1
0009b0 939f      	PUSH	DELAY_COUNT		; 2
0009b1 919f      	POP	DELAY_COUNT		; 2
0009b2 939f      	PUSH	DELAY_COUNT		; 2
0009b3 919f      	POP	DELAY_COUNT		; 2
0009b4 939f      	PUSH	DELAY_COUNT		; 2
0009b5 919f      	POP	DELAY_COUNT		; 2
0009b6 959a      	DEC	DELAY_COUNT		; 1
0009b7 f7b9      	BRNE	BASE1US			; 2 (total 16 cycles = 1 us)
0009b8 919f      	POP	DELAY_COUNT
0009b9 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Basic 1 ms Delay
                 ;------------------------------------------------
0009ba dfc7      BASE1MS:RCALL	D200US			; 200 us
0009bb dfc6      	RCALL	D200US			; 200 us
0009bc dfc5      	RCALL	D200US			; 200 us
0009bd dfc4      	RCALL	D200US			; 200 us
0009be dfc3      	RCALL	D200US			; 200 us
0009bf 959a      	DEC	DELAY_COUNT
0009c0 f7c9      	BRNE	BASE1MS			; (total = 1 ms)
0009c1 919f      	POP	DELAY_COUNT
0009c2 9508      	RET
                 
                 ;====================================================================
                 ;	16-Bit Arithmetic
                 ;====================================================================
                 ;------------------------------------------------
                 ;	16-Bit Addition (AH:AL = AH:AL + BH:BL)
                 ;------------------------------------------------
0009c3 0f02      ADD16:	ADD	AL,BL			; add low bytes
0009c4 1f13      	ADC	AH,BH			; add high bytes
0009c5 9508      	RET
                 
                 ;------------------------------------------------
                 ;	16-Bit Subtraction (AH:AL = AH:AL - BH:BL)
                 ;------------------------------------------------
0009c6 1b02      SUB16:	SUB	AL,BL			; subtract low bytes
0009c7 0b13      	SBC	AH,BH			; subtract high bytes
0009c8 9508      	RET
                 
                 ;------------------------------------------------
                 ;	16-Bit * 16-Bit = 32-Bit Unsigned Multiplication
                 ;	(BH:BL:AH:AL = AH:AL * BH:BL)
                 ;------------------------------------------------
0009c9 920f      MUL16:	PUSH	R0
0009ca 921f      	PUSH	R1
0009cb 922f      	PUSH	R2
0009cc 934f      	PUSH	CL
0009cd 935f      	PUSH	CH
0009ce 936f      	PUSH	DL
0009cf 937f      	PUSH	DH
0009d0 2422      	CLR	R2
0009d1 9f13      	MUL	AH,BH			; AH * BH
0009d2 01b0      	MOVW	DH:DL,R1:R0
0009d3 9f02      	MUL	AL,BL			; AL * BL
0009d4 01a0      	MOVW	CH:CL,R1:R0
0009d5 9f12      	MUL	AH,BL			; AH * BL
0009d6 0d50      	ADD	CH,R0
0009d7 1d61      	ADC	DL,R1
0009d8 1d72      	ADC	DH,R2
0009d9 9f30      	MUL	BH,AL			; BH * AL
0009da 0d50      	ADD	CH,R0
0009db 1d61      	ADC	DL,R1
0009dc 1d72      	ADC	DH,R2
0009dd 018a      	MOVW	AH:AL,CH:CL		; BH:BL:AH:AL <-- DH:DL:CH:CL
0009de 019b      	MOVW	BH:BL,DH:DL
0009df 917f      	POP	DH
0009e0 916f      	POP	DL
0009e1 915f      	POP	CH
0009e2 914f      	POP	CL
0009e3 902f      	POP	R2
0009e4 901f      	POP	R1
0009e5 900f      	POP	R0
0009e6 9508      	RET
                 
                 ;------------------------------------------------
                 ;	32-Bit / 16-Bit = 16-Bit Unsigned Division
                 ;	(BH:BL:AH:AL / DH:DL --> Q = AH:AL, R = BH:BL)
                 ;------------------------------------------------
0009e7 920f      DIV16:	PUSH	R0			; quotient
0009e8 921f      	PUSH	R1
0009e9 922f      	PUSH	R2			; remainder
0009ea 923f      	PUSH	R3
0009eb 924f      	PUSH	R4
0009ec 925f      	PUSH	R5
0009ed 934f      	PUSH	CL			; bit counter
0009ee 935f      	PUSH	CH			; zero value register
                 
0009ef 2422      	CLR	R2			; clear remainder
0009f0 2433      	CLR	R3
0009f1 2444      	CLR	R4
0009f2 2455      	CLR	R5
0009f3 2755      	CLR	CH			; clear zero value register
                 
0009f4 e240      	LDI	CL,32			; loop counter
0009f5 0f00      DIV16A:	LSL	AL			; shift dividend by 1 bit to left
0009f6 1f11      	ROL	AH
0009f7 1f22      	ROL	BL
0009f8 1f33      	ROL	BH
0009f9 1c22      	ROL	R2
0009fa 1c33      	ROL	R3
0009fb 1c44      	ROL	R4
0009fc 1c55      	ROL	R5
0009fd 1655      	CP	R5,CH			; remainder >= divisor ?
0009fe f439      	BRNE	DIV16B
0009ff 1645      	CP	R4,CH
000a00 f429      	BRNE	DIV16B
000a01 1637      	CP	R3,DH
000a02 f048      	BRLO	DIV16C
000a03 f411      	BRNE	DIV16B
000a04 1626      	CP	R2,DL
000a05 f030      	BRLO	DIV16C
000a06 1a26      DIV16B:	SUB	R2,DL			; if yes, remainder - divisor
000a07 0a37      	SBC	R3,DH
000a08 0a45      	SBC	R4,CH
000a09 0a55      	SBC	R5,CH
000a0a 9408      	SEC				;   and shift 1 into quotient
000a0b c001      	RJMP	DIV16D
000a0c 9488      DIV16C:	CLC				; if no, shift 0 into quotient
000a0d 1c00      DIV16D:	ROL	R0			; shift quotient by 1 bit to left
000a0e 1c11      	ROL	R1
000a0f 954a      	DEC	CL
000a10 f721      	BRNE	DIV16A
                 
000a11 2d33      	MOV	BH,R3			; make remainder
000a12 2d22      	MOV	BL,R2
000a13 2d11      	MOV	AH,R1			; make quotient
000a14 2d00      	MOV	AL,R0
                 
000a15 915f      	POP	CH
000a16 914f      	POP	CL
000a17 905f      	POP	R5
000a18 904f      	POP	R4
000a19 903f      	POP	R3
000a1a 902f      	POP	R2
000a1b 901f      	POP	R1
000a1c 900f      	POP	R0
000a1d 9508      	RET
                 
                 ;------------------------------------------------
                 ;	16-Bit / 8-Bit = 8-Bit Unsigned Division
                 ;	(AH:AL / BL --> Q = AL, R = AH)
                 ;------------------------------------------------
000a1e 920f      DIV8:	PUSH	R0			; quotient
000a1f 921f      	PUSH	R1			; remainder
000a20 922f      	PUSH	R2
000a21 934f      	PUSH	CL			; bit counter
000a22 935f      	PUSH	CH			; zero value register
                 
000a23 2411      	CLR	R1			; clear remainder
000a24 2422      	CLR	R2
000a25 2755      	CLR	CH			; clear zero value register
                 
000a26 e140      	LDI	CL,16			; loop counter
000a27 0f00      DIV8A:	LSL	AL			; shift dividend by 1 bit to left
000a28 1f11      	ROL	AH
000a29 1c11      	ROL	R1
000a2a 1c22      	ROL	R2
000a2b 1625      	CP	R2,CH			; remainder >= divisor ?
000a2c f411      	BRNE	DIV8B
000a2d 1612      	CP	R1,BL
000a2e f020      	BRLO	DIV8C
000a2f 1a12      DIV8B:	SUB	R1,BL			; if yes, remainder - divisor
000a30 0a25      	SBC	R2,CH			;   and shift 1 into quotient
000a31 9408      	SEC
000a32 c001      	RJMP	DIV8D
000a33 9488      DIV8C:	CLC				; if no, shift 0 into quotient
000a34 1c00      DIV8D:	ROL	R0			; shift quotient by 1 bit to left
000a35 954a      	DEC	CL
000a36 f781      	BRNE	DIV8A
                 
000a37 2d11      	MOV	AH,R1			; make remainder
000a38 2d00      	MOV	AL,R0			; make quotient
                 
000a39 915f      	POP	CH
000a3a 914f      	POP	CL
000a3b 902f      	POP	R2
000a3c 901f      	POP	R1
000a3d 900f      	POP	R0
000a3e 9508      	RET
                 .include "MUSIC2561.INC"		; music subroutine file
                 
                 ;*	Music Play Subroutines for OK-2561 V1.0 Training Kit	    *
                 ;********************************************************************
                 ;------------------------------------------------
                 ;	Set Tempo and Initialize Timer/Couner3
                 ;------------------------------------------------
                 SET_TEMPO:
000a3f 2f70      	MOV	DH,AL			; store tempo(from 1 to 7)
000a40 e400      	LDI	AL,0b01000000		; set CTC mode(12)
000a41 9300 0090 	STS	TCCR3A,AL
000a43 e108      	LDI	AL,0b00011000		; speaker off
000a44 9300 0091 	STS	TCCR3B,AL
000a46 e000      	LDI	AL,0b00000000
000a47 9300 0092 	STS	TCCR3C,AL
000a49 9508      	RET
                 
                 ;====================================================================
                 ;	Subroutine to Make Note
                 ;====================================================================
                 ;------------------------------------------------
                 ;	Note of Octave 2 (Very Low Octave)
                 ;------------------------------------------------
000a4a e213      VLOA:	LDI	AH,high(9008)		; note A
000a4b e300      	LDI	AL,low(9008)
000a4c 940e 0b26 	CALL	SET_TIMER3
000a4e 9508      	RET
000a4f e211      VLOAX:	LDI	AH,high(8580)		; note A#
000a50 e804      	LDI	AL,low(8580)
000a51 940e 0b26 	CALL	SET_TIMER3
000a53 9508      	RET
000a54 e11f      VLOB:	LDI	AH,high(8098)		; note B
000a55 ea02      	LDI	AL,low(8098)
000a56 940e 0b26 	CALL	SET_TIMER3
000a58 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Note of Octave 3 (Low Octave)
                 ;------------------------------------------------
000a59 e11d      LOC:	LDI	AH,high(7644)		; note C
000a5a ed0c      	LDI	AL,low(7644)
000a5b 940e 0b26 	CALL	SET_TIMER3
000a5d 9508      	RET
000a5e e11c      LOCX:	LDI	AH,high(7214)		; note C#
000a5f e20e      	LDI	AL,low(7214)
000a60 940e 0b26 	CALL	SET_TIMER3
000a62 9508      	RET
000a63 e11a      LOD:	LDI	AH,high(6810)		; note D
000a64 e90a      	LDI	AL,low(6810)
000a65 940e 0b26 	CALL	SET_TIMER3
000a67 9508      	RET
000a68 e119      LODX:	LDI	AH,high(6427)		; note D#
000a69 e10b      	LDI	AL,low(6427)
000a6a 940e 0b26 	CALL	SET_TIMER3
000a6c 9508      	RET
000a6d e117      LOE:	LDI	AH,high(6066)		; note E
000a6e eb02      	LDI	AL,low(6066)
000a6f 940e 0b26 	CALL	SET_TIMER3
000a71 9508      	RET
000a72 e116      LOF:	LDI	AH,high(5726)		; note F
000a73 e50e      	LDI	AL,low(5726)
000a74 940e 0b26 	CALL	SET_TIMER3
000a76 9508      	RET
000a77 e115      LOFX:	LDI	AH,high(5404)		; note F#
000a78 e10c      	LDI	AL,low(5404)
000a79 940e 0b26 	CALL	SET_TIMER3
000a7b 9508      	RET
000a7c e113      LOG:	LDI	AH,high(5101)		; note G
000a7d ee0d      	LDI	AL,low(5101)
000a7e 940e 0b26 	CALL	SET_TIMER3
000a80 9508      	RET
000a81 e112      LOGX:	LDI	AH,high(4815)		; note G#
000a82 ec0f      	LDI	AL,low(4815)
000a83 940e 0b26 	CALL	SET_TIMER3
000a85 9508      	RET
000a86 e111      LOA:	LDI	AH,high(4544)		; note A
000a87 ec00      	LDI	AL,low(4544)
000a88 940e 0b26 	CALL	SET_TIMER3
000a8a 9508      	RET
000a8b e110      LOAX:	LDI	AH,high(4289)		; note A#
000a8c ec01      	LDI	AL,low(4289)
000a8d 940e 0b26 	CALL	SET_TIMER3
000a8f 9508      	RET
000a90 e01f      LOB:	LDI	AH,high(4049)		; note B
000a91 ed01      	LDI	AL,low(4049)
000a92 940e 0b26 	CALL	SET_TIMER3
000a94 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Note of Octave 4 (Middle Octave)
                 ;------------------------------------------------
000a95 e01e      MIC:	LDI	AH,high(3821)		; note C
000a96 ee0d      	LDI	AL,low(3821)
000a97 940e 0b26 	CALL	SET_TIMER3
000a99 9508      	RET
000a9a e01e      MICX:	LDI	AH,high(3607)		; note C#
000a9b e107      	LDI	AL,low(3607)
000a9c 940e 0b26 	CALL	SET_TIMER3
000a9e 9508      	RET
000a9f e01d      MID:	LDI	AH,high(3404)		; note D
000aa0 e40c      	LDI	AL,low(3404)
000aa1 940e 0b26 	CALL	SET_TIMER3
000aa3 9508      	RET
000aa4 e01c      MIDX:	LDI	AH,high(3213)		; note D#
000aa5 e80d      	LDI	AL,low(3213)
000aa6 940e 0b26 	CALL	SET_TIMER3
000aa8 9508      	RET
000aa9 e01b      MIE:	LDI	AH,high(3033)		; note E
000aaa ed09      	LDI	AL,low(3033)
000aab 940e 0b26 	CALL	SET_TIMER3
000aad 9508      	RET
000aae e01b      MIF:	LDI	AH,high(2862)		; note F
000aaf e20e      	LDI	AL,low(2862)
000ab0 940e 0b26 	CALL	SET_TIMER3
000ab2 9508      	RET
000ab3 e01a      MIFX:	LDI	AH,high(2702)		; note F#
000ab4 e80e      	LDI	AL,low(2702)
000ab5 940e 0b26 	CALL	SET_TIMER3
000ab7 9508      	RET
000ab8 e019      MIG:	LDI	AH,high(2550)		; note G
000ab9 ef06      	LDI	AL,low(2550)
000aba 940e 0b26 	CALL	SET_TIMER3
000abc 9508      	RET
000abd e019      MIGX:	LDI	AH,high(2407)		; note G#
000abe e607      	LDI	AL,low(2407)
000abf 940e 0b26 	CALL	SET_TIMER3
000ac1 9508      	RET
000ac2 e018      MIA:	LDI	AH,high(2272)		; note A
000ac3 ee00      	LDI	AL,low(2272)
000ac4 940e 0b26 	CALL	SET_TIMER3
000ac6 9508      	RET
000ac7 e018      MIAX:	LDI	AH,high(2144)		; note A#
000ac8 e600      	LDI	AL,low(2144)
000ac9 940e 0b26 	CALL	SET_TIMER3
000acb 9508      	RET
000acc e017      MIB:	LDI	AH,high(2024)		; note B
000acd ee08      	LDI	AL,low(2024)
000ace 940e 0b26 	CALL	SET_TIMER3
000ad0 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Note of Octave 5 (High Octave)
                 ;------------------------------------------------
000ad1 e017      HIC:	LDI	AH,high(1910)		; note C
000ad2 e706      	LDI	AL,low(1910)
000ad3 940e 0b26 	CALL	SET_TIMER3
000ad5 9508      	RET
000ad6 e017      HICX:	LDI	AH,high(1803)		; note C#
000ad7 e00b      	LDI	AL,low(1803)
000ad8 940e 0b26 	CALL	SET_TIMER3
000ada 9508      	RET
000adb e016      HID:	LDI	AH,high(1702)		; note D
000adc ea06      	LDI	AL,low(1702)
000add 940e 0b26 	CALL	SET_TIMER3
000adf 9508      	RET
000ae0 e016      HIDX:	LDI	AH,high(1606)		; note D#
000ae1 e406      	LDI	AL,low(1606)
000ae2 940e 0b26 	CALL	SET_TIMER3
000ae4 9508      	RET
000ae5 e015      HIE:	LDI	AH,high(1516)		; note E
000ae6 ee0c      	LDI	AL,low(1516)
000ae7 940e 0b26 	CALL	SET_TIMER3
000ae9 9508      	RET
000aea e015      HIF:	LDI	AH,high(1431)		; note F
000aeb e907      	LDI	AL,low(1431)
000aec 940e 0b26 	CALL	SET_TIMER3
000aee 9508      	RET
000aef e015      HIFX:	LDI	AH,high(1350)		; note F#
000af0 e406      	LDI	AL,low(1350)
000af1 940e 0b26 	CALL	SET_TIMER3
000af3 9508      	RET
000af4 e014      HIG:	LDI	AH,high(1275)		; note G
000af5 ef0b      	LDI	AL,low(1275)
000af6 940e 0b26 	CALL	SET_TIMER3
000af8 9508      	RET
000af9 e014      HIGX:	LDI	AH,high(1203)		; note G#
000afa eb03      	LDI	AL,low(1203)
000afb 940e 0b26 	CALL	SET_TIMER3
000afd 9508      	RET
000afe e014      HIA:	LDI	AH,high(1135)		; note A
000aff e60f      	LDI	AL,low(1135)
000b00 940e 0b26 	CALL	SET_TIMER3
000b02 9508      	RET
000b03 e014      HIAX:	LDI	AH,high(1072)		; note A#
000b04 e300      	LDI	AL,low(1072)
000b05 940e 0b26 	CALL	SET_TIMER3
000b07 9508      	RET
000b08 e013      HIB:	LDI	AH,high(1011)		; note B
000b09 ef03      	LDI	AL,low(1011)
000b0a 940e 0b26 	CALL	SET_TIMER3
000b0c 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Note of Octave 6 (Very High Octave)
                 ;------------------------------------------------
000b0d e013      VHIC:	LDI	AH,high(955)		; note C
000b0e eb0b      	LDI	AL,low(955)
000b0f 940e 0b26 	CALL	SET_TIMER3
000b11 9508      	RET
000b12 e013      VHICX:	LDI	AH,high(901)		; note C#
000b13 e805      	LDI	AL,low(901)
000b14 940e 0b26 	CALL	SET_TIMER3
000b16 9508      	RET
000b17 e013      VHID:	LDI	AH,high(850)		; note D
000b18 e502      	LDI	AL,low(850)
000b19 940e 0b26 	CALL	SET_TIMER3
000b1b 9508      	RET
000b1c e013      VHIDX:	LDI	AH,high(803)		; note D#
000b1d e203      	LDI	AL,low(803)
000b1e 940e 0b26 	CALL	SET_TIMER3
000b20 9508      	RET
000b21 e012      VHIE:	LDI	AH,high(757)		; note E
000b22 ef05      	LDI	AL,low(757)
000b23 940e 0b26 	CALL	SET_TIMER3
000b25 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Set Timer/Counter3
                 ;------------------------------------------------
                 SET_TIMER3:
000b26 9310 0097 	STS	ICR3H,AH		; set ICR3
000b28 9300 0096 	STS	ICR3L,AL
000b2a e000      	LDI	AL,0			; clear TCNT3
000b2b 9300 0095 	STS	TCNT3H,AL
000b2d 9300 0094 	STS	TCNT3L,AL
000b2f e10a      	LDI	AL,0b00011010		; start CTC mode(prescaler = 8)
000b30 9300 0091 	STS	TCCR3B,AL
000b32 9508      	RET
                 
                 ; ===================================================================
                 ;	Subroutine for Length of Note and Rest
                 ; ===================================================================
                 NOTE32:
000b33 e053      REST32:	LDI	CH,1*3			; delay for note or rest
000b34 940e 0b81 	CALL	PLAY
000b36 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b38 9508      	RET
                 NOTE16:
000b39 e056      REST16:	LDI	CH,2*3			; delay for note or rest
000b3a 940e 0b81 	CALL	PLAY
000b3c 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b3e 9508      	RET
                 NOTE16D:
000b3f e059      REST16D:LDI	CH,3*3			; delay for note or rest
000b40 940e 0b81 	CALL	PLAY
000b42 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b44 9508      	RET
000b45 e054      NOTE16T:LDI	CH,2*2			; delay for note(triple)
000b46 940e 0b81 	CALL	PLAY
000b48 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b4a 9508      	RET
                 NOTE8:
000b4b e05c      REST8:	LDI	CH,4*3			; delay for note or rest
000b4c 940e 0b81 	CALL	PLAY
000b4e 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b50 9508      	RET
                 NOTE8D:
000b51 e152      REST8D:	LDI	CH,6*3			; delay for note or rest
000b52 940e 0b81 	CALL	PLAY
000b54 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b56 9508      	RET
000b57 e058      NOTE8T: LDI	CH,4*2			; delay for note(triple)
000b58 940e 0b81 	CALL	PLAY
000b5a 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b5c 9508      	RET
                 NOTE4:
000b5d e158      REST4:	LDI	CH,8*3			; delay for note or rest
000b5e 940e 0b81 	CALL	PLAY
000b60 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b62 9508      	RET
                 NOTE4D:
000b63 e254      REST4D:	LDI	CH,12*3			; delay for note or rest
000b64 940e 0b81 	CALL	PLAY
000b66 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b68 9508      	RET
000b69 e150      NOTE4T: LDI	CH,8*2			; delay for note(triple)
000b6a 940e 0b81 	CALL	PLAY
000b6c 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b6e 9508      	RET
                 NOTE2:
000b6f e350      REST2:	LDI	CH,16*3			; delay for note or rest
000b70 940e 0b81 	CALL	PLAY
000b72 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b74 9508      	RET
                 NOTE2D:
000b75 e458      REST2D:	LDI	CH,24*3			; delay for note or rest
000b76 940e 0b81 	CALL	PLAY
000b78 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b7a 9508      	RET
                 NOTE1:
000b7b e650      REST1:	LDI	CH,32*3			; delay for note or rest
000b7c 940e 0b81 	CALL	PLAY
000b7e 940e 0b8d 	CALL	SPEAKER_OFF		; speaker off
000b80 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Note & Rest Play Time with Base Time 21 ms
                 ;------------------------------------------------
000b81 2f47      PLAY:	MOV	CL,DH			; play time = CH * tempo * 7 ms
000b82 940e 0b89 BASETIME:CALL	D7MS
000b84 954a      	DEC	CL
000b85 f7e1      	BRNE	BASETIME
000b86 955a      	DEC	CH
000b87 f7c9      	BRNE	PLAY
000b88 9508      	RET
                 
                 ;------------------------------------------------
                 ;	Delay for 7 ms
                 ;------------------------------------------------
000b89 939f      D7MS:	PUSH	DELAY_COUNT
000b8a e097      	LDI	DELAY_COUNT,7
000b8b 940c 09ba 	JMP	BASE1MS
                 
                 ;------------------------------------------------
                 ;	Speaker Off
                 ;------------------------------------------------
                 SPEAKER_OFF:
000b8d e108      	LDI	AL,0b00011000		; speaker off
000b8e 9300 0091 	STS	TCCR3B,AL
000b90 940e 0989 	CALL	D1MS			; delay for 1 ms
000b92 9508      	RET
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2561 register use summary:
r0 :  43 r1 :  24 r2 :  18 r3 :   7 r4 :   6 r5 :   6 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:  18 r12:   5 r13:  14 r14:   4 r15:   0 
r16: 373 r17: 111 r18:  48 r19:  42 r20:  30 r21:  44 r22:  20 r23:  19 
r24: 108 r25:  44 r26:   3 r27:   3 r28:   0 r29:   0 r30:  43 r31:  24 
x  :   4 y  :   0 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega2561 instruction use summary:
adc   :   9 add   :  12 adiw  :   0 and   :   0 andi  :   8 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :  11 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 brne  :  41 brpl  :   0 
brsh  :   6 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  : 335 cbi   :   1 cbr   :   0 clc   :   2 clh   :   0 
cli   :   1 cln   :   0 clr   :  36 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   5 cp    :  15 cpc   :   0 cpi   :  21 cpse  :   1 
dec   :  24 eicall:   0 eijmp :   0 elpm  :   9 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :  17 inc   :   4 
jmp   :  16 ld    :   2 ldd   :   0 ldi   : 314 lds   :  19 lpm   :   0 
lsl   :   5 lsr   :  15 mov   :  41 movw  :   6 mul   :   7 muls  :   0 
mulsu :   0 neg   :   0 nop   :   6 or    :   1 ori   :  17 out   :  37 
pop   :  72 push  :  99 rcall :  40 ret   :  99 reti  :   1 rjmp  :  41 
rol   :  21 ror   :  14 sbc   :   5 sbci  :   0 sbi   :   1 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   3 sbrs  :   3 sec   :   2 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 
sts   :  94 sub   :   3 subi  :   4 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 51 out of 114 (44.7%)

ATmega2561 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001726   4032   1798   5830  262144   2.2%
[.dseg] 0x000200 0x000205      0      5      5    8192   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
