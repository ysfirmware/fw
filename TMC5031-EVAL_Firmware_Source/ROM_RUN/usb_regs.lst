   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"usb_regs.c"
  21              	.Ltext0:
  22              		.align	2
  23              		.global	SetCNTR
  24              		.thumb
  25              		.thumb_func
  27              	SetCNTR:
  28              	.LFB0:
  29              		.file 1 "lib//src/usb_regs.c"
   1:lib//src/usb_regs.c **** /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
   2:lib//src/usb_regs.c **** * File Name          : usb_regs.c
   3:lib//src/usb_regs.c **** * Author             : MCD Application Team
   4:lib//src/usb_regs.c **** * Version            : V2.2.1
   5:lib//src/usb_regs.c **** * Date               : 09/22/2008
   6:lib//src/usb_regs.c **** * Description        : Interface functions to USB cell registers
   7:lib//src/usb_regs.c **** ********************************************************************************
   8:lib//src/usb_regs.c **** * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
   9:lib//src/usb_regs.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  10:lib//src/usb_regs.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  11:lib//src/usb_regs.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  12:lib//src/usb_regs.c **** * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  13:lib//src/usb_regs.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  14:lib//src/usb_regs.c **** *******************************************************************************/
  15:lib//src/usb_regs.c **** 
  16:lib//src/usb_regs.c **** /* Includes ------------------------------------------------------------------*/
  17:lib//src/usb_regs.c **** #include "usb_lib.h"
  18:lib//src/usb_regs.c **** 
  19:lib//src/usb_regs.c **** /* Private typedef -----------------------------------------------------------*/
  20:lib//src/usb_regs.c **** /* Private define ------------------------------------------------------------*/
  21:lib//src/usb_regs.c **** /* Private macro -------------------------------------------------------------*/
  22:lib//src/usb_regs.c **** /* Private variables ---------------------------------------------------------*/
  23:lib//src/usb_regs.c **** /* Extern variables ----------------------------------------------------------*/
  24:lib//src/usb_regs.c **** /* Private function prototypes -----------------------------------------------*/
  25:lib//src/usb_regs.c **** /* Private functions ---------------------------------------------------------*/
  26:lib//src/usb_regs.c **** 
  27:lib//src/usb_regs.c **** /*******************************************************************************
  28:lib//src/usb_regs.c **** * Function Name  : SetCNTR.
  29:lib//src/usb_regs.c **** * Description    : Set the CNTR register value.
  30:lib//src/usb_regs.c **** * Input          : wRegValue: new register value.
  31:lib//src/usb_regs.c **** * Output         : None.
  32:lib//src/usb_regs.c **** * Return         : None.
  33:lib//src/usb_regs.c **** *******************************************************************************/
  34:lib//src/usb_regs.c **** void SetCNTR(u16 wRegValue)
  35:lib//src/usb_regs.c **** {
  30              		.loc 1 35 0
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  36:lib//src/usb_regs.c ****   _SetCNTR(wRegValue);
  35              		.loc 1 36 0
  36 0000 014B     		ldr	r3, .L3
  37 0002 1860     		str	r0, [r3, #0]
  37:lib//src/usb_regs.c **** }
  38              		.loc 1 37 0
  39 0004 7047     		bx	lr
  40              	.L4:
  41 0006 00BF     		.align	2
  42              	.L3:
  43 0008 405C0040 		.word	1073765440
  44              	.LFE0:
  46              		.align	2
  47              		.global	GetCNTR
  48              		.thumb
  49              		.thumb_func
  51              	GetCNTR:
  52              	.LFB1:
  38:lib//src/usb_regs.c **** 
  39:lib//src/usb_regs.c **** /*******************************************************************************
  40:lib//src/usb_regs.c **** * Function Name  : GetCNTR.
  41:lib//src/usb_regs.c **** * Description    : returns the CNTR register value.
  42:lib//src/usb_regs.c **** * Input          : None.
  43:lib//src/usb_regs.c **** * Output         : None.
  44:lib//src/usb_regs.c **** * Return         : CNTR register Value.
  45:lib//src/usb_regs.c **** *******************************************************************************/
  46:lib//src/usb_regs.c **** u16 GetCNTR(void)
  47:lib//src/usb_regs.c **** {
  53              		.loc 1 47 0
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  48:lib//src/usb_regs.c ****   return(_GetCNTR());
  57              		.loc 1 48 0
  58 000c 014B     		ldr	r3, .L7
  59 000e 1868     		ldr	r0, [r3, #0]
  49:lib//src/usb_regs.c **** }
  60              		.loc 1 49 0
  61 0010 80B2     		uxth	r0, r0
  62 0012 7047     		bx	lr
  63              	.L8:
  64              		.align	2
  65              	.L7:
  66 0014 405C0040 		.word	1073765440
  67              	.LFE1:
  69              		.align	2
  70              		.global	SetISTR
  71              		.thumb
  72              		.thumb_func
  74              	SetISTR:
  75              	.LFB2:
  50:lib//src/usb_regs.c **** 
  51:lib//src/usb_regs.c **** /*******************************************************************************
  52:lib//src/usb_regs.c **** * Function Name  : SetISTR.
  53:lib//src/usb_regs.c **** * Description    : Set the ISTR register value.
  54:lib//src/usb_regs.c **** * Input          : wRegValue: new register value.
  55:lib//src/usb_regs.c **** * Output         : None.
  56:lib//src/usb_regs.c **** * Return         : None.
  57:lib//src/usb_regs.c **** *******************************************************************************/
  58:lib//src/usb_regs.c **** void SetISTR(u16 wRegValue)
  59:lib//src/usb_regs.c **** {
  76              		.loc 1 59 0
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80              	.LVL1:
  60:lib//src/usb_regs.c ****   _SetISTR(wRegValue);
  81              		.loc 1 60 0
  82 0018 014B     		ldr	r3, .L11
  83 001a 1860     		str	r0, [r3, #0]
  61:lib//src/usb_regs.c **** }
  84              		.loc 1 61 0
  85 001c 7047     		bx	lr
  86              	.L12:
  87 001e 00BF     		.align	2
  88              	.L11:
  89 0020 445C0040 		.word	1073765444
  90              	.LFE2:
  92              		.align	2
  93              		.global	GetISTR
  94              		.thumb
  95              		.thumb_func
  97              	GetISTR:
  98              	.LFB3:
  62:lib//src/usb_regs.c **** 
  63:lib//src/usb_regs.c **** /*******************************************************************************
  64:lib//src/usb_regs.c **** * Function Name  : GetISTR
  65:lib//src/usb_regs.c **** * Description    : Returns the ISTR register value.
  66:lib//src/usb_regs.c **** * Input          : None.
  67:lib//src/usb_regs.c **** * Output         : None.
  68:lib//src/usb_regs.c **** * Return         : ISTR register Value
  69:lib//src/usb_regs.c **** *******************************************************************************/
  70:lib//src/usb_regs.c **** u16 GetISTR(void)
  71:lib//src/usb_regs.c **** {
  99              		.loc 1 71 0
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		@ link register save eliminated.
  72:lib//src/usb_regs.c ****   return(_GetISTR());
 103              		.loc 1 72 0
 104 0024 014B     		ldr	r3, .L15
 105 0026 1868     		ldr	r0, [r3, #0]
  73:lib//src/usb_regs.c **** }
 106              		.loc 1 73 0
 107 0028 80B2     		uxth	r0, r0
 108 002a 7047     		bx	lr
 109              	.L16:
 110              		.align	2
 111              	.L15:
 112 002c 445C0040 		.word	1073765444
 113              	.LFE3:
 115              		.align	2
 116              		.global	GetFNR
 117              		.thumb
 118              		.thumb_func
 120              	GetFNR:
 121              	.LFB4:
  74:lib//src/usb_regs.c **** 
  75:lib//src/usb_regs.c **** /*******************************************************************************
  76:lib//src/usb_regs.c **** * Function Name  : GetFNR
  77:lib//src/usb_regs.c **** * Description    : Returns the FNR register value.
  78:lib//src/usb_regs.c **** * Input          : None.
  79:lib//src/usb_regs.c **** * Output         : None.
  80:lib//src/usb_regs.c **** * Return         : FNR register Value
  81:lib//src/usb_regs.c **** *******************************************************************************/
  82:lib//src/usb_regs.c **** u16 GetFNR(void)
  83:lib//src/usb_regs.c **** {
 122              		.loc 1 83 0
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
  84:lib//src/usb_regs.c ****   return(_GetFNR());
 126              		.loc 1 84 0
 127 0030 014B     		ldr	r3, .L19
 128 0032 1868     		ldr	r0, [r3, #0]
  85:lib//src/usb_regs.c **** }
 129              		.loc 1 85 0
 130 0034 80B2     		uxth	r0, r0
 131 0036 7047     		bx	lr
 132              	.L20:
 133              		.align	2
 134              	.L19:
 135 0038 485C0040 		.word	1073765448
 136              	.LFE4:
 138              		.align	2
 139              		.global	SetDADDR
 140              		.thumb
 141              		.thumb_func
 143              	SetDADDR:
 144              	.LFB5:
  86:lib//src/usb_regs.c **** 
  87:lib//src/usb_regs.c **** /*******************************************************************************
  88:lib//src/usb_regs.c **** * Function Name  : SetDADDR
  89:lib//src/usb_regs.c **** * Description    : Set the DADDR register value.
  90:lib//src/usb_regs.c **** * Input          : wRegValue: new register value.
  91:lib//src/usb_regs.c **** * Output         : None.
  92:lib//src/usb_regs.c **** * Return         : None.
  93:lib//src/usb_regs.c **** *******************************************************************************/
  94:lib//src/usb_regs.c **** void SetDADDR(u16 wRegValue)
  95:lib//src/usb_regs.c **** {
 145              		.loc 1 95 0
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149              	.LVL2:
  96:lib//src/usb_regs.c ****   _SetDADDR(wRegValue);
 150              		.loc 1 96 0
 151 003c 014B     		ldr	r3, .L23
 152 003e 1860     		str	r0, [r3, #0]
  97:lib//src/usb_regs.c **** }
 153              		.loc 1 97 0
 154 0040 7047     		bx	lr
 155              	.L24:
 156 0042 00BF     		.align	2
 157              	.L23:
 158 0044 4C5C0040 		.word	1073765452
 159              	.LFE5:
 161              		.align	2
 162              		.global	GetDADDR
 163              		.thumb
 164              		.thumb_func
 166              	GetDADDR:
 167              	.LFB6:
  98:lib//src/usb_regs.c **** 
  99:lib//src/usb_regs.c **** /*******************************************************************************
 100:lib//src/usb_regs.c **** * Function Name  : GetDADDR
 101:lib//src/usb_regs.c **** * Description    : Returns the DADDR register value.
 102:lib//src/usb_regs.c **** * Input          : None.
 103:lib//src/usb_regs.c **** * Output         : None.
 104:lib//src/usb_regs.c **** * Return         : DADDR register Value
 105:lib//src/usb_regs.c **** *******************************************************************************/
 106:lib//src/usb_regs.c **** u16 GetDADDR(void)
 107:lib//src/usb_regs.c **** {
 168              		.loc 1 107 0
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 108:lib//src/usb_regs.c ****   return(_GetDADDR());
 172              		.loc 1 108 0
 173 0048 014B     		ldr	r3, .L27
 174 004a 1868     		ldr	r0, [r3, #0]
 109:lib//src/usb_regs.c **** }
 175              		.loc 1 109 0
 176 004c 80B2     		uxth	r0, r0
 177 004e 7047     		bx	lr
 178              	.L28:
 179              		.align	2
 180              	.L27:
 181 0050 4C5C0040 		.word	1073765452
 182              	.LFE6:
 184              		.align	2
 185              		.global	SetBTABLE
 186              		.thumb
 187              		.thumb_func
 189              	SetBTABLE:
 190              	.LFB7:
 110:lib//src/usb_regs.c **** 
 111:lib//src/usb_regs.c **** /*******************************************************************************
 112:lib//src/usb_regs.c **** * Function Name  : SetBTABLE
 113:lib//src/usb_regs.c **** * Description    : Set the BTABLE.
 114:lib//src/usb_regs.c **** * Input          : wRegValue: New register value.
 115:lib//src/usb_regs.c **** * Output         : None.
 116:lib//src/usb_regs.c **** * Return         : None.
 117:lib//src/usb_regs.c **** *******************************************************************************/
 118:lib//src/usb_regs.c **** void SetBTABLE(u16 wRegValue)
 119:lib//src/usb_regs.c **** {
 191              		.loc 1 119 0
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 195              	.LVL3:
 120:lib//src/usb_regs.c ****   _SetBTABLE(wRegValue);
 196              		.loc 1 120 0
 197 0054 4FF6F873 		movw	r3, #65528
 198 0058 024A     		ldr	r2, .L31
 199 005a 00EA0303 		and	r3, r0, r3
 200 005e 1360     		str	r3, [r2, #0]
 121:lib//src/usb_regs.c **** }
 201              		.loc 1 121 0
 202 0060 7047     		bx	lr
 203              	.L32:
 204 0062 00BF     		.align	2
 205              	.L31:
 206 0064 505C0040 		.word	1073765456
 207              	.LFE7:
 209              		.align	2
 210              		.global	GetBTABLE
 211              		.thumb
 212              		.thumb_func
 214              	GetBTABLE:
 215              	.LFB8:
 122:lib//src/usb_regs.c **** 
 123:lib//src/usb_regs.c **** /*******************************************************************************
 124:lib//src/usb_regs.c **** * Function Name  : GetBTABLE.
 125:lib//src/usb_regs.c **** * Description    : Returns the BTABLE register value.
 126:lib//src/usb_regs.c **** * Input          : None. 
 127:lib//src/usb_regs.c **** * Output         : None.
 128:lib//src/usb_regs.c **** * Return         : BTABLE address.
 129:lib//src/usb_regs.c **** *******************************************************************************/
 130:lib//src/usb_regs.c **** u16 GetBTABLE(void)
 131:lib//src/usb_regs.c **** {
 216              		.loc 1 131 0
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 132:lib//src/usb_regs.c ****   return(_GetBTABLE());
 220              		.loc 1 132 0
 221 0068 014B     		ldr	r3, .L35
 222 006a 1868     		ldr	r0, [r3, #0]
 133:lib//src/usb_regs.c **** }
 223              		.loc 1 133 0
 224 006c 80B2     		uxth	r0, r0
 225 006e 7047     		bx	lr
 226              	.L36:
 227              		.align	2
 228              	.L35:
 229 0070 505C0040 		.word	1073765456
 230              	.LFE8:
 232              		.align	2
 233              		.global	SetENDPOINT
 234              		.thumb
 235              		.thumb_func
 237              	SetENDPOINT:
 238              	.LFB9:
 134:lib//src/usb_regs.c **** 
 135:lib//src/usb_regs.c **** /*******************************************************************************
 136:lib//src/usb_regs.c **** * Function Name  : SetENDPOINT
 137:lib//src/usb_regs.c **** * Description    : Setthe Endpoint register value.
 138:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 139:lib//src/usb_regs.c **** *                  wRegValue.
 140:lib//src/usb_regs.c **** * Output         : None.
 141:lib//src/usb_regs.c **** * Return         : None.
 142:lib//src/usb_regs.c **** *******************************************************************************/
 143:lib//src/usb_regs.c **** void SetENDPOINT(u8 bEpNum, u16 wRegValue)
 144:lib//src/usb_regs.c **** {
 239              		.loc 1 144 0
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 243              	.LVL4:
 145:lib//src/usb_regs.c ****   _SetENDPOINT(bEpNum, wRegValue);
 244              		.loc 1 145 0
 245 0074 014B     		ldr	r3, .L39
 246 0076 43F82010 		str	r1, [r3, r0, lsl #2]
 146:lib//src/usb_regs.c **** }
 247              		.loc 1 146 0
 248 007a 7047     		bx	lr
 249              	.L40:
 250              		.align	2
 251              	.L39:
 252 007c 005C0040 		.word	1073765376
 253              	.LFE9:
 255              		.align	2
 256              		.global	GetENDPOINT
 257              		.thumb
 258              		.thumb_func
 260              	GetENDPOINT:
 261              	.LFB10:
 147:lib//src/usb_regs.c **** 
 148:lib//src/usb_regs.c **** /*******************************************************************************
 149:lib//src/usb_regs.c **** * Function Name  : GetENDPOINT
 150:lib//src/usb_regs.c **** * Description    : Return the Endpoint register value.
 151:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 152:lib//src/usb_regs.c **** * Output         : None.
 153:lib//src/usb_regs.c **** * Return         : Endpoint register value.
 154:lib//src/usb_regs.c **** *******************************************************************************/
 155:lib//src/usb_regs.c **** u16 GetENDPOINT(u8 bEpNum)
 156:lib//src/usb_regs.c **** {
 262              		.loc 1 156 0
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 266              	.LVL5:
 157:lib//src/usb_regs.c ****   return(_GetENDPOINT(bEpNum));
 267              		.loc 1 157 0
 268 0080 024B     		ldr	r3, .L43
 269 0082 53F82000 		ldr	r0, [r3, r0, lsl #2]
 270              	.LVL6:
 158:lib//src/usb_regs.c **** }
 271              		.loc 1 158 0
 272 0086 80B2     		uxth	r0, r0
 273 0088 7047     		bx	lr
 274              	.L44:
 275 008a 00BF     		.align	2
 276              	.L43:
 277 008c 005C0040 		.word	1073765376
 278              	.LFE10:
 280              		.align	2
 281              		.global	SetEPType
 282              		.thumb
 283              		.thumb_func
 285              	SetEPType:
 286              	.LFB11:
 159:lib//src/usb_regs.c **** 
 160:lib//src/usb_regs.c **** /*******************************************************************************
 161:lib//src/usb_regs.c **** * Function Name  : SetEPType
 162:lib//src/usb_regs.c **** * Description    : sets the type in the endpoint register.
 163:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 164:lib//src/usb_regs.c **** *                  wType: type definition.
 165:lib//src/usb_regs.c **** * Output         : None.
 166:lib//src/usb_regs.c **** * Return         : None.
 167:lib//src/usb_regs.c **** *******************************************************************************/
 168:lib//src/usb_regs.c **** void SetEPType(u8 bEpNum, u16 wType)
 169:lib//src/usb_regs.c **** {
 287              		.loc 1 169 0
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              	.LVL7:
 170:lib//src/usb_regs.c ****   _SetEPType(bEpNum, wType);
 291              		.loc 1 170 0
 292 0090 054B     		ldr	r3, .L47
 293              		.loc 1 169 0
 294 0092 10B5     		push	{r4, lr}
 295              	.LCFI0:
 296              		.loc 1 170 0
 297 0094 53F82040 		ldr	r4, [r3, r0, lsl #2]
 298 0098 48F68F12 		movw	r2, #35215
 299 009c 04EA0202 		and	r2, r4, r2
 300 00a0 0A43     		orrs	r2, r2, r1
 301 00a2 43F82020 		str	r2, [r3, r0, lsl #2]
 171:lib//src/usb_regs.c **** }
 302              		.loc 1 171 0
 303 00a6 10BD     		pop	{r4, pc}
 304              	.L48:
 305              		.align	2
 306              	.L47:
 307 00a8 005C0040 		.word	1073765376
 308              	.LFE11:
 310              		.align	2
 311              		.global	GetEPType
 312              		.thumb
 313              		.thumb_func
 315              	GetEPType:
 316              	.LFB12:
 172:lib//src/usb_regs.c **** 
 173:lib//src/usb_regs.c **** /*******************************************************************************
 174:lib//src/usb_regs.c **** * Function Name  : GetEPType
 175:lib//src/usb_regs.c **** * Description    : Returns the endpoint type.
 176:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 177:lib//src/usb_regs.c **** * Output         : None.
 178:lib//src/usb_regs.c **** * Return         : Endpoint Type
 179:lib//src/usb_regs.c **** *******************************************************************************/
 180:lib//src/usb_regs.c **** u16 GetEPType(u8 bEpNum)
 181:lib//src/usb_regs.c **** {
 317              		.loc 1 181 0
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320              		@ link register save eliminated.
 321              	.LVL8:
 182:lib//src/usb_regs.c ****   return(_GetEPType(bEpNum));
 322              		.loc 1 182 0
 323 00ac 024B     		ldr	r3, .L51
 324 00ae 53F82000 		ldr	r0, [r3, r0, lsl #2]
 325              	.LVL9:
 183:lib//src/usb_regs.c **** }
 326              		.loc 1 183 0
 327 00b2 00F4C060 		and	r0, r0, #1536
 328 00b6 7047     		bx	lr
 329              	.L52:
 330              		.align	2
 331              	.L51:
 332 00b8 005C0040 		.word	1073765376
 333              	.LFE12:
 335              		.align	2
 336              		.global	SetEPTxStatus
 337              		.thumb
 338              		.thumb_func
 340              	SetEPTxStatus:
 341              	.LFB13:
 184:lib//src/usb_regs.c **** 
 185:lib//src/usb_regs.c **** /*******************************************************************************
 186:lib//src/usb_regs.c **** * Function Name  : SetEPTxStatus
 187:lib//src/usb_regs.c **** * Description    : Set the status of Tx endpoint.
 188:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 189:lib//src/usb_regs.c **** *                  wState: new state.
 190:lib//src/usb_regs.c **** * Output         : None.
 191:lib//src/usb_regs.c **** * Return         : None.
 192:lib//src/usb_regs.c **** *******************************************************************************/
 193:lib//src/usb_regs.c **** void SetEPTxStatus(u8 bEpNum, u16 wState)
 194:lib//src/usb_regs.c **** {
 342              		.loc 1 194 0
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              	.LVL10:
 346              	.LBB2:
 195:lib//src/usb_regs.c ****   _SetEPTxStatus(bEpNum, wState);
 347              		.loc 1 195 0
 348 00bc 0A4B     		ldr	r3, .L57
 349              	.LBE2:
 350              		.loc 1 194 0
 351 00be 10B5     		push	{r4, lr}
 352              	.LCFI1:
 353              	.LBB3:
 354              		.loc 1 195 0
 355 00c0 53F82020 		ldr	r2, [r3, r0, lsl #2]
 356 00c4 48F6BF74 		movw	r4, #36799
 357              	.LVL11:
 358 00c8 02EA0404 		and	r4, r2, r4
 359              	.LVL12:
 360 00cc 11F0100F 		tst	r1, #16
 361 00d0 18BF     		it	ne
 362 00d2 84F01004 		eorne	r4, r4, #16
 363              	.LVL13:
 364 00d6 11F0200F 		tst	r1, #32
 365 00da 18BF     		it	ne
 366 00dc 84F02004 		eorne	r4, r4, #32
 367              	.LVL14:
 368 00e0 43F82040 		str	r4, [r3, r0, lsl #2]
 369              	.LBE3:
 196:lib//src/usb_regs.c **** }
 370              		.loc 1 196 0
 371 00e4 10BD     		pop	{r4, pc}
 372              	.L58:
 373 00e6 00BF     		.align	2
 374              	.L57:
 375 00e8 005C0040 		.word	1073765376
 376              	.LFE13:
 378              		.align	2
 379              		.global	SetEPRxStatus
 380              		.thumb
 381              		.thumb_func
 383              	SetEPRxStatus:
 384              	.LFB14:
 197:lib//src/usb_regs.c **** 
 198:lib//src/usb_regs.c **** /*******************************************************************************
 199:lib//src/usb_regs.c **** * Function Name  : SetEPRxStatus
 200:lib//src/usb_regs.c **** * Description    : Set the status of Rx endpoint.
 201:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 202:lib//src/usb_regs.c **** *                  wState: new state.
 203:lib//src/usb_regs.c **** * Output         : None.
 204:lib//src/usb_regs.c **** * Return         : None.
 205:lib//src/usb_regs.c **** *******************************************************************************/
 206:lib//src/usb_regs.c **** void SetEPRxStatus(u8 bEpNum, u16 wState)
 207:lib//src/usb_regs.c **** {
 385              		.loc 1 207 0
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL15:
 389              	.LBB4:
 208:lib//src/usb_regs.c ****   _SetEPRxStatus(bEpNum, wState);
 390              		.loc 1 208 0
 391 00ec 0A4B     		ldr	r3, .L63
 392              	.LBE4:
 393              		.loc 1 207 0
 394 00ee 10B5     		push	{r4, lr}
 395              	.LCFI2:
 396              	.LBB5:
 397              		.loc 1 208 0
 398 00f0 53F82020 		ldr	r2, [r3, r0, lsl #2]
 399 00f4 4BF68F74 		movw	r4, #49039
 400              	.LVL16:
 401 00f8 02EA0404 		and	r4, r2, r4
 402              	.LVL17:
 403 00fc 11F4805F 		tst	r1, #4096
 404 0100 18BF     		it	ne
 405 0102 84F48054 		eorne	r4, r4, #4096
 406              	.LVL18:
 407 0106 11F4005F 		tst	r1, #8192
 408 010a 18BF     		it	ne
 409 010c 84F40054 		eorne	r4, r4, #8192
 410              	.LVL19:
 411 0110 43F82040 		str	r4, [r3, r0, lsl #2]
 412              	.LBE5:
 209:lib//src/usb_regs.c **** }
 413              		.loc 1 209 0
 414 0114 10BD     		pop	{r4, pc}
 415              	.L64:
 416 0116 00BF     		.align	2
 417              	.L63:
 418 0118 005C0040 		.word	1073765376
 419              	.LFE14:
 421              		.align	2
 422              		.global	SetDouBleBuffEPStall
 423              		.thumb
 424              		.thumb_func
 426              	SetDouBleBuffEPStall:
 427              	.LFB15:
 210:lib//src/usb_regs.c **** 
 211:lib//src/usb_regs.c **** /*******************************************************************************
 212:lib//src/usb_regs.c **** * Function Name  : SetDouBleBuffEPStall
 213:lib//src/usb_regs.c **** * Description    : sets the status for Double Buffer Endpoint to STALL
 214:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 215:lib//src/usb_regs.c **** *                  bDir: Endpoint direction.
 216:lib//src/usb_regs.c **** * Output         : None.
 217:lib//src/usb_regs.c **** * Return         : None.
 218:lib//src/usb_regs.c **** *******************************************************************************/
 219:lib//src/usb_regs.c **** void SetDouBleBuffEPStall(u8 bEpNum, u8 bDir)
 220:lib//src/usb_regs.c **** {
 428              		.loc 1 220 0
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              	.LVL20:
 432 011c 38B5     		push	{r3, r4, r5, lr}
 433              	.LCFI3:
 434              		.loc 1 220 0
 435 011e 0D46     		mov	r5, r1
 436 0120 0446     		mov	r4, r0
 221:lib//src/usb_regs.c ****   u16 Endpoint_DTOG_Status;
 222:lib//src/usb_regs.c ****   Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
 437              		.loc 1 222 0
 438 0122 FFF7FEFF 		bl	GetENDPOINT
 439              	.LVL21:
 223:lib//src/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 440              		.loc 1 223 0
 441 0126 012D     		cmp	r5, #1
 442 0128 02D1     		bne	.L66
 224:lib//src/usb_regs.c ****   { /* OUT double buffered endpoint */
 225:lib//src/usb_regs.c ****     _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
 443              		.loc 1 225 0
 444 012a 20F48050 		bic	r0, r0, #4096
 445 012e 03E0     		b	.L69
 446              	.L66:
 226:lib//src/usb_regs.c ****   }
 227:lib//src/usb_regs.c ****   else if (bDir == EP_DBUF_IN)
 447              		.loc 1 227 0
 448 0130 022D     		cmp	r5, #2
 449 0132 04D1     		bne	.L68
 228:lib//src/usb_regs.c ****   { /* IN double buffered endpoint */
 229:lib//src/usb_regs.c ****     _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
 450              		.loc 1 229 0
 451 0134 20F01000 		bic	r0, r0, #16
 452              	.L69:
 453 0138 014B     		ldr	r3, .L71
 454 013a 43F82400 		str	r0, [r3, r4, lsl #2]
 455              	.L68:
 230:lib//src/usb_regs.c ****   }
 231:lib//src/usb_regs.c **** }
 456              		.loc 1 231 0
 457 013e 38BD     		pop	{r3, r4, r5, pc}
 458              	.L72:
 459              		.align	2
 460              	.L71:
 461 0140 005C0040 		.word	1073765376
 462              	.LFE15:
 464              		.align	2
 465              		.global	GetEPTxStatus
 466              		.thumb
 467              		.thumb_func
 469              	GetEPTxStatus:
 470              	.LFB16:
 232:lib//src/usb_regs.c **** 
 233:lib//src/usb_regs.c **** /*******************************************************************************
 234:lib//src/usb_regs.c **** * Function Name  : GetEPTxStatus
 235:lib//src/usb_regs.c **** * Description    : Returns the endpoint Tx status.
 236:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 237:lib//src/usb_regs.c **** * Output         : None.
 238:lib//src/usb_regs.c **** * Return         : Endpoint TX Status
 239:lib//src/usb_regs.c **** *******************************************************************************/
 240:lib//src/usb_regs.c **** u16 GetEPTxStatus(u8 bEpNum)
 241:lib//src/usb_regs.c **** {
 471              		.loc 1 241 0
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475              	.LVL22:
 242:lib//src/usb_regs.c ****   return(_GetEPTxStatus(bEpNum));
 476              		.loc 1 242 0
 477 0144 024B     		ldr	r3, .L75
 478 0146 53F82000 		ldr	r0, [r3, r0, lsl #2]
 479              	.LVL23:
 243:lib//src/usb_regs.c **** }
 480              		.loc 1 243 0
 481 014a 00F03000 		and	r0, r0, #48
 482 014e 7047     		bx	lr
 483              	.L76:
 484              		.align	2
 485              	.L75:
 486 0150 005C0040 		.word	1073765376
 487              	.LFE16:
 489              		.align	2
 490              		.global	GetEPRxStatus
 491              		.thumb
 492              		.thumb_func
 494              	GetEPRxStatus:
 495              	.LFB17:
 244:lib//src/usb_regs.c **** 
 245:lib//src/usb_regs.c **** /*******************************************************************************
 246:lib//src/usb_regs.c **** * Function Name  : GetEPRxStatus
 247:lib//src/usb_regs.c **** * Description    : Returns the endpoint Rx status.
 248:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 249:lib//src/usb_regs.c **** * Output         : None.
 250:lib//src/usb_regs.c **** * Return         : Endpoint RX Status
 251:lib//src/usb_regs.c **** *******************************************************************************/
 252:lib//src/usb_regs.c **** u16 GetEPRxStatus(u8 bEpNum)
 253:lib//src/usb_regs.c **** {
 496              		.loc 1 253 0
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 500              	.LVL24:
 254:lib//src/usb_regs.c ****   return(_GetEPRxStatus(bEpNum));
 501              		.loc 1 254 0
 502 0154 024B     		ldr	r3, .L79
 503 0156 53F82000 		ldr	r0, [r3, r0, lsl #2]
 504              	.LVL25:
 255:lib//src/usb_regs.c **** }
 505              		.loc 1 255 0
 506 015a 00F44050 		and	r0, r0, #12288
 507 015e 7047     		bx	lr
 508              	.L80:
 509              		.align	2
 510              	.L79:
 511 0160 005C0040 		.word	1073765376
 512              	.LFE17:
 514              		.align	2
 515              		.global	SetEPTxValid
 516              		.thumb
 517              		.thumb_func
 519              	SetEPTxValid:
 520              	.LFB18:
 256:lib//src/usb_regs.c **** 
 257:lib//src/usb_regs.c **** /*******************************************************************************
 258:lib//src/usb_regs.c **** * Function Name  : SetEPTxValid
 259:lib//src/usb_regs.c **** * Description    : Valid the endpoint Tx Status.
 260:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.  
 261:lib//src/usb_regs.c **** * Output         : None.
 262:lib//src/usb_regs.c **** * Return         : None.
 263:lib//src/usb_regs.c **** *******************************************************************************/
 264:lib//src/usb_regs.c **** void SetEPTxValid(u8 bEpNum)
 265:lib//src/usb_regs.c **** {
 521              		.loc 1 265 0
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525              	.LVL26:
 526              	.LBB6:
 266:lib//src/usb_regs.c ****   _SetEPTxStatus(bEpNum, EP_TX_VALID);
 527              		.loc 1 266 0
 528 0164 054B     		ldr	r3, .L83
 529 0166 48F6BF72 		movw	r2, #36799
 530              	.LVL27:
 531 016a 53F82010 		ldr	r1, [r3, r0, lsl #2]
 532 016e 01EA0202 		and	r2, r1, r2
 533              	.LVL28:
 534 0172 82F03002 		eor	r2, r2, #48
 535              	.LVL29:
 536 0176 43F82020 		str	r2, [r3, r0, lsl #2]
 537              	.LBE6:
 267:lib//src/usb_regs.c **** }
 538              		.loc 1 267 0
 539 017a 7047     		bx	lr
 540              	.L84:
 541              		.align	2
 542              	.L83:
 543 017c 005C0040 		.word	1073765376
 544              	.LFE18:
 546              		.align	2
 547              		.global	SetEPRxValid
 548              		.thumb
 549              		.thumb_func
 551              	SetEPRxValid:
 552              	.LFB19:
 268:lib//src/usb_regs.c **** 
 269:lib//src/usb_regs.c **** /*******************************************************************************
 270:lib//src/usb_regs.c **** * Function Name  : SetEPRxValid
 271:lib//src/usb_regs.c **** * Description    : Valid the endpoint Rx Status.
 272:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 273:lib//src/usb_regs.c **** * Output         : None.
 274:lib//src/usb_regs.c **** * Return         : None.
 275:lib//src/usb_regs.c **** *******************************************************************************/
 276:lib//src/usb_regs.c **** void SetEPRxValid(u8 bEpNum)
 277:lib//src/usb_regs.c **** {
 553              		.loc 1 277 0
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557              	.LVL30:
 558              	.LBB7:
 278:lib//src/usb_regs.c ****   _SetEPRxStatus(bEpNum, EP_RX_VALID);
 559              		.loc 1 278 0
 560 0180 054B     		ldr	r3, .L87
 561 0182 4BF68F72 		movw	r2, #49039
 562              	.LVL31:
 563 0186 53F82010 		ldr	r1, [r3, r0, lsl #2]
 564 018a 01EA0202 		and	r2, r1, r2
 565              	.LVL32:
 566 018e 82F44052 		eor	r2, r2, #12288
 567              	.LVL33:
 568 0192 43F82020 		str	r2, [r3, r0, lsl #2]
 569              	.LBE7:
 279:lib//src/usb_regs.c **** }
 570              		.loc 1 279 0
 571 0196 7047     		bx	lr
 572              	.L88:
 573              		.align	2
 574              	.L87:
 575 0198 005C0040 		.word	1073765376
 576              	.LFE19:
 578              		.align	2
 579              		.global	SetEP_KIND
 580              		.thumb
 581              		.thumb_func
 583              	SetEP_KIND:
 584              	.LFB20:
 280:lib//src/usb_regs.c **** 
 281:lib//src/usb_regs.c **** /*******************************************************************************
 282:lib//src/usb_regs.c **** * Function Name  : SetEP_KIND
 283:lib//src/usb_regs.c **** * Description    : Clear the EP_KIND bit.
 284:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 285:lib//src/usb_regs.c **** * Output         : None.
 286:lib//src/usb_regs.c **** * Return         : None.
 287:lib//src/usb_regs.c **** *******************************************************************************/
 288:lib//src/usb_regs.c **** void SetEP_KIND(u8 bEpNum)
 289:lib//src/usb_regs.c **** {
 585              		.loc 1 289 0
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589              	.LVL34:
 290:lib//src/usb_regs.c ****   _SetEP_KIND(bEpNum);
 590              		.loc 1 290 0
 591 019c 054B     		ldr	r3, .L91
 592 019e 48F68F62 		movw	r2, #36495
 593 01a2 53F82010 		ldr	r1, [r3, r0, lsl #2]
 594 01a6 01EA0202 		and	r2, r1, r2
 595 01aa 42F48072 		orr	r2, r2, #256
 596 01ae 43F82020 		str	r2, [r3, r0, lsl #2]
 291:lib//src/usb_regs.c **** }
 597              		.loc 1 291 0
 598 01b2 7047     		bx	lr
 599              	.L92:
 600              		.align	2
 601              	.L91:
 602 01b4 005C0040 		.word	1073765376
 603              	.LFE20:
 605              		.align	2
 606              		.global	ClearEP_KIND
 607              		.thumb
 608              		.thumb_func
 610              	ClearEP_KIND:
 611              	.LFB21:
 292:lib//src/usb_regs.c **** 
 293:lib//src/usb_regs.c **** /*******************************************************************************
 294:lib//src/usb_regs.c **** * Function Name  : ClearEP_KIND
 295:lib//src/usb_regs.c **** * Description    : set the  EP_KIND bit.
 296:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 297:lib//src/usb_regs.c **** * Output         : None.
 298:lib//src/usb_regs.c **** * Return         : None.
 299:lib//src/usb_regs.c **** *******************************************************************************/
 300:lib//src/usb_regs.c **** void ClearEP_KIND(u8 bEpNum)
 301:lib//src/usb_regs.c **** {
 612              		.loc 1 301 0
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              		@ link register save eliminated.
 616              	.LVL35:
 302:lib//src/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 617              		.loc 1 302 0
 618 01b8 044B     		ldr	r3, .L95
 619 01ba 48F68F62 		movw	r2, #36495
 620 01be 53F82010 		ldr	r1, [r3, r0, lsl #2]
 621 01c2 01EA0202 		and	r2, r1, r2
 622 01c6 43F82020 		str	r2, [r3, r0, lsl #2]
 303:lib//src/usb_regs.c **** }
 623              		.loc 1 303 0
 624 01ca 7047     		bx	lr
 625              	.L96:
 626              		.align	2
 627              	.L95:
 628 01cc 005C0040 		.word	1073765376
 629              	.LFE21:
 631              		.align	2
 632              		.global	Clear_Status_Out
 633              		.thumb
 634              		.thumb_func
 636              	Clear_Status_Out:
 637              	.LFB22:
 304:lib//src/usb_regs.c **** /*******************************************************************************
 305:lib//src/usb_regs.c **** * Function Name  : Clear_Status_Out
 306:lib//src/usb_regs.c **** * Description    : Clear the Status Out of the related Endpoint
 307:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 308:lib//src/usb_regs.c **** * Output         : None.
 309:lib//src/usb_regs.c **** * Return         : None.
 310:lib//src/usb_regs.c **** *******************************************************************************/
 311:lib//src/usb_regs.c **** void Clear_Status_Out(u8 bEpNum)
 312:lib//src/usb_regs.c **** {
 638              		.loc 1 312 0
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL36:
 313:lib//src/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 643              		.loc 1 313 0
 644 01d0 044B     		ldr	r3, .L99
 645 01d2 48F68F62 		movw	r2, #36495
 646 01d6 53F82010 		ldr	r1, [r3, r0, lsl #2]
 647 01da 01EA0202 		and	r2, r1, r2
 648 01de 43F82020 		str	r2, [r3, r0, lsl #2]
 314:lib//src/usb_regs.c **** }
 649              		.loc 1 314 0
 650 01e2 7047     		bx	lr
 651              	.L100:
 652              		.align	2
 653              	.L99:
 654 01e4 005C0040 		.word	1073765376
 655              	.LFE22:
 657              		.align	2
 658              		.global	Set_Status_Out
 659              		.thumb
 660              		.thumb_func
 662              	Set_Status_Out:
 663              	.LFB23:
 315:lib//src/usb_regs.c **** /*******************************************************************************
 316:lib//src/usb_regs.c **** * Function Name  : Set_Status_Out
 317:lib//src/usb_regs.c **** * Description    : Set the Status Out of the related Endpoint
 318:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 319:lib//src/usb_regs.c **** * Output         : None.
 320:lib//src/usb_regs.c **** * Return         : None.
 321:lib//src/usb_regs.c **** *******************************************************************************/
 322:lib//src/usb_regs.c **** void Set_Status_Out(u8 bEpNum)
 323:lib//src/usb_regs.c **** {
 664              		.loc 1 323 0
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              		@ link register save eliminated.
 668              	.LVL37:
 324:lib//src/usb_regs.c ****   _SetEP_KIND(bEpNum);
 669              		.loc 1 324 0
 670 01e8 054B     		ldr	r3, .L103
 671 01ea 48F68F62 		movw	r2, #36495
 672 01ee 53F82010 		ldr	r1, [r3, r0, lsl #2]
 673 01f2 01EA0202 		and	r2, r1, r2
 674 01f6 42F48072 		orr	r2, r2, #256
 675 01fa 43F82020 		str	r2, [r3, r0, lsl #2]
 325:lib//src/usb_regs.c **** }
 676              		.loc 1 325 0
 677 01fe 7047     		bx	lr
 678              	.L104:
 679              		.align	2
 680              	.L103:
 681 0200 005C0040 		.word	1073765376
 682              	.LFE23:
 684              		.align	2
 685              		.global	SetEPDoubleBuff
 686              		.thumb
 687              		.thumb_func
 689              	SetEPDoubleBuff:
 690              	.LFB24:
 326:lib//src/usb_regs.c **** /*******************************************************************************
 327:lib//src/usb_regs.c **** * Function Name  : SetEPDoubleBuff
 328:lib//src/usb_regs.c **** * Description    : Enable the double buffer feature for the endpoint. 
 329:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 330:lib//src/usb_regs.c **** * Output         : None.
 331:lib//src/usb_regs.c **** * Return         : None.
 332:lib//src/usb_regs.c **** *******************************************************************************/
 333:lib//src/usb_regs.c **** void SetEPDoubleBuff(u8 bEpNum)
 334:lib//src/usb_regs.c **** {
 691              		.loc 1 334 0
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 695              	.LVL38:
 335:lib//src/usb_regs.c ****   _SetEP_KIND(bEpNum);
 696              		.loc 1 335 0
 697 0204 054B     		ldr	r3, .L107
 698 0206 48F68F62 		movw	r2, #36495
 699 020a 53F82010 		ldr	r1, [r3, r0, lsl #2]
 700 020e 01EA0202 		and	r2, r1, r2
 701 0212 42F48072 		orr	r2, r2, #256
 702 0216 43F82020 		str	r2, [r3, r0, lsl #2]
 336:lib//src/usb_regs.c **** }
 703              		.loc 1 336 0
 704 021a 7047     		bx	lr
 705              	.L108:
 706              		.align	2
 707              	.L107:
 708 021c 005C0040 		.word	1073765376
 709              	.LFE24:
 711              		.align	2
 712              		.global	ClearEPDoubleBuff
 713              		.thumb
 714              		.thumb_func
 716              	ClearEPDoubleBuff:
 717              	.LFB25:
 337:lib//src/usb_regs.c **** /*******************************************************************************
 338:lib//src/usb_regs.c **** * Function Name  : ClearEPDoubleBuff
 339:lib//src/usb_regs.c **** * Description    : Disable the double buffer feature for the endpoint. 
 340:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 341:lib//src/usb_regs.c **** * Output         : None.
 342:lib//src/usb_regs.c **** * Return         : None.
 343:lib//src/usb_regs.c **** *******************************************************************************/
 344:lib//src/usb_regs.c **** void ClearEPDoubleBuff(u8 bEpNum)
 345:lib//src/usb_regs.c **** {
 718              		.loc 1 345 0
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722              	.LVL39:
 346:lib//src/usb_regs.c ****   _ClearEP_KIND(bEpNum);
 723              		.loc 1 346 0
 724 0220 044B     		ldr	r3, .L111
 725 0222 48F68F62 		movw	r2, #36495
 726 0226 53F82010 		ldr	r1, [r3, r0, lsl #2]
 727 022a 01EA0202 		and	r2, r1, r2
 728 022e 43F82020 		str	r2, [r3, r0, lsl #2]
 347:lib//src/usb_regs.c **** }
 729              		.loc 1 347 0
 730 0232 7047     		bx	lr
 731              	.L112:
 732              		.align	2
 733              	.L111:
 734 0234 005C0040 		.word	1073765376
 735              	.LFE25:
 737              		.align	2
 738              		.global	GetTxStallStatus
 739              		.thumb
 740              		.thumb_func
 742              	GetTxStallStatus:
 743              	.LFB26:
 348:lib//src/usb_regs.c **** /*******************************************************************************
 349:lib//src/usb_regs.c **** * Function Name  : GetTxStallStatus
 350:lib//src/usb_regs.c **** * Description    : Returns the Stall status of the Tx endpoint.
 351:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 352:lib//src/usb_regs.c **** * Output         : None.
 353:lib//src/usb_regs.c **** * Return         : Tx Stall status.
 354:lib//src/usb_regs.c **** *******************************************************************************/
 355:lib//src/usb_regs.c **** u16 GetTxStallStatus(u8 bEpNum)
 356:lib//src/usb_regs.c **** {
 744              		.loc 1 356 0
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748              	.LVL40:
 357:lib//src/usb_regs.c ****   return(_GetTxStallStatus(bEpNum));
 749              		.loc 1 357 0
 750 0238 044B     		ldr	r3, .L115
 751 023a 53F82000 		ldr	r0, [r3, r0, lsl #2]
 752              	.LVL41:
 753 023e 00F03000 		and	r0, r0, #48
 358:lib//src/usb_regs.c **** }
 754              		.loc 1 358 0
 755 0242 1028     		cmp	r0, #16
 756 0244 14BF     		ite	ne
 757 0246 0020     		movne	r0, #0
 758 0248 0120     		moveq	r0, #1
 759 024a 7047     		bx	lr
 760              	.L116:
 761              		.align	2
 762              	.L115:
 763 024c 005C0040 		.word	1073765376
 764              	.LFE26:
 766              		.align	2
 767              		.global	GetRxStallStatus
 768              		.thumb
 769              		.thumb_func
 771              	GetRxStallStatus:
 772              	.LFB27:
 359:lib//src/usb_regs.c **** /*******************************************************************************
 360:lib//src/usb_regs.c **** * Function Name  : GetRxStallStatus
 361:lib//src/usb_regs.c **** * Description    : Returns the Stall status of the Rx endpoint. 
 362:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 363:lib//src/usb_regs.c **** * Output         : None.
 364:lib//src/usb_regs.c **** * Return         : Rx Stall status.
 365:lib//src/usb_regs.c **** *******************************************************************************/
 366:lib//src/usb_regs.c **** u16 GetRxStallStatus(u8 bEpNum)
 367:lib//src/usb_regs.c **** {
 773              		.loc 1 367 0
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 777              	.LVL42:
 368:lib//src/usb_regs.c ****   return(_GetRxStallStatus(bEpNum));
 778              		.loc 1 368 0
 779 0250 054B     		ldr	r3, .L119
 780 0252 53F82000 		ldr	r0, [r3, r0, lsl #2]
 781              	.LVL43:
 782 0256 00F44050 		and	r0, r0, #12288
 369:lib//src/usb_regs.c **** }
 783              		.loc 1 369 0
 784 025a B0F5805F 		cmp	r0, #4096
 785 025e 14BF     		ite	ne
 786 0260 0020     		movne	r0, #0
 787 0262 0120     		moveq	r0, #1
 788 0264 7047     		bx	lr
 789              	.L120:
 790 0266 00BF     		.align	2
 791              	.L119:
 792 0268 005C0040 		.word	1073765376
 793              	.LFE27:
 795              		.align	2
 796              		.global	ClearEP_CTR_RX
 797              		.thumb
 798              		.thumb_func
 800              	ClearEP_CTR_RX:
 801              	.LFB28:
 370:lib//src/usb_regs.c **** /*******************************************************************************
 371:lib//src/usb_regs.c **** * Function Name  : ClearEP_CTR_RX
 372:lib//src/usb_regs.c **** * Description    : Clear the CTR_RX bit.
 373:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 374:lib//src/usb_regs.c **** * Output         : None.
 375:lib//src/usb_regs.c **** * Return         : None.
 376:lib//src/usb_regs.c **** *******************************************************************************/
 377:lib//src/usb_regs.c **** void ClearEP_CTR_RX(u8 bEpNum)
 378:lib//src/usb_regs.c **** {
 802              		.loc 1 378 0
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805              		@ link register save eliminated.
 806              	.LVL44:
 379:lib//src/usb_regs.c ****   _ClearEP_CTR_RX(bEpNum);
 807              		.loc 1 379 0
 808 026c 044B     		ldr	r3, .L123
 809 026e 40F68F72 		movw	r2, #3983
 810 0272 53F82010 		ldr	r1, [r3, r0, lsl #2]
 811 0276 01EA0202 		and	r2, r1, r2
 812 027a 43F82020 		str	r2, [r3, r0, lsl #2]
 380:lib//src/usb_regs.c **** }
 813              		.loc 1 380 0
 814 027e 7047     		bx	lr
 815              	.L124:
 816              		.align	2
 817              	.L123:
 818 0280 005C0040 		.word	1073765376
 819              	.LFE28:
 821              		.align	2
 822              		.global	ClearEP_CTR_TX
 823              		.thumb
 824              		.thumb_func
 826              	ClearEP_CTR_TX:
 827              	.LFB29:
 381:lib//src/usb_regs.c **** /*******************************************************************************
 382:lib//src/usb_regs.c **** * Function Name  : ClearEP_CTR_TX
 383:lib//src/usb_regs.c **** * Description    : Clear the CTR_TX bit.
 384:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 385:lib//src/usb_regs.c **** * Output         : None.
 386:lib//src/usb_regs.c **** * Return         : None.
 387:lib//src/usb_regs.c **** *******************************************************************************/
 388:lib//src/usb_regs.c **** void ClearEP_CTR_TX(u8 bEpNum)
 389:lib//src/usb_regs.c **** {
 828              		.loc 1 389 0
 829              		@ args = 0, pretend = 0, frame = 0
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831              		@ link register save eliminated.
 832              	.LVL45:
 390:lib//src/usb_regs.c ****   _ClearEP_CTR_TX(bEpNum);
 833              		.loc 1 390 0
 834 0284 044B     		ldr	r3, .L127
 835 0286 48F60F72 		movw	r2, #36623
 836 028a 53F82010 		ldr	r1, [r3, r0, lsl #2]
 837 028e 01EA0202 		and	r2, r1, r2
 838 0292 43F82020 		str	r2, [r3, r0, lsl #2]
 391:lib//src/usb_regs.c **** }
 839              		.loc 1 391 0
 840 0296 7047     		bx	lr
 841              	.L128:
 842              		.align	2
 843              	.L127:
 844 0298 005C0040 		.word	1073765376
 845              	.LFE29:
 847              		.align	2
 848              		.global	ToggleDTOG_RX
 849              		.thumb
 850              		.thumb_func
 852              	ToggleDTOG_RX:
 853              	.LFB30:
 392:lib//src/usb_regs.c **** /*******************************************************************************
 393:lib//src/usb_regs.c **** * Function Name  : ToggleDTOG_RX
 394:lib//src/usb_regs.c **** * Description    : Toggle the DTOG_RX bit.
 395:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 396:lib//src/usb_regs.c **** * Output         : None.
 397:lib//src/usb_regs.c **** * Return         : None.
 398:lib//src/usb_regs.c **** *******************************************************************************/
 399:lib//src/usb_regs.c **** void ToggleDTOG_RX(u8 bEpNum)
 400:lib//src/usb_regs.c **** {
 854              		.loc 1 400 0
 855              		@ args = 0, pretend = 0, frame = 0
 856              		@ frame_needed = 0, uses_anonymous_args = 0
 857              		@ link register save eliminated.
 858              	.LVL46:
 401:lib//src/usb_regs.c ****   _ToggleDTOG_RX(bEpNum);
 859              		.loc 1 401 0
 860 029c 054B     		ldr	r3, .L131
 861 029e 48F68F72 		movw	r2, #36751
 862 02a2 53F82010 		ldr	r1, [r3, r0, lsl #2]
 863 02a6 01EA0202 		and	r2, r1, r2
 864 02aa 42F48042 		orr	r2, r2, #16384
 865 02ae 43F82020 		str	r2, [r3, r0, lsl #2]
 402:lib//src/usb_regs.c **** }
 866              		.loc 1 402 0
 867 02b2 7047     		bx	lr
 868              	.L132:
 869              		.align	2
 870              	.L131:
 871 02b4 005C0040 		.word	1073765376
 872              	.LFE30:
 874              		.align	2
 875              		.global	ToggleDTOG_TX
 876              		.thumb
 877              		.thumb_func
 879              	ToggleDTOG_TX:
 880              	.LFB31:
 403:lib//src/usb_regs.c **** /*******************************************************************************
 404:lib//src/usb_regs.c **** * Function Name  : ToggleDTOG_TX
 405:lib//src/usb_regs.c **** * Description    : Toggle the DTOG_TX bit.
 406:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 407:lib//src/usb_regs.c **** * Output         : None.
 408:lib//src/usb_regs.c **** * Return         : None.
 409:lib//src/usb_regs.c **** *******************************************************************************/
 410:lib//src/usb_regs.c **** void ToggleDTOG_TX(u8 bEpNum)
 411:lib//src/usb_regs.c **** {
 881              		.loc 1 411 0
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 885              	.LVL47:
 412:lib//src/usb_regs.c ****   _ToggleDTOG_TX(bEpNum);
 886              		.loc 1 412 0
 887 02b8 054B     		ldr	r3, .L135
 888 02ba 48F68F72 		movw	r2, #36751
 889 02be 53F82010 		ldr	r1, [r3, r0, lsl #2]
 890 02c2 01EA0202 		and	r2, r1, r2
 891 02c6 42F04002 		orr	r2, r2, #64
 892 02ca 43F82020 		str	r2, [r3, r0, lsl #2]
 413:lib//src/usb_regs.c **** }
 893              		.loc 1 413 0
 894 02ce 7047     		bx	lr
 895              	.L136:
 896              		.align	2
 897              	.L135:
 898 02d0 005C0040 		.word	1073765376
 899              	.LFE31:
 901              		.align	2
 902              		.global	ClearDTOG_RX
 903              		.thumb
 904              		.thumb_func
 906              	ClearDTOG_RX:
 907              	.LFB32:
 414:lib//src/usb_regs.c **** /*******************************************************************************
 415:lib//src/usb_regs.c **** * Function Name  : ClearDTOG_RX.
 416:lib//src/usb_regs.c **** * Description    : Clear the DTOG_RX bit.
 417:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 418:lib//src/usb_regs.c **** * Output         : None.
 419:lib//src/usb_regs.c **** * Return         : None.
 420:lib//src/usb_regs.c **** *******************************************************************************/
 421:lib//src/usb_regs.c **** void ClearDTOG_RX(u8 bEpNum)
 422:lib//src/usb_regs.c **** {
 908              		.loc 1 422 0
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 911              		@ link register save eliminated.
 912              	.LVL48:
 423:lib//src/usb_regs.c ****   _ClearDTOG_RX(bEpNum);
 913              		.loc 1 423 0
 914 02d4 084B     		ldr	r3, .L140
 915 02d6 53F82020 		ldr	r2, [r3, r0, lsl #2]
 916 02da 12F4804F 		tst	r2, #16384
 917 02de 09D0     		beq	.L139
 918 02e0 53F82010 		ldr	r1, [r3, r0, lsl #2]
 919 02e4 48F68F72 		movw	r2, #36751
 920 02e8 01EA0202 		and	r2, r1, r2
 921 02ec 42F48042 		orr	r2, r2, #16384
 922 02f0 43F82020 		str	r2, [r3, r0, lsl #2]
 923              	.L139:
 424:lib//src/usb_regs.c **** }
 924              		.loc 1 424 0
 925 02f4 7047     		bx	lr
 926              	.L141:
 927 02f6 00BF     		.align	2
 928              	.L140:
 929 02f8 005C0040 		.word	1073765376
 930              	.LFE32:
 932              		.align	2
 933              		.global	ClearDTOG_TX
 934              		.thumb
 935              		.thumb_func
 937              	ClearDTOG_TX:
 938              	.LFB33:
 425:lib//src/usb_regs.c **** /*******************************************************************************
 426:lib//src/usb_regs.c **** * Function Name  : ClearDTOG_TX.
 427:lib//src/usb_regs.c **** * Description    : Clear the DTOG_TX bit.
 428:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 429:lib//src/usb_regs.c **** * Output         : None.
 430:lib//src/usb_regs.c **** * Return         : None.
 431:lib//src/usb_regs.c **** *******************************************************************************/
 432:lib//src/usb_regs.c **** void ClearDTOG_TX(u8 bEpNum)
 433:lib//src/usb_regs.c **** {
 939              		.loc 1 433 0
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 943              	.LVL49:
 434:lib//src/usb_regs.c ****   _ClearDTOG_TX(bEpNum);
 944              		.loc 1 434 0
 945 02fc 084B     		ldr	r3, .L145
 946 02fe 53F82020 		ldr	r2, [r3, r0, lsl #2]
 947 0302 12F0400F 		tst	r2, #64
 948 0306 09D0     		beq	.L144
 949 0308 53F82010 		ldr	r1, [r3, r0, lsl #2]
 950 030c 48F68F72 		movw	r2, #36751
 951 0310 01EA0202 		and	r2, r1, r2
 952 0314 42F04002 		orr	r2, r2, #64
 953 0318 43F82020 		str	r2, [r3, r0, lsl #2]
 954              	.L144:
 435:lib//src/usb_regs.c **** }
 955              		.loc 1 435 0
 956 031c 7047     		bx	lr
 957              	.L146:
 958 031e 00BF     		.align	2
 959              	.L145:
 960 0320 005C0040 		.word	1073765376
 961              	.LFE33:
 963              		.align	2
 964              		.global	SetEPAddress
 965              		.thumb
 966              		.thumb_func
 968              	SetEPAddress:
 969              	.LFB34:
 436:lib//src/usb_regs.c **** /*******************************************************************************
 437:lib//src/usb_regs.c **** * Function Name  : SetEPAddress
 438:lib//src/usb_regs.c **** * Description    : Set the endpoint address.
 439:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 440:lib//src/usb_regs.c **** *                  bAddr: New endpoint address.
 441:lib//src/usb_regs.c **** * Output         : None.
 442:lib//src/usb_regs.c **** * Return         : None.
 443:lib//src/usb_regs.c **** *******************************************************************************/
 444:lib//src/usb_regs.c **** void SetEPAddress(u8 bEpNum, u8 bAddr)
 445:lib//src/usb_regs.c **** {
 970              		.loc 1 445 0
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973              	.LVL50:
 446:lib//src/usb_regs.c ****   _SetEPAddress(bEpNum, bAddr);
 974              		.loc 1 446 0
 975 0324 054B     		ldr	r3, .L149
 976              		.loc 1 445 0
 977 0326 10B5     		push	{r4, lr}
 978              	.LCFI4:
 979              		.loc 1 446 0
 980 0328 53F82040 		ldr	r4, [r3, r0, lsl #2]
 981 032c 48F68F72 		movw	r2, #36751
 982 0330 04EA0202 		and	r2, r4, r2
 983 0334 0A43     		orrs	r2, r2, r1
 984 0336 43F82020 		str	r2, [r3, r0, lsl #2]
 447:lib//src/usb_regs.c **** }
 985              		.loc 1 447 0
 986 033a 10BD     		pop	{r4, pc}
 987              	.L150:
 988              		.align	2
 989              	.L149:
 990 033c 005C0040 		.word	1073765376
 991              	.LFE34:
 993              		.align	2
 994              		.global	GetEPAddress
 995              		.thumb
 996              		.thumb_func
 998              	GetEPAddress:
 999              	.LFB35:
 448:lib//src/usb_regs.c **** /*******************************************************************************
 449:lib//src/usb_regs.c **** * Function Name  : GetEPAddress
 450:lib//src/usb_regs.c **** * Description    : Get the endpoint address.
 451:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 452:lib//src/usb_regs.c **** * Output         : None.
 453:lib//src/usb_regs.c **** * Return         : Endpoint address.
 454:lib//src/usb_regs.c **** *******************************************************************************/
 455:lib//src/usb_regs.c **** u8 GetEPAddress(u8 bEpNum)
 456:lib//src/usb_regs.c **** {
 1000              		.loc 1 456 0
 1001              		@ args = 0, pretend = 0, frame = 0
 1002              		@ frame_needed = 0, uses_anonymous_args = 0
 1003              		@ link register save eliminated.
 1004              	.LVL51:
 457:lib//src/usb_regs.c ****   return(_GetEPAddress(bEpNum));
 1005              		.loc 1 457 0
 1006 0340 024B     		ldr	r3, .L153
 1007 0342 53F82000 		ldr	r0, [r3, r0, lsl #2]
 1008              	.LVL52:
 458:lib//src/usb_regs.c **** }
 1009              		.loc 1 458 0
 1010 0346 00F00F00 		and	r0, r0, #15
 1011 034a 7047     		bx	lr
 1012              	.L154:
 1013              		.align	2
 1014              	.L153:
 1015 034c 005C0040 		.word	1073765376
 1016              	.LFE35:
 1018              		.align	2
 1019              		.global	SetEPTxAddr
 1020              		.thumb
 1021              		.thumb_func
 1023              	SetEPTxAddr:
 1024              	.LFB36:
 459:lib//src/usb_regs.c **** /*******************************************************************************
 460:lib//src/usb_regs.c **** * Function Name  : SetEPTxAddr
 461:lib//src/usb_regs.c **** * Description    : Set the endpoint Tx buffer address.
 462:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 463:lib//src/usb_regs.c **** *                  wAddr: new address. 
 464:lib//src/usb_regs.c **** * Output         : None.
 465:lib//src/usb_regs.c **** * Return         : None.
 466:lib//src/usb_regs.c **** *******************************************************************************/
 467:lib//src/usb_regs.c **** void SetEPTxAddr(u8 bEpNum, u16 wAddr)
 468:lib//src/usb_regs.c **** {
 1025              		.loc 1 468 0
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028              		@ link register save eliminated.
 1029              	.LVL53:
 469:lib//src/usb_regs.c ****   _SetEPTxAddr(bEpNum, wAddr);
 1030              		.loc 1 469 0
 1031 0350 064B     		ldr	r3, .L157
 1032 0352 4908     		lsrs	r1, r1, #1
 1033              	.LVL54:
 1034 0354 1B68     		ldr	r3, [r3, #0]
 1035 0356 4900     		lsls	r1, r1, #1
 1036 0358 9BB2     		uxth	r3, r3
 1037 035a 03EBC003 		add	r3, r3, r0, lsl #3
 1038 035e 03F10053 		add	r3, r3, #536870912
 1039 0362 03F54053 		add	r3, r3, #12288
 1040 0366 5B00     		lsls	r3, r3, #1
 1041 0368 1960     		str	r1, [r3, #0]
 470:lib//src/usb_regs.c **** }
 1042              		.loc 1 470 0
 1043 036a 7047     		bx	lr
 1044              	.L158:
 1045              		.align	2
 1046              	.L157:
 1047 036c 505C0040 		.word	1073765456
 1048              	.LFE36:
 1050              		.align	2
 1051              		.global	SetEPRxAddr
 1052              		.thumb
 1053              		.thumb_func
 1055              	SetEPRxAddr:
 1056              	.LFB37:
 471:lib//src/usb_regs.c **** /*******************************************************************************
 472:lib//src/usb_regs.c **** * Function Name  : SetEPRxAddr
 473:lib//src/usb_regs.c **** * Description    : Set the endpoint Rx buffer address.
 474:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 475:lib//src/usb_regs.c **** *                  wAddr: new address.
 476:lib//src/usb_regs.c **** * Output         : None.
 477:lib//src/usb_regs.c **** * Return         : None.
 478:lib//src/usb_regs.c **** *******************************************************************************/
 479:lib//src/usb_regs.c **** void SetEPRxAddr(u8 bEpNum, u16 wAddr)
 480:lib//src/usb_regs.c **** {
 1057              		.loc 1 480 0
 1058              		@ args = 0, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 1061              	.LVL55:
 481:lib//src/usb_regs.c ****   _SetEPRxAddr(bEpNum, wAddr);
 1062              		.loc 1 481 0
 1063 0370 054A     		ldr	r2, .L161
 1064 0372 064B     		ldr	r3, .L161+4
 1065 0374 1268     		ldr	r2, [r2, #0]
 1066 0376 4908     		lsrs	r1, r1, #1
 1067              	.LVL56:
 1068 0378 92B2     		uxth	r2, r2
 1069 037a 02EBC002 		add	r2, r2, r0, lsl #3
 1070 037e D318     		adds	r3, r2, r3
 1071 0380 5B00     		lsls	r3, r3, #1
 1072 0382 4900     		lsls	r1, r1, #1
 1073 0384 1960     		str	r1, [r3, #0]
 482:lib//src/usb_regs.c **** }
 1074              		.loc 1 482 0
 1075 0386 7047     		bx	lr
 1076              	.L162:
 1077              		.align	2
 1078              	.L161:
 1079 0388 505C0040 		.word	1073765456
 1080 038c 04300020 		.word	536883204
 1081              	.LFE37:
 1083              		.align	2
 1084              		.global	GetEPTxAddr
 1085              		.thumb
 1086              		.thumb_func
 1088              	GetEPTxAddr:
 1089              	.LFB38:
 483:lib//src/usb_regs.c **** /*******************************************************************************
 484:lib//src/usb_regs.c **** * Function Name  : GetEPTxAddr
 485:lib//src/usb_regs.c **** * Description    : Returns the endpoint Tx buffer address.
 486:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 487:lib//src/usb_regs.c **** * Output         : None.
 488:lib//src/usb_regs.c **** * Return         : Rx buffer address. 
 489:lib//src/usb_regs.c **** *******************************************************************************/
 490:lib//src/usb_regs.c **** u16 GetEPTxAddr(u8 bEpNum)
 491:lib//src/usb_regs.c **** {
 1090              		.loc 1 491 0
 1091              		@ args = 0, pretend = 0, frame = 0
 1092              		@ frame_needed = 0, uses_anonymous_args = 0
 1093              		@ link register save eliminated.
 1094              	.LVL57:
 492:lib//src/usb_regs.c ****   return(_GetEPTxAddr(bEpNum));
 1095              		.loc 1 492 0
 1096 0390 054B     		ldr	r3, .L165
 1097 0392 1B68     		ldr	r3, [r3, #0]
 1098 0394 9BB2     		uxth	r3, r3
 1099 0396 03EBC003 		add	r3, r3, r0, lsl #3
 1100 039a 03F10053 		add	r3, r3, #536870912
 1101 039e 03F54053 		add	r3, r3, #12288
 1102 03a2 5B00     		lsls	r3, r3, #1
 493:lib//src/usb_regs.c **** }
 1103              		.loc 1 493 0
 1104 03a4 1888     		ldrh	r0, [r3, #0]
 1105              	.LVL58:
 1106 03a6 7047     		bx	lr
 1107              	.L166:
 1108              		.align	2
 1109              	.L165:
 1110 03a8 505C0040 		.word	1073765456
 1111              	.LFE38:
 1113              		.align	2
 1114              		.global	GetEPRxAddr
 1115              		.thumb
 1116              		.thumb_func
 1118              	GetEPRxAddr:
 1119              	.LFB39:
 494:lib//src/usb_regs.c **** /*******************************************************************************
 495:lib//src/usb_regs.c **** * Function Name  : GetEPRxAddr.
 496:lib//src/usb_regs.c **** * Description    : Returns the endpoint Rx buffer address.
 497:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 498:lib//src/usb_regs.c **** * Output         : None.
 499:lib//src/usb_regs.c **** * Return         : Rx buffer address.
 500:lib//src/usb_regs.c **** *******************************************************************************/
 501:lib//src/usb_regs.c **** u16 GetEPRxAddr(u8 bEpNum)
 502:lib//src/usb_regs.c **** {
 1120              		.loc 1 502 0
 1121              		@ args = 0, pretend = 0, frame = 0
 1122              		@ frame_needed = 0, uses_anonymous_args = 0
 1123              		@ link register save eliminated.
 1124              	.LVL59:
 503:lib//src/usb_regs.c ****   return(_GetEPRxAddr(bEpNum));
 1125              		.loc 1 503 0
 1126 03ac 044A     		ldr	r2, .L169
 1127 03ae 054B     		ldr	r3, .L169+4
 1128 03b0 1268     		ldr	r2, [r2, #0]
 1129 03b2 92B2     		uxth	r2, r2
 1130 03b4 02EBC002 		add	r2, r2, r0, lsl #3
 1131 03b8 D318     		adds	r3, r2, r3
 1132 03ba 5B00     		lsls	r3, r3, #1
 504:lib//src/usb_regs.c **** }
 1133              		.loc 1 504 0
 1134 03bc 1888     		ldrh	r0, [r3, #0]
 1135              	.LVL60:
 1136 03be 7047     		bx	lr
 1137              	.L170:
 1138              		.align	2
 1139              	.L169:
 1140 03c0 505C0040 		.word	1073765456
 1141 03c4 04300020 		.word	536883204
 1142              	.LFE39:
 1144              		.align	2
 1145              		.global	SetEPTxCount
 1146              		.thumb
 1147              		.thumb_func
 1149              	SetEPTxCount:
 1150              	.LFB40:
 505:lib//src/usb_regs.c **** /*******************************************************************************
 506:lib//src/usb_regs.c **** * Function Name  : SetEPTxCount.
 507:lib//src/usb_regs.c **** * Description    : Set the Tx count.
 508:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 509:lib//src/usb_regs.c **** *                  wCount: new count value.
 510:lib//src/usb_regs.c **** * Output         : None.
 511:lib//src/usb_regs.c **** * Return         : None.
 512:lib//src/usb_regs.c **** *******************************************************************************/
 513:lib//src/usb_regs.c **** void SetEPTxCount(u8 bEpNum, u16 wCount)
 514:lib//src/usb_regs.c **** {
 1151              		.loc 1 514 0
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154              		@ link register save eliminated.
 1155              	.LVL61:
 515:lib//src/usb_regs.c ****   _SetEPTxCount(bEpNum, wCount);
 1156              		.loc 1 515 0
 1157 03c8 044A     		ldr	r2, .L173
 1158 03ca 054B     		ldr	r3, .L173+4
 1159 03cc 1268     		ldr	r2, [r2, #0]
 1160 03ce 92B2     		uxth	r2, r2
 1161 03d0 02EBC002 		add	r2, r2, r0, lsl #3
 1162 03d4 D318     		adds	r3, r2, r3
 1163 03d6 5B00     		lsls	r3, r3, #1
 1164 03d8 1960     		str	r1, [r3, #0]
 516:lib//src/usb_regs.c **** }
 1165              		.loc 1 516 0
 1166 03da 7047     		bx	lr
 1167              	.L174:
 1168              		.align	2
 1169              	.L173:
 1170 03dc 505C0040 		.word	1073765456
 1171 03e0 02300020 		.word	536883202
 1172              	.LFE40:
 1174              		.align	2
 1175              		.global	SetEPCountRxReg
 1176              		.thumb
 1177              		.thumb_func
 1179              	SetEPCountRxReg:
 1180              	.LFB41:
 517:lib//src/usb_regs.c **** /*******************************************************************************
 518:lib//src/usb_regs.c **** * Function Name  : SetEPCountRxReg.
 519:lib//src/usb_regs.c **** * Description    : Set the Count Rx Register value.
 520:lib//src/usb_regs.c **** * Input          : *pdwReg: point to the register.
 521:lib//src/usb_regs.c **** *                  wCount: the new register value.
 522:lib//src/usb_regs.c **** * Output         : None.
 523:lib//src/usb_regs.c **** * Return         : None.
 524:lib//src/usb_regs.c **** *******************************************************************************/
 525:lib//src/usb_regs.c **** void SetEPCountRxReg(u32 *pdwReg, u16 wCount)
 526:lib//src/usb_regs.c **** {
 1181              		.loc 1 526 0
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185              	.LVL62:
 1186              	.LBB8:
 527:lib//src/usb_regs.c ****   _SetEPCountRxReg(dwReg, wCount);
 1187              		.loc 1 527 0
 1188 03e4 3E29     		cmp	r1, #62
 1189 03e6 09D9     		bls	.L176
 1190 03e8 4B09     		lsrs	r3, r1, #5
 1191              	.LVL63:
 1192 03ea 11F01F0F 		tst	r1, #31
 1193 03ee 01D1     		bne	.L177
 1194 03f0 013B     		subs	r3, r3, #1
 1195              	.LVL64:
 1196 03f2 9BB2     		uxth	r3, r3
 1197              	.LVL65:
 1198              	.L177:
 1199 03f4 9B02     		lsls	r3, r3, #10
 1200              	.LVL66:
 1201 03f6 43F40043 		orr	r3, r3, #32768
 1202 03fa 05E0     		b	.L181
 1203              	.L176:
 1204 03fc 4B08     		lsrs	r3, r1, #1
 1205              	.LVL67:
 1206 03fe 11F0010F 		tst	r1, #1
 1207 0402 18BF     		it	ne
 1208 0404 0133     		addne	r3, r3, #1
 1209              	.LVL68:
 1210 0406 9B02     		lsls	r3, r3, #10
 1211              	.LVL69:
 1212              	.L181:
 1213 0408 0360     		str	r3, [r0, #0]
 1214              	.LBE8:
 528:lib//src/usb_regs.c **** }
 1215              		.loc 1 528 0
 1216 040a 7047     		bx	lr
 1217              	.LFE41:
 1219              		.align	2
 1220              		.global	SetEPRxCount
 1221              		.thumb
 1222              		.thumb_func
 1224              	SetEPRxCount:
 1225              	.LFB42:
 529:lib//src/usb_regs.c **** /*******************************************************************************
 530:lib//src/usb_regs.c **** * Function Name  : SetEPRxCount
 531:lib//src/usb_regs.c **** * Description    : Set the Rx count.
 532:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 533:lib//src/usb_regs.c **** *                  wCount: the new count value.
 534:lib//src/usb_regs.c **** * Output         : None.
 535:lib//src/usb_regs.c **** * Return         : None.
 536:lib//src/usb_regs.c **** *******************************************************************************/
 537:lib//src/usb_regs.c **** void SetEPRxCount(u8 bEpNum, u16 wCount)
 538:lib//src/usb_regs.c **** {
 1226              		.loc 1 538 0
 1227              		@ args = 0, pretend = 0, frame = 0
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 1229              		@ link register save eliminated.
 1230              	.LVL70:
 1231              	.LBB9:
 539:lib//src/usb_regs.c ****   _SetEPRxCount(bEpNum, wCount);
 1232              		.loc 1 539 0
 1233 040c 0D4A     		ldr	r2, .L189
 1234 040e 0E4B     		ldr	r3, .L189+4
 1235 0410 1268     		ldr	r2, [r2, #0]
 1236 0412 92B2     		uxth	r2, r2
 1237 0414 D318     		adds	r3, r2, r3
 1238 0416 03EBC003 		add	r3, r3, r0, lsl #3
 1239 041a 5B00     		lsls	r3, r3, #1
 1240              	.LVL71:
 1241              	.LBB10:
 1242 041c 3E29     		cmp	r1, #62
 1243 041e 09D9     		bls	.L183
 1244 0420 4A09     		lsrs	r2, r1, #5
 1245              	.LVL72:
 1246 0422 11F01F0F 		tst	r1, #31
 1247 0426 01D1     		bne	.L184
 1248 0428 013A     		subs	r2, r2, #1
 1249              	.LVL73:
 1250 042a 92B2     		uxth	r2, r2
 1251              	.LVL74:
 1252              	.L184:
 1253 042c 9202     		lsls	r2, r2, #10
 1254              	.LVL75:
 1255 042e 42F40042 		orr	r2, r2, #32768
 1256 0432 05E0     		b	.L188
 1257              	.L183:
 1258 0434 4A08     		lsrs	r2, r1, #1
 1259              	.LVL76:
 1260 0436 11F0010F 		tst	r1, #1
 1261 043a 18BF     		it	ne
 1262 043c 0132     		addne	r2, r2, #1
 1263              	.LVL77:
 1264 043e 9202     		lsls	r2, r2, #10
 1265              	.LVL78:
 1266              	.L188:
 1267 0440 1A60     		str	r2, [r3, #0]
 1268              	.LBE10:
 1269              	.LBE9:
 540:lib//src/usb_regs.c **** }
 1270              		.loc 1 540 0
 1271 0442 7047     		bx	lr
 1272              	.L190:
 1273              		.align	2
 1274              	.L189:
 1275 0444 505C0040 		.word	1073765456
 1276 0448 06300020 		.word	536883206
 1277              	.LFE42:
 1279              		.align	2
 1280              		.global	GetEPTxCount
 1281              		.thumb
 1282              		.thumb_func
 1284              	GetEPTxCount:
 1285              	.LFB43:
 541:lib//src/usb_regs.c **** /*******************************************************************************
 542:lib//src/usb_regs.c **** * Function Name  : GetEPTxCount
 543:lib//src/usb_regs.c **** * Description    : Get the Tx count.
 544:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 545:lib//src/usb_regs.c **** * Output         : None
 546:lib//src/usb_regs.c **** * Return         : Tx count value.
 547:lib//src/usb_regs.c **** *******************************************************************************/
 548:lib//src/usb_regs.c **** u16 GetEPTxCount(u8 bEpNum)
 549:lib//src/usb_regs.c **** {
 1286              		.loc 1 549 0
 1287              		@ args = 0, pretend = 0, frame = 0
 1288              		@ frame_needed = 0, uses_anonymous_args = 0
 1289              		@ link register save eliminated.
 1290              	.LVL79:
 550:lib//src/usb_regs.c ****   return(_GetEPTxCount(bEpNum));
 1291              		.loc 1 550 0
 1292 044c 054A     		ldr	r2, .L193
 1293 044e 064B     		ldr	r3, .L193+4
 1294 0450 1268     		ldr	r2, [r2, #0]
 1295 0452 92B2     		uxth	r2, r2
 1296 0454 02EBC002 		add	r2, r2, r0, lsl #3
 1297 0458 D318     		adds	r3, r2, r3
 1298 045a 5B00     		lsls	r3, r3, #1
 1299 045c 1868     		ldr	r0, [r3, #0]
 1300              	.LVL80:
 551:lib//src/usb_regs.c **** }
 1301              		.loc 1 551 0
 1302 045e 8005     		lsls	r0, r0, #22
 1303 0460 800D     		lsrs	r0, r0, #22
 1304 0462 7047     		bx	lr
 1305              	.L194:
 1306              		.align	2
 1307              	.L193:
 1308 0464 505C0040 		.word	1073765456
 1309 0468 02300020 		.word	536883202
 1310              	.LFE43:
 1312              		.align	2
 1313              		.global	GetEPRxCount
 1314              		.thumb
 1315              		.thumb_func
 1317              	GetEPRxCount:
 1318              	.LFB44:
 552:lib//src/usb_regs.c **** /*******************************************************************************
 553:lib//src/usb_regs.c **** * Function Name  : GetEPRxCount
 554:lib//src/usb_regs.c **** * Description    : Get the Rx count.
 555:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 556:lib//src/usb_regs.c **** * Output         : None.
 557:lib//src/usb_regs.c **** * Return         : Rx count value.
 558:lib//src/usb_regs.c **** *******************************************************************************/
 559:lib//src/usb_regs.c **** u16 GetEPRxCount(u8 bEpNum)
 560:lib//src/usb_regs.c **** {
 1319              		.loc 1 560 0
 1320              		@ args = 0, pretend = 0, frame = 0
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 1322              		@ link register save eliminated.
 1323              	.LVL81:
 561:lib//src/usb_regs.c ****   return(_GetEPRxCount(bEpNum));
 1324              		.loc 1 561 0
 1325 046c 054A     		ldr	r2, .L197
 1326 046e 064B     		ldr	r3, .L197+4
 1327 0470 1268     		ldr	r2, [r2, #0]
 1328 0472 92B2     		uxth	r2, r2
 1329 0474 02EBC002 		add	r2, r2, r0, lsl #3
 1330 0478 D318     		adds	r3, r2, r3
 1331 047a 5B00     		lsls	r3, r3, #1
 1332 047c 1868     		ldr	r0, [r3, #0]
 1333              	.LVL82:
 562:lib//src/usb_regs.c **** }
 1334              		.loc 1 562 0
 1335 047e 8005     		lsls	r0, r0, #22
 1336 0480 800D     		lsrs	r0, r0, #22
 1337 0482 7047     		bx	lr
 1338              	.L198:
 1339              		.align	2
 1340              	.L197:
 1341 0484 505C0040 		.word	1073765456
 1342 0488 06300020 		.word	536883206
 1343              	.LFE44:
 1345              		.align	2
 1346              		.global	SetEPDblBuffAddr
 1347              		.thumb
 1348              		.thumb_func
 1350              	SetEPDblBuffAddr:
 1351              	.LFB45:
 563:lib//src/usb_regs.c **** /*******************************************************************************
 564:lib//src/usb_regs.c **** * Function Name  : SetEPDblBuffAddr
 565:lib//src/usb_regs.c **** * Description    : Set the addresses of the buffer 0 and 1.
 566:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.  
 567:lib//src/usb_regs.c **** *                  wBuf0Addr: new address of buffer 0. 
 568:lib//src/usb_regs.c **** *                  wBuf1Addr: new address of buffer 1.
 569:lib//src/usb_regs.c **** * Output         : None.
 570:lib//src/usb_regs.c **** * Return         : None.
 571:lib//src/usb_regs.c **** *******************************************************************************/
 572:lib//src/usb_regs.c **** void SetEPDblBuffAddr(u8 bEpNum, u16 wBuf0Addr, u16 wBuf1Addr)
 573:lib//src/usb_regs.c **** {
 1352              		.loc 1 573 0
 1353              		@ args = 0, pretend = 0, frame = 0
 1354              		@ frame_needed = 0, uses_anonymous_args = 0
 1355              	.LVL83:
 574:lib//src/usb_regs.c ****   _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 1356              		.loc 1 574 0
 1357 048c 0C4B     		ldr	r3, .L201
 1358              		.loc 1 573 0
 1359 048e 30B5     		push	{r4, r5, lr}
 1360              	.LCFI5:
 1361              		.loc 1 574 0
 1362 0490 1D68     		ldr	r5, [r3, #0]
 1363 0492 1C68     		ldr	r4, [r3, #0]
 1364 0494 C000     		lsls	r0, r0, #3
 1365              	.LVL84:
 1366 0496 1FFA85FC 		uxth	ip, r5
 1367 049a 8444     		add	ip, r0, ip
 1368 049c A4B2     		uxth	r4, r4
 1369 049e 094B     		ldr	r3, .L201+4
 1370 04a0 0019     		adds	r0, r0, r4
 1371 04a2 0CF1005C 		add	ip, ip, #536870912
 1372 04a6 C318     		adds	r3, r0, r3
 1373 04a8 0CF5405C 		add	ip, ip, #12288
 1374 04ac 4908     		lsrs	r1, r1, #1
 1375              	.LVL85:
 1376 04ae 5208     		lsrs	r2, r2, #1
 1377              	.LVL86:
 1378 04b0 4FEA4C00 		lsl	r0, ip, #1
 1379 04b4 4900     		lsls	r1, r1, #1
 1380 04b6 5B00     		lsls	r3, r3, #1
 1381 04b8 5200     		lsls	r2, r2, #1
 1382 04ba 0160     		str	r1, [r0, #0]
 1383 04bc 1A60     		str	r2, [r3, #0]
 575:lib//src/usb_regs.c **** }
 1384              		.loc 1 575 0
 1385 04be 30BD     		pop	{r4, r5, pc}
 1386              	.L202:
 1387              		.align	2
 1388              	.L201:
 1389 04c0 505C0040 		.word	1073765456
 1390 04c4 04300020 		.word	536883204
 1391              	.LFE45:
 1393              		.align	2
 1394              		.global	SetEPDblBuf0Addr
 1395              		.thumb
 1396              		.thumb_func
 1398              	SetEPDblBuf0Addr:
 1399              	.LFB46:
 576:lib//src/usb_regs.c **** /*******************************************************************************
 577:lib//src/usb_regs.c **** * Function Name  : SetEPDblBuf0Addr
 578:lib//src/usb_regs.c **** * Description    : Set the Buffer 1 address.
 579:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number
 580:lib//src/usb_regs.c **** *                  wBuf0Addr: new address.
 581:lib//src/usb_regs.c **** * Output         : None.
 582:lib//src/usb_regs.c **** * Return         : None.
 583:lib//src/usb_regs.c **** *******************************************************************************/
 584:lib//src/usb_regs.c **** void SetEPDblBuf0Addr(u8 bEpNum, u16 wBuf0Addr)
 585:lib//src/usb_regs.c **** {
 1400              		.loc 1 585 0
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403              		@ link register save eliminated.
 1404              	.LVL87:
 586:lib//src/usb_regs.c ****   _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
 1405              		.loc 1 586 0
 1406 04c8 064B     		ldr	r3, .L205
 1407 04ca 4908     		lsrs	r1, r1, #1
 1408              	.LVL88:
 1409 04cc 1B68     		ldr	r3, [r3, #0]
 1410 04ce 4900     		lsls	r1, r1, #1
 1411 04d0 9BB2     		uxth	r3, r3
 1412 04d2 03EBC003 		add	r3, r3, r0, lsl #3
 1413 04d6 03F10053 		add	r3, r3, #536870912
 1414 04da 03F54053 		add	r3, r3, #12288
 1415 04de 5B00     		lsls	r3, r3, #1
 1416 04e0 1960     		str	r1, [r3, #0]
 587:lib//src/usb_regs.c **** }
 1417              		.loc 1 587 0
 1418 04e2 7047     		bx	lr
 1419              	.L206:
 1420              		.align	2
 1421              	.L205:
 1422 04e4 505C0040 		.word	1073765456
 1423              	.LFE46:
 1425              		.align	2
 1426              		.global	SetEPDblBuf1Addr
 1427              		.thumb
 1428              		.thumb_func
 1430              	SetEPDblBuf1Addr:
 1431              	.LFB47:
 588:lib//src/usb_regs.c **** /*******************************************************************************
 589:lib//src/usb_regs.c **** * Function Name  : SetEPDblBuf1Addr
 590:lib//src/usb_regs.c **** * Description    : Set the Buffer 1 address.
 591:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number
 592:lib//src/usb_regs.c **** *                  wBuf1Addr: new address.
 593:lib//src/usb_regs.c **** * Output         : None.
 594:lib//src/usb_regs.c **** * Return         : None.
 595:lib//src/usb_regs.c **** *******************************************************************************/
 596:lib//src/usb_regs.c **** void SetEPDblBuf1Addr(u8 bEpNum, u16 wBuf1Addr)
 597:lib//src/usb_regs.c **** {
 1432              		.loc 1 597 0
 1433              		@ args = 0, pretend = 0, frame = 0
 1434              		@ frame_needed = 0, uses_anonymous_args = 0
 1435              		@ link register save eliminated.
 1436              	.LVL89:
 598:lib//src/usb_regs.c ****   _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
 1437              		.loc 1 598 0
 1438 04e8 054A     		ldr	r2, .L209
 1439 04ea 064B     		ldr	r3, .L209+4
 1440 04ec 1268     		ldr	r2, [r2, #0]
 1441 04ee 4908     		lsrs	r1, r1, #1
 1442              	.LVL90:
 1443 04f0 92B2     		uxth	r2, r2
 1444 04f2 02EBC002 		add	r2, r2, r0, lsl #3
 1445 04f6 D318     		adds	r3, r2, r3
 1446 04f8 5B00     		lsls	r3, r3, #1
 1447 04fa 4900     		lsls	r1, r1, #1
 1448 04fc 1960     		str	r1, [r3, #0]
 599:lib//src/usb_regs.c **** }
 1449              		.loc 1 599 0
 1450 04fe 7047     		bx	lr
 1451              	.L210:
 1452              		.align	2
 1453              	.L209:
 1454 0500 505C0040 		.word	1073765456
 1455 0504 04300020 		.word	536883204
 1456              	.LFE47:
 1458              		.align	2
 1459              		.global	GetEPDblBuf0Addr
 1460              		.thumb
 1461              		.thumb_func
 1463              	GetEPDblBuf0Addr:
 1464              	.LFB48:
 600:lib//src/usb_regs.c **** /*******************************************************************************
 601:lib//src/usb_regs.c **** * Function Name  : GetEPDblBuf0Addr
 602:lib//src/usb_regs.c **** * Description    : Returns the address of the Buffer 0.
 603:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 604:lib//src/usb_regs.c **** * Output         : None.
 605:lib//src/usb_regs.c **** * Return         : None.
 606:lib//src/usb_regs.c **** *******************************************************************************/
 607:lib//src/usb_regs.c **** u16 GetEPDblBuf0Addr(u8 bEpNum)
 608:lib//src/usb_regs.c **** {
 1465              		.loc 1 608 0
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 1468              		@ link register save eliminated.
 1469              	.LVL91:
 609:lib//src/usb_regs.c ****   return(_GetEPDblBuf0Addr(bEpNum));
 1470              		.loc 1 609 0
 1471 0508 054B     		ldr	r3, .L213
 1472 050a 1B68     		ldr	r3, [r3, #0]
 1473 050c 9BB2     		uxth	r3, r3
 1474 050e 03EBC003 		add	r3, r3, r0, lsl #3
 1475 0512 03F10053 		add	r3, r3, #536870912
 1476 0516 03F54053 		add	r3, r3, #12288
 1477 051a 5B00     		lsls	r3, r3, #1
 610:lib//src/usb_regs.c **** }
 1478              		.loc 1 610 0
 1479 051c 1888     		ldrh	r0, [r3, #0]
 1480              	.LVL92:
 1481 051e 7047     		bx	lr
 1482              	.L214:
 1483              		.align	2
 1484              	.L213:
 1485 0520 505C0040 		.word	1073765456
 1486              	.LFE48:
 1488              		.align	2
 1489              		.global	GetEPDblBuf1Addr
 1490              		.thumb
 1491              		.thumb_func
 1493              	GetEPDblBuf1Addr:
 1494              	.LFB49:
 611:lib//src/usb_regs.c **** /*******************************************************************************
 612:lib//src/usb_regs.c **** * Function Name  : GetEPDblBuf1Addr
 613:lib//src/usb_regs.c **** * Description    : Returns the address of the Buffer 1.
 614:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 615:lib//src/usb_regs.c **** * Output         : None.
 616:lib//src/usb_regs.c **** * Return         : Address of the Buffer 1.
 617:lib//src/usb_regs.c **** *******************************************************************************/
 618:lib//src/usb_regs.c **** u16 GetEPDblBuf1Addr(u8 bEpNum)
 619:lib//src/usb_regs.c **** {
 1495              		.loc 1 619 0
 1496              		@ args = 0, pretend = 0, frame = 0
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498              		@ link register save eliminated.
 1499              	.LVL93:
 620:lib//src/usb_regs.c ****   return(_GetEPDblBuf1Addr(bEpNum));
 1500              		.loc 1 620 0
 1501 0524 044A     		ldr	r2, .L217
 1502 0526 054B     		ldr	r3, .L217+4
 1503 0528 1268     		ldr	r2, [r2, #0]
 1504 052a 92B2     		uxth	r2, r2
 1505 052c 02EBC002 		add	r2, r2, r0, lsl #3
 1506 0530 D318     		adds	r3, r2, r3
 1507 0532 5B00     		lsls	r3, r3, #1
 621:lib//src/usb_regs.c **** }
 1508              		.loc 1 621 0
 1509 0534 1888     		ldrh	r0, [r3, #0]
 1510              	.LVL94:
 1511 0536 7047     		bx	lr
 1512              	.L218:
 1513              		.align	2
 1514              	.L217:
 1515 0538 505C0040 		.word	1073765456
 1516 053c 04300020 		.word	536883204
 1517              	.LFE49:
 1519              		.align	2
 1520              		.global	SetEPDblBuffCount
 1521              		.thumb
 1522              		.thumb_func
 1524              	SetEPDblBuffCount:
 1525              	.LFB50:
 622:lib//src/usb_regs.c **** /*******************************************************************************
 623:lib//src/usb_regs.c **** * Function Name  : SetEPDblBuffCount
 624:lib//src/usb_regs.c **** * Description    : Set the number of bytes for a double Buffer 
 625:lib//src/usb_regs.c **** *                  endpoint.
 626:lib//src/usb_regs.c **** * Input          : bEpNum,bDir, wCount
 627:lib//src/usb_regs.c **** * Output         : None.
 628:lib//src/usb_regs.c **** * Return         : None.
 629:lib//src/usb_regs.c **** *******************************************************************************/
 630:lib//src/usb_regs.c **** void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
 631:lib//src/usb_regs.c **** {
 1526              		.loc 1 631 0
 1527              		@ args = 0, pretend = 0, frame = 0
 1528              		@ frame_needed = 0, uses_anonymous_args = 0
 1529              	.LVL95:
 632:lib//src/usb_regs.c ****   _SetEPDblBuffCount(bEpNum, bDir, wCount);
 1530              		.loc 1 632 0
 1531 0540 0129     		cmp	r1, #1
 1532              		.loc 1 631 0
 1533 0542 10B5     		push	{r4, lr}
 1534              	.LCFI6:
 1535              		.loc 1 632 0
 1536 0544 24D1     		bne	.L220
 1537              	.LBB11:
 1538 0546 254B     		ldr	r3, .L234
 1539 0548 2549     		ldr	r1, .L234+4
 1540              	.LVL96:
 1541 054a 1B68     		ldr	r3, [r3, #0]
 1542 054c C000     		lsls	r0, r0, #3
 1543              	.LVL97:
 1544 054e 9BB2     		uxth	r3, r3
 1545 0550 5918     		adds	r1, r3, r1
 1546 0552 0918     		adds	r1, r1, r0
 1547 0554 4B00     		lsls	r3, r1, #1
 1548              	.LVL98:
 1549              	.LBB12:
 1550 0556 3E2A     		cmp	r2, #62
 1551 0558 09D9     		bls	.L221
 1552 055a 5109     		lsrs	r1, r2, #5
 1553              	.LVL99:
 1554 055c 12F01F0F 		tst	r2, #31
 1555 0560 01D1     		bne	.L222
 1556 0562 0139     		subs	r1, r1, #1
 1557              	.LVL100:
 1558 0564 89B2     		uxth	r1, r1
 1559              	.LVL101:
 1560              	.L222:
 1561 0566 8902     		lsls	r1, r1, #10
 1562              	.LVL102:
 1563 0568 41F40041 		orr	r1, r1, #32768
 1564 056c 05E0     		b	.L230
 1565              	.L221:
 1566 056e 5108     		lsrs	r1, r2, #1
 1567              	.LVL103:
 1568 0570 12F0010F 		tst	r2, #1
 1569 0574 18BF     		it	ne
 1570 0576 0131     		addne	r1, r1, #1
 1571              	.LVL104:
 1572 0578 8902     		lsls	r1, r1, #10
 1573              	.LVL105:
 1574              	.L230:
 1575 057a 1960     		str	r1, [r3, #0]
 1576              	.LBE12:
 1577              	.LBE11:
 1578              	.LBB13:
 1579 057c 1749     		ldr	r1, .L234
 1580 057e 194B     		ldr	r3, .L234+8
 1581              	.LVL106:
 1582 0580 0968     		ldr	r1, [r1, #0]
 1583 0582 89B2     		uxth	r1, r1
 1584 0584 CB18     		adds	r3, r1, r3
 1585 0586 1818     		adds	r0, r3, r0
 1586 0588 4000     		lsls	r0, r0, #1
 1587              	.LVL107:
 1588              	.LBB14:
 1589 058a 3E2A     		cmp	r2, #62
 1590 058c 1ED9     		bls	.L226
 1591 058e 13E0     		b	.L233
 1592              	.LVL108:
 1593              	.L220:
 1594              	.LBE14:
 1595              	.LBE13:
 1596 0590 0229     		cmp	r1, #2
 1597 0592 22D1     		bne	.L229
 1598 0594 114B     		ldr	r3, .L234
 1599 0596 C000     		lsls	r0, r0, #3
 1600              	.LVL109:
 1601 0598 1C68     		ldr	r4, [r3, #0]
 1602 059a 1B68     		ldr	r3, [r3, #0]
 1603 059c A4B2     		uxth	r4, r4
 1604 059e 1FFA83FC 		uxth	ip, r3
 1605 05a2 0F49     		ldr	r1, .L234+4
 1606              	.LVL110:
 1607 05a4 0F4B     		ldr	r3, .L234+8
 1608 05a6 8444     		add	ip, r0, ip
 1609 05a8 0019     		adds	r0, r0, r4
 1610 05aa 4118     		adds	r1, r0, r1
 1611 05ac 6344     		add	r3, ip, r3
 1612 05ae 4900     		lsls	r1, r1, #1
 1613 05b0 5B00     		lsls	r3, r3, #1
 1614 05b2 0A60     		str	r2, [r1, #0]
 1615 05b4 1A60     		str	r2, [r3, #0]
 1616 05b6 10E0     		b	.L229
 1617              	.LVL111:
 1618              	.L233:
 1619              	.LBB16:
 1620              	.LBB15:
 1621 05b8 5309     		lsrs	r3, r2, #5
 1622              	.LVL112:
 1623 05ba 12F01F0F 		tst	r2, #31
 1624 05be 01D1     		bne	.L227
 1625 05c0 013B     		subs	r3, r3, #1
 1626              	.LVL113:
 1627 05c2 9BB2     		uxth	r3, r3
 1628              	.LVL114:
 1629              	.L227:
 1630 05c4 9B02     		lsls	r3, r3, #10
 1631              	.LVL115:
 1632 05c6 43F40043 		orr	r3, r3, #32768
 1633 05ca 05E0     		b	.L231
 1634              	.L226:
 1635 05cc 5308     		lsrs	r3, r2, #1
 1636              	.LVL116:
 1637 05ce 12F0010F 		tst	r2, #1
 1638 05d2 18BF     		it	ne
 1639 05d4 0133     		addne	r3, r3, #1
 1640              	.LVL117:
 1641 05d6 9B02     		lsls	r3, r3, #10
 1642              	.LVL118:
 1643              	.L231:
 1644 05d8 0360     		str	r3, [r0, #0]
 1645              	.LVL119:
 1646              	.L229:
 1647              	.LBE15:
 1648              	.LBE16:
 633:lib//src/usb_regs.c **** }
 1649              		.loc 1 633 0
 1650 05da 10BD     		pop	{r4, pc}
 1651              	.L235:
 1652              		.align	2
 1653              	.L234:
 1654 05dc 505C0040 		.word	1073765456
 1655 05e0 02300020 		.word	536883202
 1656 05e4 06300020 		.word	536883206
 1657              	.LFE50:
 1659              		.align	2
 1660              		.global	SetEPDblBuf0Count
 1661              		.thumb
 1662              		.thumb_func
 1664              	SetEPDblBuf0Count:
 1665              	.LFB51:
 634:lib//src/usb_regs.c **** /*******************************************************************************
 635:lib//src/usb_regs.c **** * Function Name  : SetEPDblBuf0Count
 636:lib//src/usb_regs.c **** * Description    : Set the number of bytes in the buffer 0 of a double Buffer 
 637:lib//src/usb_regs.c **** *                  endpoint.
 638:lib//src/usb_regs.c **** * Input          : bEpNum, bDir,  wCount
 639:lib//src/usb_regs.c **** * Output         : None.
 640:lib//src/usb_regs.c **** * Return         : None.
 641:lib//src/usb_regs.c **** *******************************************************************************/
 642:lib//src/usb_regs.c **** void SetEPDblBuf0Count(u8 bEpNum, u8 bDir, u16 wCount)
 643:lib//src/usb_regs.c **** {
 1666              		.loc 1 643 0
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
 1670              	.LVL120:
 644:lib//src/usb_regs.c ****   _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 1671              		.loc 1 644 0
 1672 05e8 0129     		cmp	r1, #1
 1673 05ea 1BD1     		bne	.L237
 1674              	.LBB17:
 1675 05ec 1349     		ldr	r1, .L244
 1676              	.LVL121:
 1677 05ee 144B     		ldr	r3, .L244+4
 1678 05f0 0968     		ldr	r1, [r1, #0]
 1679 05f2 89B2     		uxth	r1, r1
 1680 05f4 CB18     		adds	r3, r1, r3
 1681 05f6 03EBC000 		add	r0, r3, r0, lsl #3
 1682              	.LVL122:
 1683 05fa 4000     		lsls	r0, r0, #1
 1684              	.LVL123:
 1685              	.LBB18:
 1686 05fc 3E2A     		cmp	r2, #62
 1687 05fe 09D9     		bls	.L238
 1688 0600 5309     		lsrs	r3, r2, #5
 1689              	.LVL124:
 1690 0602 12F01F0F 		tst	r2, #31
 1691 0606 01D1     		bne	.L239
 1692 0608 013B     		subs	r3, r3, #1
 1693              	.LVL125:
 1694 060a 9BB2     		uxth	r3, r3
 1695              	.LVL126:
 1696              	.L239:
 1697 060c 9B02     		lsls	r3, r3, #10
 1698              	.LVL127:
 1699 060e 43F40043 		orr	r3, r3, #32768
 1700 0612 05E0     		b	.L243
 1701              	.L238:
 1702 0614 5308     		lsrs	r3, r2, #1
 1703              	.LVL128:
 1704 0616 12F0010F 		tst	r2, #1
 1705 061a 18BF     		it	ne
 1706 061c 0133     		addne	r3, r3, #1
 1707              	.LVL129:
 1708 061e 9B02     		lsls	r3, r3, #10
 1709              	.LVL130:
 1710              	.L243:
 1711 0620 0360     		str	r3, [r0, #0]
 1712 0622 0AE0     		b	.L242
 1713              	.LVL131:
 1714              	.L237:
 1715              	.LBE18:
 1716              	.LBE17:
 1717 0624 0229     		cmp	r1, #2
 1718 0626 08D1     		bne	.L242
 1719 0628 0449     		ldr	r1, .L244
 1720              	.LVL132:
 1721 062a 054B     		ldr	r3, .L244+4
 1722 062c 0968     		ldr	r1, [r1, #0]
 1723 062e 89B2     		uxth	r1, r1
 1724 0630 01EBC000 		add	r0, r1, r0, lsl #3
 1725              	.LVL133:
 1726 0634 C318     		adds	r3, r0, r3
 1727 0636 5B00     		lsls	r3, r3, #1
 1728 0638 1A60     		str	r2, [r3, #0]
 1729              	.LVL134:
 1730              	.L242:
 645:lib//src/usb_regs.c **** }
 1731              		.loc 1 645 0
 1732 063a 7047     		bx	lr
 1733              	.L245:
 1734              		.align	2
 1735              	.L244:
 1736 063c 505C0040 		.word	1073765456
 1737 0640 02300020 		.word	536883202
 1738              	.LFE51:
 1740              		.align	2
 1741              		.global	SetEPDblBuf1Count
 1742              		.thumb
 1743              		.thumb_func
 1745              	SetEPDblBuf1Count:
 1746              	.LFB52:
 646:lib//src/usb_regs.c **** /*******************************************************************************
 647:lib//src/usb_regs.c **** * Function Name  : SetEPDblBuf1Count
 648:lib//src/usb_regs.c **** * Description    : Set the number of bytes in the buffer 0 of a double Buffer 
 649:lib//src/usb_regs.c **** *                  endpoint.
 650:lib//src/usb_regs.c **** * Input          : bEpNum,  bDir,  wCount
 651:lib//src/usb_regs.c **** * Output         : None.
 652:lib//src/usb_regs.c **** * Return         : None.
 653:lib//src/usb_regs.c **** *******************************************************************************/
 654:lib//src/usb_regs.c **** void SetEPDblBuf1Count(u8 bEpNum, u8 bDir, u16 wCount)
 655:lib//src/usb_regs.c **** {
 1747              		.loc 1 655 0
 1748              		@ args = 0, pretend = 0, frame = 0
 1749              		@ frame_needed = 0, uses_anonymous_args = 0
 1750              		@ link register save eliminated.
 1751              	.LVL135:
 656:lib//src/usb_regs.c ****   _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 1752              		.loc 1 656 0
 1753 0644 0129     		cmp	r1, #1
 1754 0646 1BD1     		bne	.L247
 1755              	.LBB19:
 1756 0648 1349     		ldr	r1, .L254
 1757              	.LVL136:
 1758 064a 144B     		ldr	r3, .L254+4
 1759 064c 0968     		ldr	r1, [r1, #0]
 1760 064e 89B2     		uxth	r1, r1
 1761 0650 CB18     		adds	r3, r1, r3
 1762 0652 03EBC000 		add	r0, r3, r0, lsl #3
 1763              	.LVL137:
 1764 0656 4000     		lsls	r0, r0, #1
 1765              	.LVL138:
 1766              	.LBB20:
 1767 0658 3E2A     		cmp	r2, #62
 1768 065a 09D9     		bls	.L248
 1769 065c 5309     		lsrs	r3, r2, #5
 1770              	.LVL139:
 1771 065e 12F01F0F 		tst	r2, #31
 1772 0662 01D1     		bne	.L249
 1773 0664 013B     		subs	r3, r3, #1
 1774              	.LVL140:
 1775 0666 9BB2     		uxth	r3, r3
 1776              	.LVL141:
 1777              	.L249:
 1778 0668 9B02     		lsls	r3, r3, #10
 1779              	.LVL142:
 1780 066a 43F40043 		orr	r3, r3, #32768
 1781 066e 05E0     		b	.L253
 1782              	.L248:
 1783 0670 5308     		lsrs	r3, r2, #1
 1784              	.LVL143:
 1785 0672 12F0010F 		tst	r2, #1
 1786 0676 18BF     		it	ne
 1787 0678 0133     		addne	r3, r3, #1
 1788              	.LVL144:
 1789 067a 9B02     		lsls	r3, r3, #10
 1790              	.LVL145:
 1791              	.L253:
 1792 067c 0360     		str	r3, [r0, #0]
 1793 067e 0AE0     		b	.L252
 1794              	.LVL146:
 1795              	.L247:
 1796              	.LBE20:
 1797              	.LBE19:
 1798 0680 0229     		cmp	r1, #2
 1799 0682 08D1     		bne	.L252
 1800 0684 0449     		ldr	r1, .L254
 1801              	.LVL147:
 1802 0686 054B     		ldr	r3, .L254+4
 1803 0688 0968     		ldr	r1, [r1, #0]
 1804 068a 89B2     		uxth	r1, r1
 1805 068c 01EBC000 		add	r0, r1, r0, lsl #3
 1806              	.LVL148:
 1807 0690 C318     		adds	r3, r0, r3
 1808 0692 5B00     		lsls	r3, r3, #1
 1809 0694 1A60     		str	r2, [r3, #0]
 1810              	.LVL149:
 1811              	.L252:
 657:lib//src/usb_regs.c **** }
 1812              		.loc 1 657 0
 1813 0696 7047     		bx	lr
 1814              	.L255:
 1815              		.align	2
 1816              	.L254:
 1817 0698 505C0040 		.word	1073765456
 1818 069c 06300020 		.word	536883206
 1819              	.LFE52:
 1821              		.align	2
 1822              		.global	GetEPDblBuf0Count
 1823              		.thumb
 1824              		.thumb_func
 1826              	GetEPDblBuf0Count:
 1827              	.LFB53:
 658:lib//src/usb_regs.c **** /*******************************************************************************
 659:lib//src/usb_regs.c **** * Function Name  : GetEPDblBuf0Count
 660:lib//src/usb_regs.c **** * Description    : Returns the number of byte received in the buffer 0 of a double
 661:lib//src/usb_regs.c **** *                  Buffer endpoint.
 662:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 663:lib//src/usb_regs.c **** * Output         : None.
 664:lib//src/usb_regs.c **** * Return         : Endpoint Buffer 0 count
 665:lib//src/usb_regs.c **** *******************************************************************************/
 666:lib//src/usb_regs.c **** u16 GetEPDblBuf0Count(u8 bEpNum)
 667:lib//src/usb_regs.c **** {
 1828              		.loc 1 667 0
 1829              		@ args = 0, pretend = 0, frame = 0
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832              	.LVL150:
 668:lib//src/usb_regs.c ****   return(_GetEPDblBuf0Count(bEpNum));
 1833              		.loc 1 668 0
 1834 06a0 054A     		ldr	r2, .L258
 1835 06a2 064B     		ldr	r3, .L258+4
 1836 06a4 1268     		ldr	r2, [r2, #0]
 1837 06a6 92B2     		uxth	r2, r2
 1838 06a8 02EBC002 		add	r2, r2, r0, lsl #3
 1839 06ac D318     		adds	r3, r2, r3
 1840 06ae 5B00     		lsls	r3, r3, #1
 1841 06b0 1868     		ldr	r0, [r3, #0]
 1842              	.LVL151:
 669:lib//src/usb_regs.c **** }
 1843              		.loc 1 669 0
 1844 06b2 8005     		lsls	r0, r0, #22
 1845 06b4 800D     		lsrs	r0, r0, #22
 1846 06b6 7047     		bx	lr
 1847              	.L259:
 1848              		.align	2
 1849              	.L258:
 1850 06b8 505C0040 		.word	1073765456
 1851 06bc 02300020 		.word	536883202
 1852              	.LFE53:
 1854              		.align	2
 1855              		.global	GetEPDblBuf1Count
 1856              		.thumb
 1857              		.thumb_func
 1859              	GetEPDblBuf1Count:
 1860              	.LFB54:
 670:lib//src/usb_regs.c **** /*******************************************************************************
 671:lib//src/usb_regs.c **** * Function Name  : GetEPDblBuf1Count
 672:lib//src/usb_regs.c **** * Description    : Returns the number of data received in the buffer 1 of a double
 673:lib//src/usb_regs.c **** *                  Buffer endpoint.
 674:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number.
 675:lib//src/usb_regs.c **** * Output         : None.
 676:lib//src/usb_regs.c **** * Return         : Endpoint Buffer 1 count.
 677:lib//src/usb_regs.c **** *******************************************************************************/
 678:lib//src/usb_regs.c **** u16 GetEPDblBuf1Count(u8 bEpNum)
 679:lib//src/usb_regs.c **** {
 1861              		.loc 1 679 0
 1862              		@ args = 0, pretend = 0, frame = 0
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
 1864              		@ link register save eliminated.
 1865              	.LVL152:
 680:lib//src/usb_regs.c ****   return(_GetEPDblBuf1Count(bEpNum));
 1866              		.loc 1 680 0
 1867 06c0 054A     		ldr	r2, .L262
 1868 06c2 064B     		ldr	r3, .L262+4
 1869 06c4 1268     		ldr	r2, [r2, #0]
 1870 06c6 92B2     		uxth	r2, r2
 1871 06c8 02EBC002 		add	r2, r2, r0, lsl #3
 1872 06cc D318     		adds	r3, r2, r3
 1873 06ce 5B00     		lsls	r3, r3, #1
 1874 06d0 1868     		ldr	r0, [r3, #0]
 1875              	.LVL153:
 681:lib//src/usb_regs.c **** }
 1876              		.loc 1 681 0
 1877 06d2 8005     		lsls	r0, r0, #22
 1878 06d4 800D     		lsrs	r0, r0, #22
 1879 06d6 7047     		bx	lr
 1880              	.L263:
 1881              		.align	2
 1882              	.L262:
 1883 06d8 505C0040 		.word	1073765456
 1884 06dc 06300020 		.word	536883206
 1885              	.LFE54:
 1887              		.align	2
 1888              		.global	GetEPDblBufDir
 1889              		.thumb
 1890              		.thumb_func
 1892              	GetEPDblBufDir:
 1893              	.LFB55:
 682:lib//src/usb_regs.c **** /*******************************************************************************
 683:lib//src/usb_regs.c **** * Function Name  : GetEPDblBufDir
 684:lib//src/usb_regs.c **** * Description    : gets direction of the double buffered endpoint
 685:lib//src/usb_regs.c **** * Input          : bEpNum: Endpoint Number. 
 686:lib//src/usb_regs.c **** * Output         : None.
 687:lib//src/usb_regs.c **** * Return         : EP_DBUF_OUT, EP_DBUF_IN,
 688:lib//src/usb_regs.c **** *                  EP_DBUF_ERR if the endpoint counter not yet programmed.
 689:lib//src/usb_regs.c **** *******************************************************************************/
 690:lib//src/usb_regs.c **** EP_DBUF_DIR GetEPDblBufDir(u8 bEpNum)
 691:lib//src/usb_regs.c **** {
 1894              		.loc 1 691 0
 1895              		@ args = 0, pretend = 0, frame = 0
 1896              		@ frame_needed = 0, uses_anonymous_args = 0
 1897              		@ link register save eliminated.
 1898              	.LVL154:
 692:lib//src/usb_regs.c ****   if ((u16)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
 1899              		.loc 1 692 0
 1900 06e0 0D4B     		ldr	r3, .L269
 1901 06e2 C000     		lsls	r0, r0, #3
 1902              	.LVL155:
 1903 06e4 1968     		ldr	r1, [r3, #0]
 1904 06e6 0D4A     		ldr	r2, .L269+4
 1905 06e8 89B2     		uxth	r1, r1
 1906 06ea 4118     		adds	r1, r0, r1
 1907 06ec 8A18     		adds	r2, r1, r2
 1908 06ee 5200     		lsls	r2, r2, #1
 1909 06f0 1288     		ldrh	r2, [r2, #0]
 1910 06f2 12F47C4F 		tst	r2, #64512
 1911 06f6 01D0     		beq	.L265
 1912 06f8 0120     		movs	r0, #1
 1913 06fa 0CE0     		b	.L266
 1914              	.L265:
 693:lib//src/usb_regs.c ****     return(EP_DBUF_OUT);
 694:lib//src/usb_regs.c ****   else if (((u16)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
 1915              		.loc 1 694 0
 1916 06fc 1A68     		ldr	r2, [r3, #0]
 1917 06fe 084B     		ldr	r3, .L269+8
 1918 0700 92B2     		uxth	r2, r2
 1919 0702 8018     		adds	r0, r0, r2
 1920 0704 C318     		adds	r3, r0, r3
 1921 0706 5B00     		lsls	r3, r3, #1
 1922 0708 1888     		ldrh	r0, [r3, #0]
 1923 070a 8005     		lsls	r0, r0, #22
 1924 070c 800D     		lsrs	r0, r0, #22
 1925 070e 0028     		cmp	r0, #0
 1926 0710 14BF     		ite	ne
 1927 0712 0220     		movne	r0, #2
 1928 0714 0020     		moveq	r0, #0
 1929              	.L266:
 695:lib//src/usb_regs.c ****     return(EP_DBUF_IN);
 696:lib//src/usb_regs.c ****   else
 697:lib//src/usb_regs.c ****     return(EP_DBUF_ERR);
 698:lib//src/usb_regs.c **** }
 1930              		.loc 1 698 0
 1931 0716 7047     		bx	lr
 1932              	.L270:
 1933              		.align	2
 1934              	.L269:
 1935 0718 505C0040 		.word	1073765456
 1936 071c 06300020 		.word	536883206
 1937 0720 02300020 		.word	536883202
 1938              	.LFE55:
 1940              		.align	2
 1941              		.global	FreeUserBuffer
 1942              		.thumb
 1943              		.thumb_func
 1945              	FreeUserBuffer:
 1946              	.LFB56:
 699:lib//src/usb_regs.c **** /*******************************************************************************
 700:lib//src/usb_regs.c **** * Function Name  : FreeUserBuffer
 701:lib//src/usb_regs.c **** * Description    : free buffer used from the application realizing it to the line
 702:lib//src/usb_regs.c ****                    toggles bit SW_BUF in the double buffered endpoint register
 703:lib//src/usb_regs.c **** * Input          : bEpNum, bDir
 704:lib//src/usb_regs.c **** * Output         : None.
 705:lib//src/usb_regs.c **** * Return         : None.
 706:lib//src/usb_regs.c **** *******************************************************************************/
 707:lib//src/usb_regs.c **** void FreeUserBuffer(u8 bEpNum, u8 bDir)
 708:lib//src/usb_regs.c **** {
 1947              		.loc 1 708 0
 1948              		@ args = 0, pretend = 0, frame = 0
 1949              		@ frame_needed = 0, uses_anonymous_args = 0
 1950              		@ link register save eliminated.
 1951              	.LVL156:
 709:lib//src/usb_regs.c ****   if (bDir == EP_DBUF_OUT)
 1952              		.loc 1 709 0
 1953 0724 0129     		cmp	r1, #1
 1954 0726 09D1     		bne	.L272
 710:lib//src/usb_regs.c ****   { /* OUT double buffered endpoint */
 711:lib//src/usb_regs.c ****     _ToggleDTOG_TX(bEpNum);
 1955              		.loc 1 711 0
 1956 0728 0B4A     		ldr	r2, .L276
 1957 072a 48F68F73 		movw	r3, #36751
 1958 072e 52F82010 		ldr	r1, [r2, r0, lsl #2]
 1959              	.LVL157:
 1960 0732 01EA0303 		and	r3, r1, r3
 1961 0736 43F04003 		orr	r3, r3, #64
 1962 073a 0AE0     		b	.L275
 1963              	.LVL158:
 1964              	.L272:
 712:lib//src/usb_regs.c ****   }
 713:lib//src/usb_regs.c ****   else if (bDir == EP_DBUF_IN)
 1965              		.loc 1 713 0
 1966 073c 0229     		cmp	r1, #2
 1967 073e 0AD1     		bne	.L274
 714:lib//src/usb_regs.c ****   { /* IN double buffered endpoint */
 715:lib//src/usb_regs.c ****     _ToggleDTOG_RX(bEpNum);
 1968              		.loc 1 715 0
 1969 0740 054A     		ldr	r2, .L276
 1970 0742 48F68F73 		movw	r3, #36751
 1971 0746 52F82010 		ldr	r1, [r2, r0, lsl #2]
 1972              	.LVL159:
 1973 074a 01EA0303 		and	r3, r1, r3
 1974 074e 43F48043 		orr	r3, r3, #16384
 1975              	.L275:
 1976 0752 42F82030 		str	r3, [r2, r0, lsl #2]
 1977              	.LVL160:
 1978              	.L274:
 716:lib//src/usb_regs.c ****   }
 717:lib//src/usb_regs.c **** }
 1979              		.loc 1 717 0
 1980 0756 7047     		bx	lr
 1981              	.L277:
 1982              		.align	2
 1983              	.L276:
 1984 0758 005C0040 		.word	1073765376
 1985              	.LFE56:
 1987              		.align	2
 1988              		.global	ToWord
 1989              		.thumb
 1990              		.thumb_func
 1992              	ToWord:
 1993              	.LFB57:
 718:lib//src/usb_regs.c **** 
 719:lib//src/usb_regs.c **** /*******************************************************************************
 720:lib//src/usb_regs.c **** * Function Name  : ToWord
 721:lib//src/usb_regs.c **** * Description    : merge two byte in a word.
 722:lib//src/usb_regs.c **** * Input          : bh: byte high, bl: bytes low.
 723:lib//src/usb_regs.c **** * Output         : None.
 724:lib//src/usb_regs.c **** * Return         : resulted word.
 725:lib//src/usb_regs.c **** *******************************************************************************/
 726:lib//src/usb_regs.c **** u16 ToWord(u8 bh, u8 bl)
 727:lib//src/usb_regs.c **** {
 1994              		.loc 1 727 0
 1995              		@ args = 0, pretend = 0, frame = 0
 1996              		@ frame_needed = 0, uses_anonymous_args = 0
 1997              		@ link register save eliminated.
 1998              	.LVL161:
 728:lib//src/usb_regs.c ****   u16 wRet;
 729:lib//src/usb_regs.c ****   wRet = (u16)bl | ((u16)bh << 8);
 730:lib//src/usb_regs.c ****   return(wRet);
 731:lib//src/usb_regs.c **** }
 1999              		.loc 1 731 0
 2000 075c 41EA0020 		orr	r0, r1, r0, lsl #8
 2001              	.LVL162:
 2002 0760 7047     		bx	lr
 2003              	.LFE57:
 2005 0762 00BF     		.align	2
 2006              		.global	ByteSwap
 2007              		.thumb
 2008              		.thumb_func
 2010              	ByteSwap:
 2011              	.LFB58:
 732:lib//src/usb_regs.c **** /*******************************************************************************
 733:lib//src/usb_regs.c **** * Function Name  : ByteSwap
 734:lib//src/usb_regs.c **** * Description    : Swap two byte in a word.
 735:lib//src/usb_regs.c **** * Input          : wSwW: word to Swap.
 736:lib//src/usb_regs.c **** * Output         : None.
 737:lib//src/usb_regs.c **** * Return         : resulted word.
 738:lib//src/usb_regs.c **** *******************************************************************************/
 739:lib//src/usb_regs.c **** u16 ByteSwap(u16 wSwW)
 740:lib//src/usb_regs.c **** {
 2012              		.loc 1 740 0
 2013              		@ args = 0, pretend = 0, frame = 0
 2014              		@ frame_needed = 0, uses_anonymous_args = 0
 2015              		@ link register save eliminated.
 2016              	.LVL163:
 2017              		.loc 1 740 0
 2018 0764 030A     		lsrs	r3, r0, #8
 2019 0766 C0B2     		uxtb	r0, r0
 2020              	.LVL164:
 741:lib//src/usb_regs.c ****   u8 bTemp;
 742:lib//src/usb_regs.c ****   u16 wRet;
 743:lib//src/usb_regs.c ****   bTemp = (u8)(wSwW & 0xff);
 744:lib//src/usb_regs.c ****   wRet =  (wSwW >> 8) | ((u16)bTemp << 8);
 745:lib//src/usb_regs.c ****   return(wRet);
 746:lib//src/usb_regs.c **** }
 2021              		.loc 1 746 0
 2022 0768 43EA0020 		orr	r0, r3, r0, lsl #8
 2023              	.LVL165:
 2024 076c 7047     		bx	lr
 2025              	.LFE58:
 2594              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 usb_regs.c
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:22     .text:00000000 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:27     .text:00000000 SetCNTR
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:43     .text:00000008 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:46     .text:0000000c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:51     .text:0000000c GetCNTR
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:66     .text:00000014 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:69     .text:00000018 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:74     .text:00000018 SetISTR
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:89     .text:00000020 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:92     .text:00000024 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:97     .text:00000024 GetISTR
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:112    .text:0000002c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:115    .text:00000030 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:120    .text:00000030 GetFNR
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:135    .text:00000038 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:138    .text:0000003c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:143    .text:0000003c SetDADDR
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:158    .text:00000044 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:161    .text:00000048 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:166    .text:00000048 GetDADDR
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:181    .text:00000050 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:184    .text:00000054 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:189    .text:00000054 SetBTABLE
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:206    .text:00000064 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:209    .text:00000068 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:214    .text:00000068 GetBTABLE
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:229    .text:00000070 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:232    .text:00000074 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:237    .text:00000074 SetENDPOINT
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:252    .text:0000007c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:255    .text:00000080 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:260    .text:00000080 GetENDPOINT
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:277    .text:0000008c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:280    .text:00000090 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:285    .text:00000090 SetEPType
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:307    .text:000000a8 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:310    .text:000000ac $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:315    .text:000000ac GetEPType
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:332    .text:000000b8 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:335    .text:000000bc $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:340    .text:000000bc SetEPTxStatus
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:375    .text:000000e8 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:378    .text:000000ec $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:383    .text:000000ec SetEPRxStatus
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:418    .text:00000118 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:421    .text:0000011c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:426    .text:0000011c SetDouBleBuffEPStall
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:461    .text:00000140 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:464    .text:00000144 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:469    .text:00000144 GetEPTxStatus
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:486    .text:00000150 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:489    .text:00000154 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:494    .text:00000154 GetEPRxStatus
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:511    .text:00000160 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:514    .text:00000164 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:519    .text:00000164 SetEPTxValid
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:543    .text:0000017c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:546    .text:00000180 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:551    .text:00000180 SetEPRxValid
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:575    .text:00000198 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:578    .text:0000019c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:583    .text:0000019c SetEP_KIND
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:602    .text:000001b4 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:605    .text:000001b8 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:610    .text:000001b8 ClearEP_KIND
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:628    .text:000001cc $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:631    .text:000001d0 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:636    .text:000001d0 Clear_Status_Out
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:654    .text:000001e4 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:657    .text:000001e8 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:662    .text:000001e8 Set_Status_Out
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:681    .text:00000200 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:684    .text:00000204 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:689    .text:00000204 SetEPDoubleBuff
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:708    .text:0000021c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:711    .text:00000220 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:716    .text:00000220 ClearEPDoubleBuff
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:734    .text:00000234 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:737    .text:00000238 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:742    .text:00000238 GetTxStallStatus
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:763    .text:0000024c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:766    .text:00000250 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:771    .text:00000250 GetRxStallStatus
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:792    .text:00000268 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:795    .text:0000026c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:800    .text:0000026c ClearEP_CTR_RX
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:818    .text:00000280 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:821    .text:00000284 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:826    .text:00000284 ClearEP_CTR_TX
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:844    .text:00000298 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:847    .text:0000029c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:852    .text:0000029c ToggleDTOG_RX
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:871    .text:000002b4 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:874    .text:000002b8 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:879    .text:000002b8 ToggleDTOG_TX
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:898    .text:000002d0 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:901    .text:000002d4 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:906    .text:000002d4 ClearDTOG_RX
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:929    .text:000002f8 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:932    .text:000002fc $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:937    .text:000002fc ClearDTOG_TX
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:960    .text:00000320 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:963    .text:00000324 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:968    .text:00000324 SetEPAddress
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:990    .text:0000033c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:993    .text:00000340 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:998    .text:00000340 GetEPAddress
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1015   .text:0000034c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1018   .text:00000350 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1023   .text:00000350 SetEPTxAddr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1047   .text:0000036c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1050   .text:00000370 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1055   .text:00000370 SetEPRxAddr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1079   .text:00000388 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1083   .text:00000390 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1088   .text:00000390 GetEPTxAddr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1110   .text:000003a8 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1113   .text:000003ac $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1118   .text:000003ac GetEPRxAddr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1140   .text:000003c0 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1144   .text:000003c8 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1149   .text:000003c8 SetEPTxCount
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1170   .text:000003dc $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1174   .text:000003e4 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1179   .text:000003e4 SetEPCountRxReg
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1224   .text:0000040c SetEPRxCount
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1275   .text:00000444 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1279   .text:0000044c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1284   .text:0000044c GetEPTxCount
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1308   .text:00000464 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1312   .text:0000046c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1317   .text:0000046c GetEPRxCount
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1341   .text:00000484 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1345   .text:0000048c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1350   .text:0000048c SetEPDblBuffAddr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1389   .text:000004c0 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1393   .text:000004c8 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1398   .text:000004c8 SetEPDblBuf0Addr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1422   .text:000004e4 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1425   .text:000004e8 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1430   .text:000004e8 SetEPDblBuf1Addr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1454   .text:00000500 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1458   .text:00000508 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1463   .text:00000508 GetEPDblBuf0Addr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1485   .text:00000520 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1488   .text:00000524 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1493   .text:00000524 GetEPDblBuf1Addr
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1515   .text:00000538 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1519   .text:00000540 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1524   .text:00000540 SetEPDblBuffCount
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1654   .text:000005dc $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1659   .text:000005e8 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1664   .text:000005e8 SetEPDblBuf0Count
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1736   .text:0000063c $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1740   .text:00000644 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1745   .text:00000644 SetEPDblBuf1Count
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1817   .text:00000698 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1821   .text:000006a0 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1826   .text:000006a0 GetEPDblBuf0Count
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1850   .text:000006b8 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1854   .text:000006c0 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1859   .text:000006c0 GetEPDblBuf1Count
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1883   .text:000006d8 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1887   .text:000006e0 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1892   .text:000006e0 GetEPDblBufDir
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1935   .text:00000718 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1940   .text:00000724 $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1945   .text:00000724 FreeUserBuffer
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1984   .text:00000758 $d
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1987   .text:0000075c $t
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:1992   .text:0000075c ToWord
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:2010   .text:00000764 ByteSwap
C:\DOKUME~1\Kahlbaum\LOKALE~1\Temp\cchRXP4t.s:2040   .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
