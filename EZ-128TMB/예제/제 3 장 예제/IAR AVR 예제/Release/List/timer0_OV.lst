##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V2.28A/WIN             01/Feb/2005  09:19:49 #
# Copyright 1996-2002 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  D:\BOOK\ATmega128_책_책_책\부록 CD ROM\제 3 장          #
#                    예제\IAR AVR 예제\timer0_OV.c                           #
#    Command line =  --cpu=m16 -ms -o "D:\BOOK\ATmega128_책_책_책\부록 CD    #
#                    ROM\제 3 장 예제\IAR AVR 예제\Release\Obj\" -I          #
#                    "C:\Program Files\IAR Systems\Ew23\avr\SRC\CLIB\INC\"   #
#                    -lCN "D:\BOOK\ATmega128_책_책_책\부록 CD ROM\제 3 장    #
#                    예제\IAR AVR 예제\Release\List\" -la                    #
#                    "D:\BOOK\ATmega128_책_책_책\부록 CD ROM\제 3 장         #
#                    예제\IAR AVR 예제\Release\List\" -e                     #
#                    --initializers_in_flash -z9 --cross_call_passes=2       #
#                    -DENABLE_BIT_DEFINITIONS "D:\BOOK\ATmega128_책_책_책\부 #
#                    록 CD ROM\제 3 장 예제\IAR AVR 예제\timer0_OV.c"        #
#    List file    =  D:\BOOK\ATmega128_책_책_책\부록 CD ROM\제 3 장          #
#                    예제\IAR AVR 예제\Release\List\timer0_OV.lst            #
#    Object file  =  D:\BOOK\ATmega128_책_책_책\부록 CD ROM\제 3 장          #
#                    예제\IAR AVR 예제\Release\Obj\timer0_OV.r90             #
#                                                                            #
#                                                                            #
##############################################################################

      1          //
      2          //  Atmega128의 PORTB에 연결된 LED를 TIMER0 OVERFLOW를 이용하여 이동하는 프로그램 
      3          //
      4          
      5          #include<ina90.h>
      6          #include<iom128.h>

   \                                 In segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB;
   \                     _A_DDRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB;
   \                     _A_PORTB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0;
   \                     _A_TCNT0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0;
   \                     _A_TCCR0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x56
   \   union <unnamed> volatile __io _A_TIFR;
   \                     _A_TIFR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x57
   \   union <unnamed> volatile __io _A_TIMSK;
   \                     _A_TIMSK:
   \   00000000                              DS 1
      7          

   \                                 In segment NEAR_Z, align 1, keep-with-next
   \   00000000                              REQUIRE `?<Segment init: NEAR_Z>`
      8          unsigned char temp=0;
   \   unsigned char __near temp;
   \                     temp:
   \   00000000                              DS 1
      9          
     10          

   \                                 In segment CODE, align 2, keep-with-next
     11          void main(void)
     12          {
     13                  
     14              DDRB = 0xFF;     // PORTB is all OUTPORT
   \   __nearfunc void main();
   \                     main:
   \   00000000   EF0F                       LDI     R16,255
   \   00000002   BB07                       OUT     0x17,R16
     15              PORTB = 0xFF;    // LED OFF
   \   00000004   BB08                       OUT     0x18,R16
     16              
     17              TCCR0=0x07;      // system clock/1024
   \   00000006   E007                       LDI     R16,7
   \   00000008   BF03                       OUT     0x33,R16
     18              TCNT0=0x00;      // TiMER0 start at 0x00
   \   0000000A   E000                       LDI     R16,0
   \   0000000C   BF02                       OUT     0x32,R16
     19              
     20              TIMSK=0x01;      // TiMER0 overflow interrupt MASK
   \   0000000E   E001                       LDI     R16,1
   \   00000010   BF07                       OUT     0x37,R16
     21              TIFR=0x00;
   \   00000012   E000                       LDI     R16,0
   \   00000014   BF06                       OUT     0x36,R16
     22              
     23              __enable_interrupt();    // Global interrupt enable
   \   00000016   9478                       SEI
     24              
     25               
     26              
     27              while(1)
     28              {
     29                PORTB = temp;
   \                     ??main_0:
   \   00000018   9100....                   LDS     R16,temp
   \   0000001C   BB08                       OUT     0x18,R16
   \   0000001E   CFFC                       RJMP    ??main_0
     30               }
     31          }           
     32          
     33          #pragma vector=TIMER0_OVF_vect              // Refer iom128.h !!!!!

   \                                 In segment CODE, align 2, keep-with-next
     34          __interrupt void T0_overflow(void)   
     35          {
   \   __nearfunc __interrupt void T0_overflow();
   \                     T0_overflow:
   \   00000000   93FA                       ST      -Y,R31
   \   00000002   93EA                       ST      -Y,R30
   \   00000004   931A                       ST      -Y,R17
   \   00000006   930A                       ST      -Y,R16
   \   00000008   B71F                       IN      R17,0x3F
     36              __disable_interrupt();   
   \   0000000A   94F8                       CLI
     37               
     38              TCNT0=0x00; 
   \   0000000C   E000                       LDI     R16,0
   \   0000000E   BF02                       OUT     0x32,R16
     39                  
     40              temp++;
   \   00000010   ....                       LDI     R30,LOW(temp)
   \   00000012   ....                       LDI     R31,(temp) >> 8
   \   00000014   8100                       LD      R16,Z
   \   00000016   9503                       INC     R16
   \   00000018   8300                       ST      Z,R16
     41                      
     42              __enable_interrupt();
   \   0000001A   9478                       SEI
     43          }
   \   0000001C   BF1F                       OUT     0x3F,R17
   \   0000001E   9109                       LD      R16,Y+
   \   00000020   9119                       LD      R17,Y+
   \   00000022   91E9                       LD      R30,Y+
   \   00000024   91F9                       LD      R31,Y+
   \   00000026   9518                       RETI

   \                                 In segment INTVEC, offset 0x40, root
   \   00000000   ........                   JMP     T0_overflow

   Maximum stack usage in bytes:

     Function     CSTACK  RSTACK
     --------     ------  ------
     T0_overflow      4       0 
     main             0       0 

 
      6 bytes in segment ABSOLUTE
     72 bytes in segment CODE
      6 bytes in segment INITTAB
      4 bytes in segment INTVEC
      1 byte  in segment NEAR_Z
 
     76 bytes of CODE memory (+ 6 bytes shared)
      1 byte  of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
